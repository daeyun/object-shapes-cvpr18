saved_model_schema_version: 1
meta_graphs {
  meta_info_def {
    stripped_op_list {
      op {
        name: "Add"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_STRING
            }
          }
        }
      }
      op {
        name: "AddN"
        input_arg {
          name: "inputs"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "sum"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        is_aggregate: true
        is_commutative: true
      }
      op {
        name: "ApplyAdam"
        input_arg {
          name: "var"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "m"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "v"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "beta1_power"
          type_attr: "T"
        }
        input_arg {
          name: "beta2_power"
          type_attr: "T"
        }
        input_arg {
          name: "lr"
          type_attr: "T"
        }
        input_arg {
          name: "beta1"
          type_attr: "T"
        }
        input_arg {
          name: "beta2"
          type_attr: "T"
        }
        input_arg {
          name: "epsilon"
          type_attr: "T"
        }
        input_arg {
          name: "grad"
          type_attr: "T"
        }
        output_arg {
          name: "out"
          type_attr: "T"
          is_ref: true
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "use_nesterov"
          type: "bool"
          default_value {
            b: false
          }
        }
      }
      op {
        name: "Assign"
        input_arg {
          name: "ref"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output_ref"
          type_attr: "T"
          is_ref: true
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "validate_shape"
          type: "bool"
          default_value {
            b: true
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: true
          }
        }
        allows_uninitialized_input: true
      }
      op {
        name: "AssignAdd"
        input_arg {
          name: "ref"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output_ref"
          type_attr: "T"
          is_ref: true
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: false
          }
        }
      }
      op {
        name: "AssignSub"
        input_arg {
          name: "ref"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output_ref"
          type_attr: "T"
          is_ref: true
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: false
          }
        }
      }
      op {
        name: "BroadcastGradientArgs"
        input_arg {
          name: "s0"
          type_attr: "T"
        }
        input_arg {
          name: "s1"
          type_attr: "T"
        }
        output_arg {
          name: "r0"
          type_attr: "T"
        }
        output_arg {
          name: "r1"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Cast"
        input_arg {
          name: "x"
          type_attr: "SrcT"
        }
        output_arg {
          name: "y"
          type_attr: "DstT"
        }
        attr {
          name: "SrcT"
          type: "type"
        }
        attr {
          name: "DstT"
          type: "type"
        }
      }
      op {
        name: "ConcatV2"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        input_arg {
          name: "axis"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 2
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Const"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "value"
          type: "tensor"
        }
        attr {
          name: "dtype"
          type: "type"
        }
      }
      op {
        name: "Conv2D"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "filter"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
            }
          }
        }
        attr {
          name: "strides"
          type: "list(int)"
        }
        attr {
          name: "use_cudnn_on_gpu"
          type: "bool"
          default_value {
            b: true
          }
        }
        attr {
          name: "padding"
          type: "string"
          allowed_values {
            list {
              s: "SAME"
              s: "VALID"
            }
          }
        }
        attr {
          name: "data_format"
          type: "string"
          default_value {
            s: "NHWC"
          }
          allowed_values {
            list {
              s: "NHWC"
              s: "NCHW"
            }
          }
        }
      }
      op {
        name: "Conv2DBackpropFilter"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "filter_sizes"
          type: DT_INT32
        }
        input_arg {
          name: "out_backprop"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
            }
          }
        }
        attr {
          name: "strides"
          type: "list(int)"
        }
        attr {
          name: "use_cudnn_on_gpu"
          type: "bool"
          default_value {
            b: true
          }
        }
        attr {
          name: "padding"
          type: "string"
          allowed_values {
            list {
              s: "SAME"
              s: "VALID"
            }
          }
        }
        attr {
          name: "data_format"
          type: "string"
          default_value {
            s: "NHWC"
          }
          allowed_values {
            list {
              s: "NHWC"
              s: "NCHW"
            }
          }
        }
      }
      op {
        name: "Conv2DBackpropInput"
        input_arg {
          name: "input_sizes"
          type: DT_INT32
        }
        input_arg {
          name: "filter"
          type_attr: "T"
        }
        input_arg {
          name: "out_backprop"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
            }
          }
        }
        attr {
          name: "strides"
          type: "list(int)"
        }
        attr {
          name: "use_cudnn_on_gpu"
          type: "bool"
          default_value {
            b: true
          }
        }
        attr {
          name: "padding"
          type: "string"
          allowed_values {
            list {
              s: "SAME"
              s: "VALID"
            }
          }
        }
        attr {
          name: "data_format"
          type: "string"
          default_value {
            s: "NHWC"
          }
          allowed_values {
            list {
              s: "NHWC"
              s: "NCHW"
            }
          }
        }
      }
      op {
        name: "ExpandDims"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "dim"
          type_attr: "Tdim"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tdim"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Fill"
        input_arg {
          name: "dims"
          type: DT_INT32
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "FloorDiv"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "FusedBatchNorm"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "scale"
          type_attr: "T"
        }
        input_arg {
          name: "offset"
          type_attr: "T"
        }
        input_arg {
          name: "mean"
          type_attr: "T"
        }
        input_arg {
          name: "variance"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "batch_mean"
          type_attr: "T"
        }
        output_arg {
          name: "batch_variance"
          type_attr: "T"
        }
        output_arg {
          name: "reserve_space_1"
          type_attr: "T"
        }
        output_arg {
          name: "reserve_space_2"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
            }
          }
        }
        attr {
          name: "epsilon"
          type: "float"
          default_value {
            f: 9.999999747378752e-05
          }
        }
        attr {
          name: "data_format"
          type: "string"
          default_value {
            s: "NHWC"
          }
        }
        attr {
          name: "is_training"
          type: "bool"
          default_value {
            b: true
          }
        }
      }
      op {
        name: "FusedBatchNormGrad"
        input_arg {
          name: "y_backprop"
          type_attr: "T"
        }
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "scale"
          type_attr: "T"
        }
        input_arg {
          name: "reserve_space_1"
          type_attr: "T"
        }
        input_arg {
          name: "reserve_space_2"
          type_attr: "T"
        }
        output_arg {
          name: "x_backprop"
          type_attr: "T"
        }
        output_arg {
          name: "scale_backprop"
          type_attr: "T"
        }
        output_arg {
          name: "offset_backprop"
          type_attr: "T"
        }
        output_arg {
          name: "reserve_space_3"
          type_attr: "T"
        }
        output_arg {
          name: "reserve_space_4"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
            }
          }
        }
        attr {
          name: "epsilon"
          type: "float"
          default_value {
            f: 9.999999747378752e-05
          }
        }
        attr {
          name: "data_format"
          type: "string"
          default_value {
            s: "NHWC"
          }
        }
        attr {
          name: "is_training"
          type: "bool"
          default_value {
            b: true
          }
        }
      }
      op {
        name: "Identity"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "MatMul"
        input_arg {
          name: "a"
          type_attr: "T"
        }
        input_arg {
          name: "b"
          type_attr: "T"
        }
        output_arg {
          name: "product"
          type_attr: "T"
        }
        attr {
          name: "transpose_a"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "transpose_b"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Maximum"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Mean"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Merge"
        input_arg {
          name: "inputs"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        output_arg {
          name: "value_index"
          type: DT_INT32
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
      }
      op {
        name: "MergeV2Checkpoints"
        input_arg {
          name: "checkpoint_prefixes"
          type: DT_STRING
        }
        input_arg {
          name: "destination_prefix"
          type: DT_STRING
        }
        attr {
          name: "delete_old_dirs"
          type: "bool"
          default_value {
            b: true
          }
        }
      }
      op {
        name: "Mul"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Neg"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "NoOp"
      }
      op {
        name: "Pack"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "axis"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "Placeholder"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
          default_value {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      op {
        name: "PlaceholderWithDefault"
        input_arg {
          name: "input"
          type_attr: "dtype"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
        }
      }
      op {
        name: "Prod"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "RandomUniform"
        input_arg {
          name: "shape"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "seed"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "seed2"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "dtype"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_stateful: true
      }
      op {
        name: "RealDiv"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "RefSwitch"
        input_arg {
          name: "data"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "pred"
          type: DT_BOOL
        }
        output_arg {
          name: "output_false"
          type_attr: "T"
          is_ref: true
        }
        output_arg {
          name: "output_true"
          type_attr: "T"
          is_ref: true
        }
        attr {
          name: "T"
          type: "type"
        }
        allows_uninitialized_input: true
      }
      op {
        name: "Relu"
        input_arg {
          name: "features"
          type_attr: "T"
        }
        output_arg {
          name: "activations"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
            }
          }
        }
      }
      op {
        name: "ReluGrad"
        input_arg {
          name: "gradients"
          type_attr: "T"
        }
        input_arg {
          name: "features"
          type_attr: "T"
        }
        output_arg {
          name: "backprops"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
            }
          }
        }
      }
      op {
        name: "Reshape"
        input_arg {
          name: "tensor"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tshape"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tshape"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "RestoreV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        output_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
      }
      op {
        name: "SaveV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        input_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
      }
      op {
        name: "Shape"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "out_type"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "out_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ShardedFilename"
        input_arg {
          name: "basename"
          type: DT_STRING
        }
        input_arg {
          name: "shard"
          type: DT_INT32
        }
        input_arg {
          name: "num_shards"
          type: DT_INT32
        }
        output_arg {
          name: "filename"
          type: DT_STRING
        }
      }
      op {
        name: "Slice"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "begin"
          type_attr: "Index"
        }
        input_arg {
          name: "size"
          type_attr: "Index"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Index"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "SquaredDifference"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "StridedSlice"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "begin"
          type_attr: "Index"
        }
        input_arg {
          name: "end"
          type_attr: "Index"
        }
        input_arg {
          name: "strides"
          type_attr: "Index"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Index"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        attr {
          name: "begin_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "end_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "ellipsis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "new_axis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "shrink_axis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "StringJoin"
        input_arg {
          name: "inputs"
          type: DT_STRING
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type: DT_STRING
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "separator"
          type: "string"
          default_value {
            s: ""
          }
        }
      }
      op {
        name: "Sub"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Sum"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Switch"
        input_arg {
          name: "data"
          type_attr: "T"
        }
        input_arg {
          name: "pred"
          type: DT_BOOL
        }
        output_arg {
          name: "output_false"
          type_attr: "T"
        }
        output_arg {
          name: "output_true"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Tile"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "multiples"
          type_attr: "Tmultiples"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tmultiples"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "VariableV2"
        output_arg {
          name: "ref"
          type_attr: "dtype"
          is_ref: true
        }
        attr {
          name: "shape"
          type: "shape"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "container"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "shared_name"
          type: "string"
          default_value {
            s: ""
          }
        }
        is_stateful: true
      }
    }
    tags: "small_trainable_model"
    tensorflow_version: "1.2.1"
    tensorflow_git_version: "b\'unknown\'"
  }
  graph_def {
    node {
      name: "placeholder/images"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
              dim {
                size: 64
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 64
            }
            dim {
              size: 64
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    node {
      name: "placeholder/is_training/input"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
    }
    node {
      name: "placeholder/is_training"
      op: "PlaceholderWithDefault"
      input: "placeholder/is_training/input"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
    }
    node {
      name: "identity/is_training"
      op: "Identity"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv32/weights/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\003\000\000\000\003\000\000\000\001\000\000\000\004\000\000\000"
          }
        }
      }
    }
    node {
      name: "conv32/weights/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.3651483654975891
          }
        }
      }
    }
    node {
      name: "conv32/weights/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.3651483654975891
          }
        }
      }
    }
    node {
      name: "conv32/weights/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "conv32/weights/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 7
        }
      }
    }
    node {
      name: "conv32/weights/Initializer/random_uniform/sub"
      op: "Sub"
      input: "conv32/weights/Initializer/random_uniform/max"
      input: "conv32/weights/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv32/weights/Initializer/random_uniform/mul"
      op: "Mul"
      input: "conv32/weights/Initializer/random_uniform/RandomUniform"
      input: "conv32/weights/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/weights/Initializer/random_uniform"
      op: "Add"
      input: "conv32/weights/Initializer/random_uniform/mul"
      input: "conv32/weights/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/weights"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 1
            }
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv32/weights/Assign"
      op: "Assign"
      input: "conv32/weights"
      input: "conv32/weights/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv32/weights/read"
      op: "Identity"
      input: "conv32/weights"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/convolution/Shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\003\000\000\000\003\000\000\000\001\000\000\000\004\000\000\000"
          }
        }
      }
    }
    node {
      name: "conv32/convolution/dilation_rate"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "conv32/convolution"
      op: "Conv2D"
      input: "placeholder/images"
      input: "conv32/weights/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv32/BatchNorm/beta/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/beta"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv32/BatchNorm/beta/Assign"
      op: "Assign"
      input: "conv32/BatchNorm/beta"
      input: "conv32/BatchNorm/beta/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv32/BatchNorm/beta/read"
      op: "Identity"
      input: "conv32/BatchNorm/beta"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/gamma/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/gamma"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv32/BatchNorm/gamma/Assign"
      op: "Assign"
      input: "conv32/BatchNorm/gamma"
      input: "conv32/BatchNorm/gamma/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv32/BatchNorm/gamma/read"
      op: "Identity"
      input: "conv32/BatchNorm/gamma"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/moving_mean/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/moving_mean"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv32/BatchNorm/moving_mean/Assign"
      op: "Assign"
      input: "conv32/BatchNorm/moving_mean"
      input: "conv32/BatchNorm/moving_mean/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv32/BatchNorm/moving_mean/read"
      op: "Identity"
      input: "conv32/BatchNorm/moving_mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/moving_variance/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/moving_variance"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv32/BatchNorm/moving_variance/Assign"
      op: "Assign"
      input: "conv32/BatchNorm/moving_variance"
      input: "conv32/BatchNorm/moving_variance/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv32/BatchNorm/moving_variance/read"
      op: "Identity"
      input: "conv32/BatchNorm/moving_variance"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond/Switch"
      op: "Switch"
      input: "placeholder/is_training"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond/switch_t"
      op: "Identity"
      input: "conv32/BatchNorm/cond/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond/switch_f"
      op: "Identity"
      input: "conv32/BatchNorm/cond/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond/pred_id"
      op: "Identity"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond/Const_1"
      op: "Const"
      input: "^conv32/BatchNorm/cond/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond/FusedBatchNorm/Switch"
      op: "Switch"
      input: "conv32/convolution"
      input: "conv32/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/convolution"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond/FusedBatchNorm/Switch_1"
      op: "Switch"
      input: "conv32/BatchNorm/gamma/read"
      input: "conv32/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond/FusedBatchNorm/Switch_2"
      op: "Switch"
      input: "conv32/BatchNorm/beta/read"
      input: "conv32/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond/FusedBatchNorm"
      op: "FusedBatchNorm"
      input: "conv32/BatchNorm/cond/FusedBatchNorm/Switch:1"
      input: "conv32/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
      input: "conv32/BatchNorm/cond/FusedBatchNorm/Switch_2:1"
      input: "conv32/BatchNorm/cond/Const"
      input: "conv32/BatchNorm/cond/Const_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond/FusedBatchNorm_1/Switch"
      op: "Switch"
      input: "conv32/convolution"
      input: "conv32/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/convolution"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      op: "Switch"
      input: "conv32/BatchNorm/gamma/read"
      input: "conv32/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
      op: "Switch"
      input: "conv32/BatchNorm/beta/read"
      input: "conv32/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
      op: "Switch"
      input: "conv32/BatchNorm/moving_mean/read"
      input: "conv32/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
      op: "Switch"
      input: "conv32/BatchNorm/moving_variance/read"
      input: "conv32/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond/FusedBatchNorm_1"
      op: "FusedBatchNorm"
      input: "conv32/BatchNorm/cond/FusedBatchNorm_1/Switch"
      input: "conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      input: "conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
      input: "conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
      input: "conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond/Merge"
      op: "Merge"
      input: "conv32/BatchNorm/cond/FusedBatchNorm_1"
      input: "conv32/BatchNorm/cond/FusedBatchNorm"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond/Merge_1"
      op: "Merge"
      input: "conv32/BatchNorm/cond/FusedBatchNorm_1:1"
      input: "conv32/BatchNorm/cond/FusedBatchNorm:1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond/Merge_2"
      op: "Merge"
      input: "conv32/BatchNorm/cond/FusedBatchNorm_1:2"
      input: "conv32/BatchNorm/cond/FusedBatchNorm:2"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/Switch"
      op: "Switch"
      input: "placeholder/is_training"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/switch_t"
      op: "Identity"
      input: "conv32/BatchNorm/cond_1/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/switch_f"
      op: "Identity"
      input: "conv32/BatchNorm/cond_1/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/pred_id"
      op: "Identity"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/AssignMovingAvg/decay"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/AssignMovingAvg/sub/Switch"
      op: "Switch"
      input: "conv32/BatchNorm/moving_mean/read"
      input: "conv32/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1"
      op: "Switch"
      input: "conv32/BatchNorm/cond/Merge_1"
      input: "conv32/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/cond/Merge_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/AssignMovingAvg/sub"
      op: "Sub"
      input: "conv32/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
      input: "conv32/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/AssignMovingAvg/mul"
      op: "Mul"
      input: "conv32/BatchNorm/cond_1/AssignMovingAvg/sub"
      input: "conv32/BatchNorm/cond_1/AssignMovingAvg/decay"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/AssignMovingAvg/Switch"
      op: "RefSwitch"
      input: "conv32/BatchNorm/moving_mean"
      input: "conv32/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/AssignMovingAvg"
      op: "AssignSub"
      input: "conv32/BatchNorm/cond_1/AssignMovingAvg/Switch:1"
      input: "conv32/BatchNorm/cond_1/AssignMovingAvg/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/AssignMovingAvg_1/decay"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch"
      op: "Switch"
      input: "conv32/BatchNorm/moving_variance/read"
      input: "conv32/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1"
      op: "Switch"
      input: "conv32/BatchNorm/cond/Merge_2"
      input: "conv32/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/cond/Merge_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/AssignMovingAvg_1/sub"
      op: "Sub"
      input: "conv32/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
      input: "conv32/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/AssignMovingAvg_1/mul"
      op: "Mul"
      input: "conv32/BatchNorm/cond_1/AssignMovingAvg_1/sub"
      input: "conv32/BatchNorm/cond_1/AssignMovingAvg_1/decay"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/AssignMovingAvg_1/Switch"
      op: "RefSwitch"
      input: "conv32/BatchNorm/moving_variance"
      input: "conv32/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/AssignMovingAvg_1"
      op: "AssignSub"
      input: "conv32/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
      input: "conv32/BatchNorm/cond_1/AssignMovingAvg_1/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/Switch_1"
      op: "Switch"
      input: "conv32/BatchNorm/moving_mean/read"
      input: "conv32/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/Switch_2"
      op: "Switch"
      input: "conv32/BatchNorm/moving_variance/read"
      input: "conv32/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/Merge"
      op: "Merge"
      input: "conv32/BatchNorm/cond_1/Switch_1"
      input: "conv32/BatchNorm/cond_1/AssignMovingAvg"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/cond_1/Merge_1"
      op: "Merge"
      input: "conv32/BatchNorm/cond_1/Switch_2"
      input: "conv32/BatchNorm/cond_1/AssignMovingAvg_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv32/Relu"
      op: "Relu"
      input: "conv32/BatchNorm/cond/Merge"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/weights/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\003\000\000\000\003\000\000\000\004\000\000\000\010\000\000\000"
          }
        }
      }
    }
    node {
      name: "conv16/weights/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.2357022613286972
          }
        }
      }
    }
    node {
      name: "conv16/weights/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.2357022613286972
          }
        }
      }
    }
    node {
      name: "conv16/weights/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "conv16/weights/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 78
        }
      }
    }
    node {
      name: "conv16/weights/Initializer/random_uniform/sub"
      op: "Sub"
      input: "conv16/weights/Initializer/random_uniform/max"
      input: "conv16/weights/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv16/weights/Initializer/random_uniform/mul"
      op: "Mul"
      input: "conv16/weights/Initializer/random_uniform/RandomUniform"
      input: "conv16/weights/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/weights/Initializer/random_uniform"
      op: "Add"
      input: "conv16/weights/Initializer/random_uniform/mul"
      input: "conv16/weights/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/weights"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 4
            }
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv16/weights/Assign"
      op: "Assign"
      input: "conv16/weights"
      input: "conv16/weights/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv16/weights/read"
      op: "Identity"
      input: "conv16/weights"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/convolution/Shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\003\000\000\000\003\000\000\000\004\000\000\000\010\000\000\000"
          }
        }
      }
    }
    node {
      name: "conv16/convolution/dilation_rate"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "conv16/convolution"
      op: "Conv2D"
      input: "conv32/Relu"
      input: "conv16/weights/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv16/BatchNorm/beta/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/beta"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv16/BatchNorm/beta/Assign"
      op: "Assign"
      input: "conv16/BatchNorm/beta"
      input: "conv16/BatchNorm/beta/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv16/BatchNorm/beta/read"
      op: "Identity"
      input: "conv16/BatchNorm/beta"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/gamma/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/gamma"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv16/BatchNorm/gamma/Assign"
      op: "Assign"
      input: "conv16/BatchNorm/gamma"
      input: "conv16/BatchNorm/gamma/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv16/BatchNorm/gamma/read"
      op: "Identity"
      input: "conv16/BatchNorm/gamma"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/moving_mean/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/moving_mean"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv16/BatchNorm/moving_mean/Assign"
      op: "Assign"
      input: "conv16/BatchNorm/moving_mean"
      input: "conv16/BatchNorm/moving_mean/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv16/BatchNorm/moving_mean/read"
      op: "Identity"
      input: "conv16/BatchNorm/moving_mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/moving_variance/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/moving_variance"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv16/BatchNorm/moving_variance/Assign"
      op: "Assign"
      input: "conv16/BatchNorm/moving_variance"
      input: "conv16/BatchNorm/moving_variance/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv16/BatchNorm/moving_variance/read"
      op: "Identity"
      input: "conv16/BatchNorm/moving_variance"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond/Switch"
      op: "Switch"
      input: "placeholder/is_training"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond/switch_t"
      op: "Identity"
      input: "conv16/BatchNorm/cond/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond/switch_f"
      op: "Identity"
      input: "conv16/BatchNorm/cond/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond/pred_id"
      op: "Identity"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond/Const"
      op: "Const"
      input: "^conv16/BatchNorm/cond/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond/Const_1"
      op: "Const"
      input: "^conv16/BatchNorm/cond/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond/FusedBatchNorm/Switch"
      op: "Switch"
      input: "conv16/convolution"
      input: "conv16/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/convolution"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond/FusedBatchNorm/Switch_1"
      op: "Switch"
      input: "conv16/BatchNorm/gamma/read"
      input: "conv16/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond/FusedBatchNorm/Switch_2"
      op: "Switch"
      input: "conv16/BatchNorm/beta/read"
      input: "conv16/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond/FusedBatchNorm"
      op: "FusedBatchNorm"
      input: "conv16/BatchNorm/cond/FusedBatchNorm/Switch:1"
      input: "conv16/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
      input: "conv16/BatchNorm/cond/FusedBatchNorm/Switch_2:1"
      input: "conv16/BatchNorm/cond/Const"
      input: "conv16/BatchNorm/cond/Const_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond/FusedBatchNorm_1/Switch"
      op: "Switch"
      input: "conv16/convolution"
      input: "conv16/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/convolution"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      op: "Switch"
      input: "conv16/BatchNorm/gamma/read"
      input: "conv16/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
      op: "Switch"
      input: "conv16/BatchNorm/beta/read"
      input: "conv16/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
      op: "Switch"
      input: "conv16/BatchNorm/moving_mean/read"
      input: "conv16/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
      op: "Switch"
      input: "conv16/BatchNorm/moving_variance/read"
      input: "conv16/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond/FusedBatchNorm_1"
      op: "FusedBatchNorm"
      input: "conv16/BatchNorm/cond/FusedBatchNorm_1/Switch"
      input: "conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      input: "conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
      input: "conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
      input: "conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond/Merge"
      op: "Merge"
      input: "conv16/BatchNorm/cond/FusedBatchNorm_1"
      input: "conv16/BatchNorm/cond/FusedBatchNorm"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond/Merge_1"
      op: "Merge"
      input: "conv16/BatchNorm/cond/FusedBatchNorm_1:1"
      input: "conv16/BatchNorm/cond/FusedBatchNorm:1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond/Merge_2"
      op: "Merge"
      input: "conv16/BatchNorm/cond/FusedBatchNorm_1:2"
      input: "conv16/BatchNorm/cond/FusedBatchNorm:2"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/Switch"
      op: "Switch"
      input: "placeholder/is_training"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/switch_t"
      op: "Identity"
      input: "conv16/BatchNorm/cond_1/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/switch_f"
      op: "Identity"
      input: "conv16/BatchNorm/cond_1/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/pred_id"
      op: "Identity"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/AssignMovingAvg/decay"
      op: "Const"
      input: "^conv16/BatchNorm/cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/AssignMovingAvg/sub/Switch"
      op: "Switch"
      input: "conv16/BatchNorm/moving_mean/read"
      input: "conv16/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1"
      op: "Switch"
      input: "conv16/BatchNorm/cond/Merge_1"
      input: "conv16/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/cond/Merge_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/AssignMovingAvg/sub"
      op: "Sub"
      input: "conv16/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
      input: "conv16/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/AssignMovingAvg/mul"
      op: "Mul"
      input: "conv16/BatchNorm/cond_1/AssignMovingAvg/sub"
      input: "conv16/BatchNorm/cond_1/AssignMovingAvg/decay"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/AssignMovingAvg/Switch"
      op: "RefSwitch"
      input: "conv16/BatchNorm/moving_mean"
      input: "conv16/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/AssignMovingAvg"
      op: "AssignSub"
      input: "conv16/BatchNorm/cond_1/AssignMovingAvg/Switch:1"
      input: "conv16/BatchNorm/cond_1/AssignMovingAvg/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/AssignMovingAvg_1/decay"
      op: "Const"
      input: "^conv16/BatchNorm/cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch"
      op: "Switch"
      input: "conv16/BatchNorm/moving_variance/read"
      input: "conv16/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1"
      op: "Switch"
      input: "conv16/BatchNorm/cond/Merge_2"
      input: "conv16/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/cond/Merge_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/AssignMovingAvg_1/sub"
      op: "Sub"
      input: "conv16/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
      input: "conv16/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/AssignMovingAvg_1/mul"
      op: "Mul"
      input: "conv16/BatchNorm/cond_1/AssignMovingAvg_1/sub"
      input: "conv16/BatchNorm/cond_1/AssignMovingAvg_1/decay"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/AssignMovingAvg_1/Switch"
      op: "RefSwitch"
      input: "conv16/BatchNorm/moving_variance"
      input: "conv16/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/AssignMovingAvg_1"
      op: "AssignSub"
      input: "conv16/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
      input: "conv16/BatchNorm/cond_1/AssignMovingAvg_1/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/Switch_1"
      op: "Switch"
      input: "conv16/BatchNorm/moving_mean/read"
      input: "conv16/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/Switch_2"
      op: "Switch"
      input: "conv16/BatchNorm/moving_variance/read"
      input: "conv16/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/Merge"
      op: "Merge"
      input: "conv16/BatchNorm/cond_1/Switch_1"
      input: "conv16/BatchNorm/cond_1/AssignMovingAvg"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/cond_1/Merge_1"
      op: "Merge"
      input: "conv16/BatchNorm/cond_1/Switch_2"
      input: "conv16/BatchNorm/cond_1/AssignMovingAvg_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv16/Relu"
      op: "Relu"
      input: "conv16/BatchNorm/cond/Merge"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/weights/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\020\000\000\000"
          }
        }
      }
    }
    node {
      name: "conv8/weights/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.1666666716337204
          }
        }
      }
    }
    node {
      name: "conv8/weights/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.1666666716337204
          }
        }
      }
    }
    node {
      name: "conv8/weights/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "conv8/weights/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 149
        }
      }
    }
    node {
      name: "conv8/weights/Initializer/random_uniform/sub"
      op: "Sub"
      input: "conv8/weights/Initializer/random_uniform/max"
      input: "conv8/weights/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv8/weights/Initializer/random_uniform/mul"
      op: "Mul"
      input: "conv8/weights/Initializer/random_uniform/RandomUniform"
      input: "conv8/weights/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/weights/Initializer/random_uniform"
      op: "Add"
      input: "conv8/weights/Initializer/random_uniform/mul"
      input: "conv8/weights/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/weights"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 8
            }
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv8/weights/Assign"
      op: "Assign"
      input: "conv8/weights"
      input: "conv8/weights/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv8/weights/read"
      op: "Identity"
      input: "conv8/weights"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/convolution/Shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\020\000\000\000"
          }
        }
      }
    }
    node {
      name: "conv8/convolution/dilation_rate"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "conv8/convolution"
      op: "Conv2D"
      input: "conv16/Relu"
      input: "conv8/weights/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv8/BatchNorm/beta/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/beta"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv8/BatchNorm/beta/Assign"
      op: "Assign"
      input: "conv8/BatchNorm/beta"
      input: "conv8/BatchNorm/beta/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv8/BatchNorm/beta/read"
      op: "Identity"
      input: "conv8/BatchNorm/beta"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/gamma/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/gamma"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv8/BatchNorm/gamma/Assign"
      op: "Assign"
      input: "conv8/BatchNorm/gamma"
      input: "conv8/BatchNorm/gamma/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv8/BatchNorm/gamma/read"
      op: "Identity"
      input: "conv8/BatchNorm/gamma"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/moving_mean/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/moving_mean"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv8/BatchNorm/moving_mean/Assign"
      op: "Assign"
      input: "conv8/BatchNorm/moving_mean"
      input: "conv8/BatchNorm/moving_mean/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv8/BatchNorm/moving_mean/read"
      op: "Identity"
      input: "conv8/BatchNorm/moving_mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/moving_variance/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/moving_variance"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv8/BatchNorm/moving_variance/Assign"
      op: "Assign"
      input: "conv8/BatchNorm/moving_variance"
      input: "conv8/BatchNorm/moving_variance/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv8/BatchNorm/moving_variance/read"
      op: "Identity"
      input: "conv8/BatchNorm/moving_variance"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond/Switch"
      op: "Switch"
      input: "placeholder/is_training"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond/switch_t"
      op: "Identity"
      input: "conv8/BatchNorm/cond/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond/switch_f"
      op: "Identity"
      input: "conv8/BatchNorm/cond/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond/pred_id"
      op: "Identity"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond/Const"
      op: "Const"
      input: "^conv8/BatchNorm/cond/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond/Const_1"
      op: "Const"
      input: "^conv8/BatchNorm/cond/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond/FusedBatchNorm/Switch"
      op: "Switch"
      input: "conv8/convolution"
      input: "conv8/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/convolution"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond/FusedBatchNorm/Switch_1"
      op: "Switch"
      input: "conv8/BatchNorm/gamma/read"
      input: "conv8/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond/FusedBatchNorm/Switch_2"
      op: "Switch"
      input: "conv8/BatchNorm/beta/read"
      input: "conv8/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond/FusedBatchNorm"
      op: "FusedBatchNorm"
      input: "conv8/BatchNorm/cond/FusedBatchNorm/Switch:1"
      input: "conv8/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
      input: "conv8/BatchNorm/cond/FusedBatchNorm/Switch_2:1"
      input: "conv8/BatchNorm/cond/Const"
      input: "conv8/BatchNorm/cond/Const_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond/FusedBatchNorm_1/Switch"
      op: "Switch"
      input: "conv8/convolution"
      input: "conv8/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/convolution"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      op: "Switch"
      input: "conv8/BatchNorm/gamma/read"
      input: "conv8/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
      op: "Switch"
      input: "conv8/BatchNorm/beta/read"
      input: "conv8/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
      op: "Switch"
      input: "conv8/BatchNorm/moving_mean/read"
      input: "conv8/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
      op: "Switch"
      input: "conv8/BatchNorm/moving_variance/read"
      input: "conv8/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond/FusedBatchNorm_1"
      op: "FusedBatchNorm"
      input: "conv8/BatchNorm/cond/FusedBatchNorm_1/Switch"
      input: "conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      input: "conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
      input: "conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
      input: "conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond/Merge"
      op: "Merge"
      input: "conv8/BatchNorm/cond/FusedBatchNorm_1"
      input: "conv8/BatchNorm/cond/FusedBatchNorm"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond/Merge_1"
      op: "Merge"
      input: "conv8/BatchNorm/cond/FusedBatchNorm_1:1"
      input: "conv8/BatchNorm/cond/FusedBatchNorm:1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond/Merge_2"
      op: "Merge"
      input: "conv8/BatchNorm/cond/FusedBatchNorm_1:2"
      input: "conv8/BatchNorm/cond/FusedBatchNorm:2"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/Switch"
      op: "Switch"
      input: "placeholder/is_training"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/switch_t"
      op: "Identity"
      input: "conv8/BatchNorm/cond_1/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/switch_f"
      op: "Identity"
      input: "conv8/BatchNorm/cond_1/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/pred_id"
      op: "Identity"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/AssignMovingAvg/decay"
      op: "Const"
      input: "^conv8/BatchNorm/cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/AssignMovingAvg/sub/Switch"
      op: "Switch"
      input: "conv8/BatchNorm/moving_mean/read"
      input: "conv8/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1"
      op: "Switch"
      input: "conv8/BatchNorm/cond/Merge_1"
      input: "conv8/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/cond/Merge_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/AssignMovingAvg/sub"
      op: "Sub"
      input: "conv8/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
      input: "conv8/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/AssignMovingAvg/mul"
      op: "Mul"
      input: "conv8/BatchNorm/cond_1/AssignMovingAvg/sub"
      input: "conv8/BatchNorm/cond_1/AssignMovingAvg/decay"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/AssignMovingAvg/Switch"
      op: "RefSwitch"
      input: "conv8/BatchNorm/moving_mean"
      input: "conv8/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/AssignMovingAvg"
      op: "AssignSub"
      input: "conv8/BatchNorm/cond_1/AssignMovingAvg/Switch:1"
      input: "conv8/BatchNorm/cond_1/AssignMovingAvg/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/AssignMovingAvg_1/decay"
      op: "Const"
      input: "^conv8/BatchNorm/cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch"
      op: "Switch"
      input: "conv8/BatchNorm/moving_variance/read"
      input: "conv8/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1"
      op: "Switch"
      input: "conv8/BatchNorm/cond/Merge_2"
      input: "conv8/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/cond/Merge_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/AssignMovingAvg_1/sub"
      op: "Sub"
      input: "conv8/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
      input: "conv8/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/AssignMovingAvg_1/mul"
      op: "Mul"
      input: "conv8/BatchNorm/cond_1/AssignMovingAvg_1/sub"
      input: "conv8/BatchNorm/cond_1/AssignMovingAvg_1/decay"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/AssignMovingAvg_1/Switch"
      op: "RefSwitch"
      input: "conv8/BatchNorm/moving_variance"
      input: "conv8/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/AssignMovingAvg_1"
      op: "AssignSub"
      input: "conv8/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
      input: "conv8/BatchNorm/cond_1/AssignMovingAvg_1/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/Switch_1"
      op: "Switch"
      input: "conv8/BatchNorm/moving_mean/read"
      input: "conv8/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/Switch_2"
      op: "Switch"
      input: "conv8/BatchNorm/moving_variance/read"
      input: "conv8/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/Merge"
      op: "Merge"
      input: "conv8/BatchNorm/cond_1/Switch_1"
      input: "conv8/BatchNorm/cond_1/AssignMovingAvg"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/cond_1/Merge_1"
      op: "Merge"
      input: "conv8/BatchNorm/cond_1/Switch_2"
      input: "conv8/BatchNorm/cond_1/AssignMovingAvg_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv8/Relu"
      op: "Relu"
      input: "conv8/BatchNorm/cond/Merge"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/weights/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\003\000\000\000\003\000\000\000\020\000\000\000 \000\000\000"
          }
        }
      }
    }
    node {
      name: "conv4/weights/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.1178511306643486
          }
        }
      }
    }
    node {
      name: "conv4/weights/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.1178511306643486
          }
        }
      }
    }
    node {
      name: "conv4/weights/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "conv4/weights/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 220
        }
      }
    }
    node {
      name: "conv4/weights/Initializer/random_uniform/sub"
      op: "Sub"
      input: "conv4/weights/Initializer/random_uniform/max"
      input: "conv4/weights/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv4/weights/Initializer/random_uniform/mul"
      op: "Mul"
      input: "conv4/weights/Initializer/random_uniform/RandomUniform"
      input: "conv4/weights/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/weights/Initializer/random_uniform"
      op: "Add"
      input: "conv4/weights/Initializer/random_uniform/mul"
      input: "conv4/weights/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/weights"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 16
            }
            dim {
              size: 32
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv4/weights/Assign"
      op: "Assign"
      input: "conv4/weights"
      input: "conv4/weights/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv4/weights/read"
      op: "Identity"
      input: "conv4/weights"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/convolution/Shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\003\000\000\000\003\000\000\000\020\000\000\000 \000\000\000"
          }
        }
      }
    }
    node {
      name: "conv4/convolution/dilation_rate"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "conv4/convolution"
      op: "Conv2D"
      input: "conv8/Relu"
      input: "conv4/weights/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv4/BatchNorm/beta/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 32
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/beta"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 32
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv4/BatchNorm/beta/Assign"
      op: "Assign"
      input: "conv4/BatchNorm/beta"
      input: "conv4/BatchNorm/beta/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv4/BatchNorm/beta/read"
      op: "Identity"
      input: "conv4/BatchNorm/beta"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/gamma/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 32
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/gamma"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 32
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv4/BatchNorm/gamma/Assign"
      op: "Assign"
      input: "conv4/BatchNorm/gamma"
      input: "conv4/BatchNorm/gamma/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv4/BatchNorm/gamma/read"
      op: "Identity"
      input: "conv4/BatchNorm/gamma"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/moving_mean/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 32
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/moving_mean"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 32
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv4/BatchNorm/moving_mean/Assign"
      op: "Assign"
      input: "conv4/BatchNorm/moving_mean"
      input: "conv4/BatchNorm/moving_mean/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv4/BatchNorm/moving_mean/read"
      op: "Identity"
      input: "conv4/BatchNorm/moving_mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/moving_variance/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 32
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/moving_variance"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 32
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv4/BatchNorm/moving_variance/Assign"
      op: "Assign"
      input: "conv4/BatchNorm/moving_variance"
      input: "conv4/BatchNorm/moving_variance/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv4/BatchNorm/moving_variance/read"
      op: "Identity"
      input: "conv4/BatchNorm/moving_variance"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond/Switch"
      op: "Switch"
      input: "placeholder/is_training"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond/switch_t"
      op: "Identity"
      input: "conv4/BatchNorm/cond/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond/switch_f"
      op: "Identity"
      input: "conv4/BatchNorm/cond/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond/pred_id"
      op: "Identity"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond/Const"
      op: "Const"
      input: "^conv4/BatchNorm/cond/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond/Const_1"
      op: "Const"
      input: "^conv4/BatchNorm/cond/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond/FusedBatchNorm/Switch"
      op: "Switch"
      input: "conv4/convolution"
      input: "conv4/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/convolution"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond/FusedBatchNorm/Switch_1"
      op: "Switch"
      input: "conv4/BatchNorm/gamma/read"
      input: "conv4/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond/FusedBatchNorm/Switch_2"
      op: "Switch"
      input: "conv4/BatchNorm/beta/read"
      input: "conv4/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond/FusedBatchNorm"
      op: "FusedBatchNorm"
      input: "conv4/BatchNorm/cond/FusedBatchNorm/Switch:1"
      input: "conv4/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
      input: "conv4/BatchNorm/cond/FusedBatchNorm/Switch_2:1"
      input: "conv4/BatchNorm/cond/Const"
      input: "conv4/BatchNorm/cond/Const_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond/FusedBatchNorm_1/Switch"
      op: "Switch"
      input: "conv4/convolution"
      input: "conv4/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/convolution"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      op: "Switch"
      input: "conv4/BatchNorm/gamma/read"
      input: "conv4/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
      op: "Switch"
      input: "conv4/BatchNorm/beta/read"
      input: "conv4/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
      op: "Switch"
      input: "conv4/BatchNorm/moving_mean/read"
      input: "conv4/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
      op: "Switch"
      input: "conv4/BatchNorm/moving_variance/read"
      input: "conv4/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond/FusedBatchNorm_1"
      op: "FusedBatchNorm"
      input: "conv4/BatchNorm/cond/FusedBatchNorm_1/Switch"
      input: "conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      input: "conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
      input: "conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
      input: "conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond/Merge"
      op: "Merge"
      input: "conv4/BatchNorm/cond/FusedBatchNorm_1"
      input: "conv4/BatchNorm/cond/FusedBatchNorm"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond/Merge_1"
      op: "Merge"
      input: "conv4/BatchNorm/cond/FusedBatchNorm_1:1"
      input: "conv4/BatchNorm/cond/FusedBatchNorm:1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond/Merge_2"
      op: "Merge"
      input: "conv4/BatchNorm/cond/FusedBatchNorm_1:2"
      input: "conv4/BatchNorm/cond/FusedBatchNorm:2"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/Switch"
      op: "Switch"
      input: "placeholder/is_training"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/switch_t"
      op: "Identity"
      input: "conv4/BatchNorm/cond_1/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/switch_f"
      op: "Identity"
      input: "conv4/BatchNorm/cond_1/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/pred_id"
      op: "Identity"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/AssignMovingAvg/decay"
      op: "Const"
      input: "^conv4/BatchNorm/cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/AssignMovingAvg/sub/Switch"
      op: "Switch"
      input: "conv4/BatchNorm/moving_mean/read"
      input: "conv4/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1"
      op: "Switch"
      input: "conv4/BatchNorm/cond/Merge_1"
      input: "conv4/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/cond/Merge_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/AssignMovingAvg/sub"
      op: "Sub"
      input: "conv4/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
      input: "conv4/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/AssignMovingAvg/mul"
      op: "Mul"
      input: "conv4/BatchNorm/cond_1/AssignMovingAvg/sub"
      input: "conv4/BatchNorm/cond_1/AssignMovingAvg/decay"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/AssignMovingAvg/Switch"
      op: "RefSwitch"
      input: "conv4/BatchNorm/moving_mean"
      input: "conv4/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/AssignMovingAvg"
      op: "AssignSub"
      input: "conv4/BatchNorm/cond_1/AssignMovingAvg/Switch:1"
      input: "conv4/BatchNorm/cond_1/AssignMovingAvg/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/AssignMovingAvg_1/decay"
      op: "Const"
      input: "^conv4/BatchNorm/cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch"
      op: "Switch"
      input: "conv4/BatchNorm/moving_variance/read"
      input: "conv4/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1"
      op: "Switch"
      input: "conv4/BatchNorm/cond/Merge_2"
      input: "conv4/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/cond/Merge_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/AssignMovingAvg_1/sub"
      op: "Sub"
      input: "conv4/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
      input: "conv4/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/AssignMovingAvg_1/mul"
      op: "Mul"
      input: "conv4/BatchNorm/cond_1/AssignMovingAvg_1/sub"
      input: "conv4/BatchNorm/cond_1/AssignMovingAvg_1/decay"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/AssignMovingAvg_1/Switch"
      op: "RefSwitch"
      input: "conv4/BatchNorm/moving_variance"
      input: "conv4/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/AssignMovingAvg_1"
      op: "AssignSub"
      input: "conv4/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
      input: "conv4/BatchNorm/cond_1/AssignMovingAvg_1/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/Switch_1"
      op: "Switch"
      input: "conv4/BatchNorm/moving_mean/read"
      input: "conv4/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/Switch_2"
      op: "Switch"
      input: "conv4/BatchNorm/moving_variance/read"
      input: "conv4/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/Merge"
      op: "Merge"
      input: "conv4/BatchNorm/cond_1/Switch_1"
      input: "conv4/BatchNorm/cond_1/AssignMovingAvg"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/cond_1/Merge_1"
      op: "Merge"
      input: "conv4/BatchNorm/cond_1/Switch_2"
      input: "conv4/BatchNorm/cond_1/AssignMovingAvg_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv4/Relu"
      op: "Relu"
      input: "conv4/BatchNorm/cond/Merge"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "flatten512/Shape"
      op: "Shape"
      input: "conv4/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "flatten512/Slice/begin"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "flatten512/Slice/size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "flatten512/Slice"
      op: "Slice"
      input: "flatten512/Shape"
      input: "flatten512/Slice/begin"
      input: "flatten512/Slice/size"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "flatten512/Slice_1/begin"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "flatten512/Slice_1/size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "flatten512/Slice_1"
      op: "Slice"
      input: "flatten512/Shape"
      input: "flatten512/Slice_1/begin"
      input: "flatten512/Slice_1/size"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "flatten512/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "flatten512/Prod"
      op: "Prod"
      input: "flatten512/Slice_1"
      input: "flatten512/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "flatten512/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "flatten512/ExpandDims"
      op: "ExpandDims"
      input: "flatten512/Prod"
      input: "flatten512/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "flatten512/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "flatten512/concat"
      op: "ConcatV2"
      input: "flatten512/Slice"
      input: "flatten512/ExpandDims"
      input: "flatten512/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "flatten512/Reshape"
      op: "Reshape"
      input: "conv4/Relu"
      input: "flatten512/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/weights/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "fc256/weights/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.0883883461356163
          }
        }
      }
    }
    node {
      name: "fc256/weights/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0883883461356163
          }
        }
      }
    }
    node {
      name: "fc256/weights/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "fc256/weights/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 305
        }
      }
    }
    node {
      name: "fc256/weights/Initializer/random_uniform/sub"
      op: "Sub"
      input: "fc256/weights/Initializer/random_uniform/max"
      input: "fc256/weights/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "fc256/weights/Initializer/random_uniform/mul"
      op: "Mul"
      input: "fc256/weights/Initializer/random_uniform/RandomUniform"
      input: "fc256/weights/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/weights/Initializer/random_uniform"
      op: "Add"
      input: "fc256/weights/Initializer/random_uniform/mul"
      input: "fc256/weights/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/weights"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 512
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fc256/weights/Assign"
      op: "Assign"
      input: "fc256/weights"
      input: "fc256/weights/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fc256/weights/read"
      op: "Identity"
      input: "fc256/weights"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/MatMul"
      op: "MatMul"
      input: "flatten512/Reshape"
      input: "fc256/weights/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "fc256/BatchNorm/Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000\001\000\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/Reshape"
      op: "Reshape"
      input: "fc256/MatMul"
      input: "fc256/BatchNorm/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/beta/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/beta"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fc256/BatchNorm/beta/Assign"
      op: "Assign"
      input: "fc256/BatchNorm/beta"
      input: "fc256/BatchNorm/beta/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fc256/BatchNorm/beta/read"
      op: "Identity"
      input: "fc256/BatchNorm/beta"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/gamma/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/gamma"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fc256/BatchNorm/gamma/Assign"
      op: "Assign"
      input: "fc256/BatchNorm/gamma"
      input: "fc256/BatchNorm/gamma/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fc256/BatchNorm/gamma/read"
      op: "Identity"
      input: "fc256/BatchNorm/gamma"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/moving_mean/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/moving_mean"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fc256/BatchNorm/moving_mean/Assign"
      op: "Assign"
      input: "fc256/BatchNorm/moving_mean"
      input: "fc256/BatchNorm/moving_mean/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fc256/BatchNorm/moving_mean/read"
      op: "Identity"
      input: "fc256/BatchNorm/moving_mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/moving_variance/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/moving_variance"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fc256/BatchNorm/moving_variance/Assign"
      op: "Assign"
      input: "fc256/BatchNorm/moving_variance"
      input: "fc256/BatchNorm/moving_variance/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fc256/BatchNorm/moving_variance/read"
      op: "Identity"
      input: "fc256/BatchNorm/moving_variance"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond/Switch"
      op: "Switch"
      input: "placeholder/is_training"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond/switch_t"
      op: "Identity"
      input: "fc256/BatchNorm/cond/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond/switch_f"
      op: "Identity"
      input: "fc256/BatchNorm/cond/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond/pred_id"
      op: "Identity"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond/Const"
      op: "Const"
      input: "^fc256/BatchNorm/cond/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond/Const_1"
      op: "Const"
      input: "^fc256/BatchNorm/cond/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond/FusedBatchNorm/Switch"
      op: "Switch"
      input: "fc256/BatchNorm/Reshape"
      input: "fc256/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond/FusedBatchNorm/Switch_1"
      op: "Switch"
      input: "fc256/BatchNorm/gamma/read"
      input: "fc256/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond/FusedBatchNorm/Switch_2"
      op: "Switch"
      input: "fc256/BatchNorm/beta/read"
      input: "fc256/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond/FusedBatchNorm"
      op: "FusedBatchNorm"
      input: "fc256/BatchNorm/cond/FusedBatchNorm/Switch:1"
      input: "fc256/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
      input: "fc256/BatchNorm/cond/FusedBatchNorm/Switch_2:1"
      input: "fc256/BatchNorm/cond/Const"
      input: "fc256/BatchNorm/cond/Const_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond/FusedBatchNorm_1/Switch"
      op: "Switch"
      input: "fc256/BatchNorm/Reshape"
      input: "fc256/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      op: "Switch"
      input: "fc256/BatchNorm/gamma/read"
      input: "fc256/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
      op: "Switch"
      input: "fc256/BatchNorm/beta/read"
      input: "fc256/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
      op: "Switch"
      input: "fc256/BatchNorm/moving_mean/read"
      input: "fc256/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
      op: "Switch"
      input: "fc256/BatchNorm/moving_variance/read"
      input: "fc256/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond/FusedBatchNorm_1"
      op: "FusedBatchNorm"
      input: "fc256/BatchNorm/cond/FusedBatchNorm_1/Switch"
      input: "fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      input: "fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
      input: "fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
      input: "fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond/Merge"
      op: "Merge"
      input: "fc256/BatchNorm/cond/FusedBatchNorm_1"
      input: "fc256/BatchNorm/cond/FusedBatchNorm"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond/Merge_1"
      op: "Merge"
      input: "fc256/BatchNorm/cond/FusedBatchNorm_1:1"
      input: "fc256/BatchNorm/cond/FusedBatchNorm:1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond/Merge_2"
      op: "Merge"
      input: "fc256/BatchNorm/cond/FusedBatchNorm_1:2"
      input: "fc256/BatchNorm/cond/FusedBatchNorm:2"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/Switch"
      op: "Switch"
      input: "placeholder/is_training"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/switch_t"
      op: "Identity"
      input: "fc256/BatchNorm/cond_1/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/switch_f"
      op: "Identity"
      input: "fc256/BatchNorm/cond_1/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/pred_id"
      op: "Identity"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/AssignMovingAvg/decay"
      op: "Const"
      input: "^fc256/BatchNorm/cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/AssignMovingAvg/sub/Switch"
      op: "Switch"
      input: "fc256/BatchNorm/moving_mean/read"
      input: "fc256/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1"
      op: "Switch"
      input: "fc256/BatchNorm/cond/Merge_1"
      input: "fc256/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/cond/Merge_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/AssignMovingAvg/sub"
      op: "Sub"
      input: "fc256/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
      input: "fc256/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/AssignMovingAvg/mul"
      op: "Mul"
      input: "fc256/BatchNorm/cond_1/AssignMovingAvg/sub"
      input: "fc256/BatchNorm/cond_1/AssignMovingAvg/decay"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/AssignMovingAvg/Switch"
      op: "RefSwitch"
      input: "fc256/BatchNorm/moving_mean"
      input: "fc256/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/AssignMovingAvg"
      op: "AssignSub"
      input: "fc256/BatchNorm/cond_1/AssignMovingAvg/Switch:1"
      input: "fc256/BatchNorm/cond_1/AssignMovingAvg/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/AssignMovingAvg_1/decay"
      op: "Const"
      input: "^fc256/BatchNorm/cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch"
      op: "Switch"
      input: "fc256/BatchNorm/moving_variance/read"
      input: "fc256/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1"
      op: "Switch"
      input: "fc256/BatchNorm/cond/Merge_2"
      input: "fc256/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/cond/Merge_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/AssignMovingAvg_1/sub"
      op: "Sub"
      input: "fc256/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
      input: "fc256/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/AssignMovingAvg_1/mul"
      op: "Mul"
      input: "fc256/BatchNorm/cond_1/AssignMovingAvg_1/sub"
      input: "fc256/BatchNorm/cond_1/AssignMovingAvg_1/decay"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/AssignMovingAvg_1/Switch"
      op: "RefSwitch"
      input: "fc256/BatchNorm/moving_variance"
      input: "fc256/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/AssignMovingAvg_1"
      op: "AssignSub"
      input: "fc256/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
      input: "fc256/BatchNorm/cond_1/AssignMovingAvg_1/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/Switch_1"
      op: "Switch"
      input: "fc256/BatchNorm/moving_mean/read"
      input: "fc256/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/Switch_2"
      op: "Switch"
      input: "fc256/BatchNorm/moving_variance/read"
      input: "fc256/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/Merge"
      op: "Merge"
      input: "fc256/BatchNorm/cond_1/Switch_1"
      input: "fc256/BatchNorm/cond_1/AssignMovingAvg"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/cond_1/Merge_1"
      op: "Merge"
      input: "fc256/BatchNorm/cond_1/Switch_2"
      input: "fc256/BatchNorm/cond_1/AssignMovingAvg_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/Shape"
      op: "Shape"
      input: "fc256/MatMul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "fc256/BatchNorm/Reshape_1"
      op: "Reshape"
      input: "fc256/BatchNorm/cond/Merge"
      input: "fc256/BatchNorm/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/Relu"
      op: "Relu"
      input: "fc256/BatchNorm/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\377\377\377\377\004\000\000\000\004\000\000\000\020\000\000\000"
          }
        }
      }
    }
    node {
      name: "reshape"
      op: "Reshape"
      input: "fc256/Relu"
      input: "reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/weights/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\003\000\000\000\003\000\000\000\020\000\000\000\020\000\000\000"
          }
        }
      }
    }
    node {
      name: "deconv8/weights/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.14433756470680237
          }
        }
      }
    }
    node {
      name: "deconv8/weights/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.14433756470680237
          }
        }
      }
    }
    node {
      name: "deconv8/weights/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "deconv8/weights/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 380
        }
      }
    }
    node {
      name: "deconv8/weights/Initializer/random_uniform/sub"
      op: "Sub"
      input: "deconv8/weights/Initializer/random_uniform/max"
      input: "deconv8/weights/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv8/weights/Initializer/random_uniform/mul"
      op: "Mul"
      input: "deconv8/weights/Initializer/random_uniform/RandomUniform"
      input: "deconv8/weights/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/weights/Initializer/random_uniform"
      op: "Add"
      input: "deconv8/weights/Initializer/random_uniform/mul"
      input: "deconv8/weights/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/weights"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 16
            }
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv8/weights/Assign"
      op: "Assign"
      input: "deconv8/weights"
      input: "deconv8/weights/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv8/weights/read"
      op: "Identity"
      input: "deconv8/weights"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/Shape"
      op: "Shape"
      input: "reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "deconv8/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "deconv8/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deconv8/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deconv8/strided_slice"
      op: "StridedSlice"
      input: "deconv8/Shape"
      input: "deconv8/strided_slice/stack"
      input: "deconv8/strided_slice/stack_1"
      input: "deconv8/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "deconv8/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deconv8/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "deconv8/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deconv8/strided_slice_1"
      op: "StridedSlice"
      input: "deconv8/Shape"
      input: "deconv8/strided_slice_1/stack"
      input: "deconv8/strided_slice_1/stack_1"
      input: "deconv8/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "deconv8/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "deconv8/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "deconv8/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deconv8/strided_slice_2"
      op: "StridedSlice"
      input: "deconv8/Shape"
      input: "deconv8/strided_slice_2/stack"
      input: "deconv8/strided_slice_2/stack_1"
      input: "deconv8/strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "deconv8/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "deconv8/mul"
      op: "Mul"
      input: "deconv8/strided_slice_1"
      input: "deconv8/mul/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv8/mul_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "deconv8/mul_1"
      op: "Mul"
      input: "deconv8/strided_slice_2"
      input: "deconv8/mul_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv8/stack/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 16
          }
        }
      }
    }
    node {
      name: "deconv8/stack"
      op: "Pack"
      input: "deconv8/strided_slice"
      input: "deconv8/mul"
      input: "deconv8/mul_1"
      input: "deconv8/stack/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "deconv8/conv2d_transpose"
      op: "Conv2DBackpropInput"
      input: "deconv8/stack"
      input: "deconv8/weights/read"
      input: "reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/beta/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/beta"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/beta/Assign"
      op: "Assign"
      input: "deconv8/BatchNorm/beta"
      input: "deconv8/BatchNorm/beta/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/beta/read"
      op: "Identity"
      input: "deconv8/BatchNorm/beta"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/gamma/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/gamma"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/gamma/Assign"
      op: "Assign"
      input: "deconv8/BatchNorm/gamma"
      input: "deconv8/BatchNorm/gamma/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/gamma/read"
      op: "Identity"
      input: "deconv8/BatchNorm/gamma"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/moving_mean/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/moving_mean"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/moving_mean/Assign"
      op: "Assign"
      input: "deconv8/BatchNorm/moving_mean"
      input: "deconv8/BatchNorm/moving_mean/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/moving_mean/read"
      op: "Identity"
      input: "deconv8/BatchNorm/moving_mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/moving_variance/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/moving_variance"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/moving_variance/Assign"
      op: "Assign"
      input: "deconv8/BatchNorm/moving_variance"
      input: "deconv8/BatchNorm/moving_variance/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/moving_variance/read"
      op: "Identity"
      input: "deconv8/BatchNorm/moving_variance"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond/Switch"
      op: "Switch"
      input: "placeholder/is_training"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond/switch_t"
      op: "Identity"
      input: "deconv8/BatchNorm/cond/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond/switch_f"
      op: "Identity"
      input: "deconv8/BatchNorm/cond/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond/pred_id"
      op: "Identity"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond/Const"
      op: "Const"
      input: "^deconv8/BatchNorm/cond/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond/Const_1"
      op: "Const"
      input: "^deconv8/BatchNorm/cond/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond/FusedBatchNorm/Switch"
      op: "Switch"
      input: "deconv8/conv2d_transpose"
      input: "deconv8/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/conv2d_transpose"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond/FusedBatchNorm/Switch_1"
      op: "Switch"
      input: "deconv8/BatchNorm/gamma/read"
      input: "deconv8/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond/FusedBatchNorm/Switch_2"
      op: "Switch"
      input: "deconv8/BatchNorm/beta/read"
      input: "deconv8/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond/FusedBatchNorm"
      op: "FusedBatchNorm"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm/Switch:1"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm/Switch_2:1"
      input: "deconv8/BatchNorm/cond/Const"
      input: "deconv8/BatchNorm/cond/Const_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch"
      op: "Switch"
      input: "deconv8/conv2d_transpose"
      input: "deconv8/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/conv2d_transpose"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      op: "Switch"
      input: "deconv8/BatchNorm/gamma/read"
      input: "deconv8/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
      op: "Switch"
      input: "deconv8/BatchNorm/beta/read"
      input: "deconv8/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
      op: "Switch"
      input: "deconv8/BatchNorm/moving_mean/read"
      input: "deconv8/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
      op: "Switch"
      input: "deconv8/BatchNorm/moving_variance/read"
      input: "deconv8/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond/FusedBatchNorm_1"
      op: "FusedBatchNorm"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond/Merge"
      op: "Merge"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm_1"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond/Merge_1"
      op: "Merge"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm_1:1"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm:1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond/Merge_2"
      op: "Merge"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm_1:2"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm:2"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/Switch"
      op: "Switch"
      input: "placeholder/is_training"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/switch_t"
      op: "Identity"
      input: "deconv8/BatchNorm/cond_1/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/switch_f"
      op: "Identity"
      input: "deconv8/BatchNorm/cond_1/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/pred_id"
      op: "Identity"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/AssignMovingAvg/decay"
      op: "Const"
      input: "^deconv8/BatchNorm/cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/AssignMovingAvg/sub/Switch"
      op: "Switch"
      input: "deconv8/BatchNorm/moving_mean/read"
      input: "deconv8/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1"
      op: "Switch"
      input: "deconv8/BatchNorm/cond/Merge_1"
      input: "deconv8/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/cond/Merge_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/AssignMovingAvg/sub"
      op: "Sub"
      input: "deconv8/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
      input: "deconv8/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/AssignMovingAvg/mul"
      op: "Mul"
      input: "deconv8/BatchNorm/cond_1/AssignMovingAvg/sub"
      input: "deconv8/BatchNorm/cond_1/AssignMovingAvg/decay"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/AssignMovingAvg/Switch"
      op: "RefSwitch"
      input: "deconv8/BatchNorm/moving_mean"
      input: "deconv8/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/AssignMovingAvg"
      op: "AssignSub"
      input: "deconv8/BatchNorm/cond_1/AssignMovingAvg/Switch:1"
      input: "deconv8/BatchNorm/cond_1/AssignMovingAvg/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/AssignMovingAvg_1/decay"
      op: "Const"
      input: "^deconv8/BatchNorm/cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch"
      op: "Switch"
      input: "deconv8/BatchNorm/moving_variance/read"
      input: "deconv8/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1"
      op: "Switch"
      input: "deconv8/BatchNorm/cond/Merge_2"
      input: "deconv8/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/cond/Merge_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/AssignMovingAvg_1/sub"
      op: "Sub"
      input: "deconv8/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
      input: "deconv8/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/AssignMovingAvg_1/mul"
      op: "Mul"
      input: "deconv8/BatchNorm/cond_1/AssignMovingAvg_1/sub"
      input: "deconv8/BatchNorm/cond_1/AssignMovingAvg_1/decay"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/AssignMovingAvg_1/Switch"
      op: "RefSwitch"
      input: "deconv8/BatchNorm/moving_variance"
      input: "deconv8/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/AssignMovingAvg_1"
      op: "AssignSub"
      input: "deconv8/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
      input: "deconv8/BatchNorm/cond_1/AssignMovingAvg_1/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/Switch_1"
      op: "Switch"
      input: "deconv8/BatchNorm/moving_mean/read"
      input: "deconv8/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/Switch_2"
      op: "Switch"
      input: "deconv8/BatchNorm/moving_variance/read"
      input: "deconv8/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/Merge"
      op: "Merge"
      input: "deconv8/BatchNorm/cond_1/Switch_1"
      input: "deconv8/BatchNorm/cond_1/AssignMovingAvg"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/cond_1/Merge_1"
      op: "Merge"
      input: "deconv8/BatchNorm/cond_1/Switch_2"
      input: "deconv8/BatchNorm/cond_1/AssignMovingAvg_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv8/Relu"
      op: "Relu"
      input: "deconv8/BatchNorm/cond/Merge"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/weights/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\020\000\000\000"
          }
        }
      }
    }
    node {
      name: "deconv16/weights/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.1666666716337204
          }
        }
      }
    }
    node {
      name: "deconv16/weights/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.1666666716337204
          }
        }
      }
    }
    node {
      name: "deconv16/weights/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "deconv16/weights/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 468
        }
      }
    }
    node {
      name: "deconv16/weights/Initializer/random_uniform/sub"
      op: "Sub"
      input: "deconv16/weights/Initializer/random_uniform/max"
      input: "deconv16/weights/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv16/weights/Initializer/random_uniform/mul"
      op: "Mul"
      input: "deconv16/weights/Initializer/random_uniform/RandomUniform"
      input: "deconv16/weights/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/weights/Initializer/random_uniform"
      op: "Add"
      input: "deconv16/weights/Initializer/random_uniform/mul"
      input: "deconv16/weights/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/weights"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 8
            }
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv16/weights/Assign"
      op: "Assign"
      input: "deconv16/weights"
      input: "deconv16/weights/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv16/weights/read"
      op: "Identity"
      input: "deconv16/weights"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/Shape"
      op: "Shape"
      input: "deconv8/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "deconv16/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "deconv16/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deconv16/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deconv16/strided_slice"
      op: "StridedSlice"
      input: "deconv16/Shape"
      input: "deconv16/strided_slice/stack"
      input: "deconv16/strided_slice/stack_1"
      input: "deconv16/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "deconv16/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deconv16/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "deconv16/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deconv16/strided_slice_1"
      op: "StridedSlice"
      input: "deconv16/Shape"
      input: "deconv16/strided_slice_1/stack"
      input: "deconv16/strided_slice_1/stack_1"
      input: "deconv16/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "deconv16/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "deconv16/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "deconv16/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deconv16/strided_slice_2"
      op: "StridedSlice"
      input: "deconv16/Shape"
      input: "deconv16/strided_slice_2/stack"
      input: "deconv16/strided_slice_2/stack_1"
      input: "deconv16/strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "deconv16/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "deconv16/mul"
      op: "Mul"
      input: "deconv16/strided_slice_1"
      input: "deconv16/mul/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv16/mul_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "deconv16/mul_1"
      op: "Mul"
      input: "deconv16/strided_slice_2"
      input: "deconv16/mul_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv16/stack/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "deconv16/stack"
      op: "Pack"
      input: "deconv16/strided_slice"
      input: "deconv16/mul"
      input: "deconv16/mul_1"
      input: "deconv16/stack/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "deconv16/conv2d_transpose"
      op: "Conv2DBackpropInput"
      input: "deconv16/stack"
      input: "deconv16/weights/read"
      input: "deconv8/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/beta/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/beta"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/beta/Assign"
      op: "Assign"
      input: "deconv16/BatchNorm/beta"
      input: "deconv16/BatchNorm/beta/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/beta/read"
      op: "Identity"
      input: "deconv16/BatchNorm/beta"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/gamma/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/gamma"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/gamma/Assign"
      op: "Assign"
      input: "deconv16/BatchNorm/gamma"
      input: "deconv16/BatchNorm/gamma/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/gamma/read"
      op: "Identity"
      input: "deconv16/BatchNorm/gamma"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/moving_mean/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/moving_mean"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/moving_mean/Assign"
      op: "Assign"
      input: "deconv16/BatchNorm/moving_mean"
      input: "deconv16/BatchNorm/moving_mean/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/moving_mean/read"
      op: "Identity"
      input: "deconv16/BatchNorm/moving_mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/moving_variance/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/moving_variance"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/moving_variance/Assign"
      op: "Assign"
      input: "deconv16/BatchNorm/moving_variance"
      input: "deconv16/BatchNorm/moving_variance/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/moving_variance/read"
      op: "Identity"
      input: "deconv16/BatchNorm/moving_variance"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond/Switch"
      op: "Switch"
      input: "placeholder/is_training"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond/switch_t"
      op: "Identity"
      input: "deconv16/BatchNorm/cond/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond/switch_f"
      op: "Identity"
      input: "deconv16/BatchNorm/cond/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond/pred_id"
      op: "Identity"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond/Const"
      op: "Const"
      input: "^deconv16/BatchNorm/cond/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond/Const_1"
      op: "Const"
      input: "^deconv16/BatchNorm/cond/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond/FusedBatchNorm/Switch"
      op: "Switch"
      input: "deconv16/conv2d_transpose"
      input: "deconv16/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/conv2d_transpose"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond/FusedBatchNorm/Switch_1"
      op: "Switch"
      input: "deconv16/BatchNorm/gamma/read"
      input: "deconv16/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond/FusedBatchNorm/Switch_2"
      op: "Switch"
      input: "deconv16/BatchNorm/beta/read"
      input: "deconv16/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond/FusedBatchNorm"
      op: "FusedBatchNorm"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm/Switch:1"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm/Switch_2:1"
      input: "deconv16/BatchNorm/cond/Const"
      input: "deconv16/BatchNorm/cond/Const_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch"
      op: "Switch"
      input: "deconv16/conv2d_transpose"
      input: "deconv16/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/conv2d_transpose"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      op: "Switch"
      input: "deconv16/BatchNorm/gamma/read"
      input: "deconv16/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
      op: "Switch"
      input: "deconv16/BatchNorm/beta/read"
      input: "deconv16/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
      op: "Switch"
      input: "deconv16/BatchNorm/moving_mean/read"
      input: "deconv16/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
      op: "Switch"
      input: "deconv16/BatchNorm/moving_variance/read"
      input: "deconv16/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond/FusedBatchNorm_1"
      op: "FusedBatchNorm"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond/Merge"
      op: "Merge"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm_1"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond/Merge_1"
      op: "Merge"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm_1:1"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm:1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond/Merge_2"
      op: "Merge"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm_1:2"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm:2"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/Switch"
      op: "Switch"
      input: "placeholder/is_training"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/switch_t"
      op: "Identity"
      input: "deconv16/BatchNorm/cond_1/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/switch_f"
      op: "Identity"
      input: "deconv16/BatchNorm/cond_1/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/pred_id"
      op: "Identity"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/AssignMovingAvg/decay"
      op: "Const"
      input: "^deconv16/BatchNorm/cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/AssignMovingAvg/sub/Switch"
      op: "Switch"
      input: "deconv16/BatchNorm/moving_mean/read"
      input: "deconv16/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1"
      op: "Switch"
      input: "deconv16/BatchNorm/cond/Merge_1"
      input: "deconv16/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/cond/Merge_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/AssignMovingAvg/sub"
      op: "Sub"
      input: "deconv16/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
      input: "deconv16/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/AssignMovingAvg/mul"
      op: "Mul"
      input: "deconv16/BatchNorm/cond_1/AssignMovingAvg/sub"
      input: "deconv16/BatchNorm/cond_1/AssignMovingAvg/decay"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/AssignMovingAvg/Switch"
      op: "RefSwitch"
      input: "deconv16/BatchNorm/moving_mean"
      input: "deconv16/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/AssignMovingAvg"
      op: "AssignSub"
      input: "deconv16/BatchNorm/cond_1/AssignMovingAvg/Switch:1"
      input: "deconv16/BatchNorm/cond_1/AssignMovingAvg/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/AssignMovingAvg_1/decay"
      op: "Const"
      input: "^deconv16/BatchNorm/cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch"
      op: "Switch"
      input: "deconv16/BatchNorm/moving_variance/read"
      input: "deconv16/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1"
      op: "Switch"
      input: "deconv16/BatchNorm/cond/Merge_2"
      input: "deconv16/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/cond/Merge_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/AssignMovingAvg_1/sub"
      op: "Sub"
      input: "deconv16/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
      input: "deconv16/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/AssignMovingAvg_1/mul"
      op: "Mul"
      input: "deconv16/BatchNorm/cond_1/AssignMovingAvg_1/sub"
      input: "deconv16/BatchNorm/cond_1/AssignMovingAvg_1/decay"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/AssignMovingAvg_1/Switch"
      op: "RefSwitch"
      input: "deconv16/BatchNorm/moving_variance"
      input: "deconv16/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/AssignMovingAvg_1"
      op: "AssignSub"
      input: "deconv16/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
      input: "deconv16/BatchNorm/cond_1/AssignMovingAvg_1/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/Switch_1"
      op: "Switch"
      input: "deconv16/BatchNorm/moving_mean/read"
      input: "deconv16/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/Switch_2"
      op: "Switch"
      input: "deconv16/BatchNorm/moving_variance/read"
      input: "deconv16/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/Merge"
      op: "Merge"
      input: "deconv16/BatchNorm/cond_1/Switch_1"
      input: "deconv16/BatchNorm/cond_1/AssignMovingAvg"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/cond_1/Merge_1"
      op: "Merge"
      input: "deconv16/BatchNorm/cond_1/Switch_2"
      input: "deconv16/BatchNorm/cond_1/AssignMovingAvg_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv16/Relu"
      op: "Relu"
      input: "deconv16/BatchNorm/cond/Merge"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/weights/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\003\000\000\000\003\000\000\000\004\000\000\000\010\000\000\000"
          }
        }
      }
    }
    node {
      name: "deconv32/weights/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.2357022613286972
          }
        }
      }
    }
    node {
      name: "deconv32/weights/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.2357022613286972
          }
        }
      }
    }
    node {
      name: "deconv32/weights/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "deconv32/weights/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 556
        }
      }
    }
    node {
      name: "deconv32/weights/Initializer/random_uniform/sub"
      op: "Sub"
      input: "deconv32/weights/Initializer/random_uniform/max"
      input: "deconv32/weights/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv32/weights/Initializer/random_uniform/mul"
      op: "Mul"
      input: "deconv32/weights/Initializer/random_uniform/RandomUniform"
      input: "deconv32/weights/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/weights/Initializer/random_uniform"
      op: "Add"
      input: "deconv32/weights/Initializer/random_uniform/mul"
      input: "deconv32/weights/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/weights"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 4
            }
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv32/weights/Assign"
      op: "Assign"
      input: "deconv32/weights"
      input: "deconv32/weights/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv32/weights/read"
      op: "Identity"
      input: "deconv32/weights"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/Shape"
      op: "Shape"
      input: "deconv16/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "deconv32/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "deconv32/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deconv32/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deconv32/strided_slice"
      op: "StridedSlice"
      input: "deconv32/Shape"
      input: "deconv32/strided_slice/stack"
      input: "deconv32/strided_slice/stack_1"
      input: "deconv32/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "deconv32/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deconv32/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "deconv32/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deconv32/strided_slice_1"
      op: "StridedSlice"
      input: "deconv32/Shape"
      input: "deconv32/strided_slice_1/stack"
      input: "deconv32/strided_slice_1/stack_1"
      input: "deconv32/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "deconv32/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "deconv32/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "deconv32/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deconv32/strided_slice_2"
      op: "StridedSlice"
      input: "deconv32/Shape"
      input: "deconv32/strided_slice_2/stack"
      input: "deconv32/strided_slice_2/stack_1"
      input: "deconv32/strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "deconv32/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "deconv32/mul"
      op: "Mul"
      input: "deconv32/strided_slice_1"
      input: "deconv32/mul/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv32/mul_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "deconv32/mul_1"
      op: "Mul"
      input: "deconv32/strided_slice_2"
      input: "deconv32/mul_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv32/stack/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "deconv32/stack"
      op: "Pack"
      input: "deconv32/strided_slice"
      input: "deconv32/mul"
      input: "deconv32/mul_1"
      input: "deconv32/stack/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "deconv32/conv2d_transpose"
      op: "Conv2DBackpropInput"
      input: "deconv32/stack"
      input: "deconv32/weights/read"
      input: "deconv16/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/beta/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/beta"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/beta/Assign"
      op: "Assign"
      input: "deconv32/BatchNorm/beta"
      input: "deconv32/BatchNorm/beta/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/beta/read"
      op: "Identity"
      input: "deconv32/BatchNorm/beta"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/gamma/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/gamma"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/gamma/Assign"
      op: "Assign"
      input: "deconv32/BatchNorm/gamma"
      input: "deconv32/BatchNorm/gamma/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/gamma/read"
      op: "Identity"
      input: "deconv32/BatchNorm/gamma"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/moving_mean/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/moving_mean"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/moving_mean/Assign"
      op: "Assign"
      input: "deconv32/BatchNorm/moving_mean"
      input: "deconv32/BatchNorm/moving_mean/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/moving_mean/read"
      op: "Identity"
      input: "deconv32/BatchNorm/moving_mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/moving_variance/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/moving_variance"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/moving_variance/Assign"
      op: "Assign"
      input: "deconv32/BatchNorm/moving_variance"
      input: "deconv32/BatchNorm/moving_variance/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/moving_variance/read"
      op: "Identity"
      input: "deconv32/BatchNorm/moving_variance"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond/Switch"
      op: "Switch"
      input: "placeholder/is_training"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond/switch_t"
      op: "Identity"
      input: "deconv32/BatchNorm/cond/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond/switch_f"
      op: "Identity"
      input: "deconv32/BatchNorm/cond/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond/pred_id"
      op: "Identity"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond/Const"
      op: "Const"
      input: "^deconv32/BatchNorm/cond/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond/Const_1"
      op: "Const"
      input: "^deconv32/BatchNorm/cond/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond/FusedBatchNorm/Switch"
      op: "Switch"
      input: "deconv32/conv2d_transpose"
      input: "deconv32/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/conv2d_transpose"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond/FusedBatchNorm/Switch_1"
      op: "Switch"
      input: "deconv32/BatchNorm/gamma/read"
      input: "deconv32/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond/FusedBatchNorm/Switch_2"
      op: "Switch"
      input: "deconv32/BatchNorm/beta/read"
      input: "deconv32/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond/FusedBatchNorm"
      op: "FusedBatchNorm"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm/Switch:1"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm/Switch_2:1"
      input: "deconv32/BatchNorm/cond/Const"
      input: "deconv32/BatchNorm/cond/Const_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch"
      op: "Switch"
      input: "deconv32/conv2d_transpose"
      input: "deconv32/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/conv2d_transpose"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      op: "Switch"
      input: "deconv32/BatchNorm/gamma/read"
      input: "deconv32/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
      op: "Switch"
      input: "deconv32/BatchNorm/beta/read"
      input: "deconv32/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
      op: "Switch"
      input: "deconv32/BatchNorm/moving_mean/read"
      input: "deconv32/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
      op: "Switch"
      input: "deconv32/BatchNorm/moving_variance/read"
      input: "deconv32/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond/FusedBatchNorm_1"
      op: "FusedBatchNorm"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond/Merge"
      op: "Merge"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm_1"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond/Merge_1"
      op: "Merge"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm_1:1"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm:1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond/Merge_2"
      op: "Merge"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm_1:2"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm:2"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/Switch"
      op: "Switch"
      input: "placeholder/is_training"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/switch_t"
      op: "Identity"
      input: "deconv32/BatchNorm/cond_1/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/switch_f"
      op: "Identity"
      input: "deconv32/BatchNorm/cond_1/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/pred_id"
      op: "Identity"
      input: "placeholder/is_training"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/AssignMovingAvg/decay"
      op: "Const"
      input: "^deconv32/BatchNorm/cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/AssignMovingAvg/sub/Switch"
      op: "Switch"
      input: "deconv32/BatchNorm/moving_mean/read"
      input: "deconv32/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1"
      op: "Switch"
      input: "deconv32/BatchNorm/cond/Merge_1"
      input: "deconv32/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/cond/Merge_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/AssignMovingAvg/sub"
      op: "Sub"
      input: "deconv32/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
      input: "deconv32/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/AssignMovingAvg/mul"
      op: "Mul"
      input: "deconv32/BatchNorm/cond_1/AssignMovingAvg/sub"
      input: "deconv32/BatchNorm/cond_1/AssignMovingAvg/decay"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/AssignMovingAvg/Switch"
      op: "RefSwitch"
      input: "deconv32/BatchNorm/moving_mean"
      input: "deconv32/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/AssignMovingAvg"
      op: "AssignSub"
      input: "deconv32/BatchNorm/cond_1/AssignMovingAvg/Switch:1"
      input: "deconv32/BatchNorm/cond_1/AssignMovingAvg/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/AssignMovingAvg_1/decay"
      op: "Const"
      input: "^deconv32/BatchNorm/cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch"
      op: "Switch"
      input: "deconv32/BatchNorm/moving_variance/read"
      input: "deconv32/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1"
      op: "Switch"
      input: "deconv32/BatchNorm/cond/Merge_2"
      input: "deconv32/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/cond/Merge_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/AssignMovingAvg_1/sub"
      op: "Sub"
      input: "deconv32/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
      input: "deconv32/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/AssignMovingAvg_1/mul"
      op: "Mul"
      input: "deconv32/BatchNorm/cond_1/AssignMovingAvg_1/sub"
      input: "deconv32/BatchNorm/cond_1/AssignMovingAvg_1/decay"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/AssignMovingAvg_1/Switch"
      op: "RefSwitch"
      input: "deconv32/BatchNorm/moving_variance"
      input: "deconv32/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/AssignMovingAvg_1"
      op: "AssignSub"
      input: "deconv32/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
      input: "deconv32/BatchNorm/cond_1/AssignMovingAvg_1/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/Switch_1"
      op: "Switch"
      input: "deconv32/BatchNorm/moving_mean/read"
      input: "deconv32/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/Switch_2"
      op: "Switch"
      input: "deconv32/BatchNorm/moving_variance/read"
      input: "deconv32/BatchNorm/cond_1/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/Merge"
      op: "Merge"
      input: "deconv32/BatchNorm/cond_1/Switch_1"
      input: "deconv32/BatchNorm/cond_1/AssignMovingAvg"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/cond_1/Merge_1"
      op: "Merge"
      input: "deconv32/BatchNorm/cond_1/Switch_2"
      input: "deconv32/BatchNorm/cond_1/AssignMovingAvg_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv32/Relu"
      op: "Relu"
      input: "deconv32/BatchNorm/cond/Merge"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv64/weights/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\003\000\000\000\003\000\000\000\001\000\000\000\004\000\000\000"
          }
        }
      }
    }
    node {
      name: "deconv64/weights/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.3651483654975891
          }
        }
      }
    }
    node {
      name: "deconv64/weights/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.3651483654975891
          }
        }
      }
    }
    node {
      name: "deconv64/weights/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "deconv64/weights/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 644
        }
      }
    }
    node {
      name: "deconv64/weights/Initializer/random_uniform/sub"
      op: "Sub"
      input: "deconv64/weights/Initializer/random_uniform/max"
      input: "deconv64/weights/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv64/weights/Initializer/random_uniform/mul"
      op: "Mul"
      input: "deconv64/weights/Initializer/random_uniform/RandomUniform"
      input: "deconv64/weights/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv64/weights/Initializer/random_uniform"
      op: "Add"
      input: "deconv64/weights/Initializer/random_uniform/mul"
      input: "deconv64/weights/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv64/weights"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 1
            }
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv64/weights/Assign"
      op: "Assign"
      input: "deconv64/weights"
      input: "deconv64/weights/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv64/weights/read"
      op: "Identity"
      input: "deconv64/weights"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv64/Shape"
      op: "Shape"
      input: "deconv32/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "deconv64/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "deconv64/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deconv64/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deconv64/strided_slice"
      op: "StridedSlice"
      input: "deconv64/Shape"
      input: "deconv64/strided_slice/stack"
      input: "deconv64/strided_slice/stack_1"
      input: "deconv64/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "deconv64/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deconv64/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "deconv64/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deconv64/strided_slice_1"
      op: "StridedSlice"
      input: "deconv64/Shape"
      input: "deconv64/strided_slice_1/stack"
      input: "deconv64/strided_slice_1/stack_1"
      input: "deconv64/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "deconv64/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "deconv64/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "deconv64/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deconv64/strided_slice_2"
      op: "StridedSlice"
      input: "deconv64/Shape"
      input: "deconv64/strided_slice_2/stack"
      input: "deconv64/strided_slice_2/stack_1"
      input: "deconv64/strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "deconv64/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "deconv64/mul"
      op: "Mul"
      input: "deconv64/strided_slice_1"
      input: "deconv64/mul/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv64/mul_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "deconv64/mul_1"
      op: "Mul"
      input: "deconv64/strided_slice_2"
      input: "deconv64/mul_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "deconv64/stack/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "deconv64/stack"
      op: "Pack"
      input: "deconv64/strided_slice"
      input: "deconv64/mul"
      input: "deconv64/mul_1"
      input: "deconv64/stack/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "deconv64/conv2d_transpose"
      op: "Conv2DBackpropInput"
      input: "deconv64/stack"
      input: "deconv64/weights/read"
      input: "deconv32/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
              dim {
                size: 64
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "out"
      op: "Identity"
      input: "deconv64/conv2d_transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
              dim {
                size: 64
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "SquaredDifference"
      op: "SquaredDifference"
      input: "out"
      input: "placeholder/images"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
              dim {
                size: 64
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "loss"
      op: "Mean"
      input: "SquaredDifference"
      input: "Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "global_step/Initializer/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "global_step"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "global_step/Assign"
      op: "Assign"
      input: "global_step"
      input: "global_step/Initializer/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "global_step/read"
      op: "Identity"
      input: "global_step"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "epoch/Initializer/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@epoch"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "epoch"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@epoch"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "epoch/Assign"
      op: "Assign"
      input: "epoch"
      input: "epoch/Initializer/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@epoch"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "epoch/read"
      op: "Identity"
      input: "epoch"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@epoch"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "increment_global_step/value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "increment_global_step"
      op: "AssignAdd"
      input: "global_step"
      input: "increment_global_step/value"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
    }
    node {
      name: "increment_epoch/value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "increment_epoch"
      op: "AssignAdd"
      input: "epoch"
      input: "increment_epoch/value"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@epoch"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/Shape"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "gradients/Fill"
      op: "Fill"
      input: "gradients/Shape"
      input: "gradients/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/loss_grad/Reshape/shape"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "gradients/loss_grad/Reshape"
      op: "Reshape"
      input: "gradients/Fill"
      input: "gradients/loss_grad/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/loss_grad/Shape"
      op: "Shape"
      input: "SquaredDifference"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/loss_grad/Tile"
      op: "Tile"
      input: "gradients/loss_grad/Reshape"
      input: "gradients/loss_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
              dim {
                size: 64
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/loss_grad/Shape_1"
      op: "Shape"
      input: "SquaredDifference"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/loss_grad/Shape_2"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/loss_grad/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "gradients/loss_grad/Prod"
      op: "Prod"
      input: "gradients/loss_grad/Shape_1"
      input: "gradients/loss_grad/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/loss_grad/Const_1"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "gradients/loss_grad/Prod_1"
      op: "Prod"
      input: "gradients/loss_grad/Shape_2"
      input: "gradients/loss_grad/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/loss_grad/Maximum/y"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "gradients/loss_grad/Maximum"
      op: "Maximum"
      input: "gradients/loss_grad/Prod_1"
      input: "gradients/loss_grad/Maximum/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/loss_grad/floordiv"
      op: "FloorDiv"
      input: "gradients/loss_grad/Prod"
      input: "gradients/loss_grad/Maximum"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/loss_grad/Cast"
      op: "Cast"
      input: "gradients/loss_grad/floordiv"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/loss_grad/truediv"
      op: "RealDiv"
      input: "gradients/loss_grad/Tile"
      input: "gradients/loss_grad/Cast"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
              dim {
                size: 64
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/SquaredDifference_grad/Shape"
      op: "Shape"
      input: "out"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/SquaredDifference_grad/Shape_1"
      op: "Shape"
      input: "placeholder/images"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/SquaredDifference_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/SquaredDifference_grad/Shape"
      input: "gradients/SquaredDifference_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/SquaredDifference_grad/scalar"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/loss_grad/truediv"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
    }
    node {
      name: "gradients/SquaredDifference_grad/mul"
      op: "Mul"
      input: "gradients/SquaredDifference_grad/scalar"
      input: "gradients/loss_grad/truediv"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
              dim {
                size: 64
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/SquaredDifference_grad/sub"
      op: "Sub"
      input: "out"
      input: "placeholder/images"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/loss_grad/truediv"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
              dim {
                size: 64
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/SquaredDifference_grad/mul_1"
      op: "Mul"
      input: "gradients/SquaredDifference_grad/mul"
      input: "gradients/SquaredDifference_grad/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
              dim {
                size: 64
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/SquaredDifference_grad/Sum"
      op: "Sum"
      input: "gradients/SquaredDifference_grad/mul_1"
      input: "gradients/SquaredDifference_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/SquaredDifference_grad/Reshape"
      op: "Reshape"
      input: "gradients/SquaredDifference_grad/Sum"
      input: "gradients/SquaredDifference_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
              dim {
                size: 64
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/SquaredDifference_grad/Sum_1"
      op: "Sum"
      input: "gradients/SquaredDifference_grad/mul_1"
      input: "gradients/SquaredDifference_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/SquaredDifference_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/SquaredDifference_grad/Sum_1"
      input: "gradients/SquaredDifference_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
              dim {
                size: 64
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/SquaredDifference_grad/Neg"
      op: "Neg"
      input: "gradients/SquaredDifference_grad/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
              dim {
                size: 64
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/SquaredDifference_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/SquaredDifference_grad/Reshape"
      input: "^gradients/SquaredDifference_grad/Neg"
    }
    node {
      name: "gradients/SquaredDifference_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/SquaredDifference_grad/Reshape"
      input: "^gradients/SquaredDifference_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/SquaredDifference_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
              dim {
                size: 64
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/SquaredDifference_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/SquaredDifference_grad/Neg"
      input: "^gradients/SquaredDifference_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/SquaredDifference_grad/Neg"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
              dim {
                size: 64
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv64/conv2d_transpose_grad/Shape"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\003\000\000\000\003\000\000\000\001\000\000\000\004\000\000\000"
          }
        }
      }
    }
    node {
      name: "gradients/deconv64/conv2d_transpose_grad/Conv2DBackpropFilter"
      op: "Conv2DBackpropFilter"
      input: "gradients/SquaredDifference_grad/tuple/control_dependency"
      input: "gradients/deconv64/conv2d_transpose_grad/Shape"
      input: "deconv32/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/deconv64/conv2d_transpose_grad/Conv2D"
      op: "Conv2D"
      input: "gradients/SquaredDifference_grad/tuple/control_dependency"
      input: "deconv64/weights/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/deconv64/conv2d_transpose_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/deconv64/conv2d_transpose_grad/Conv2DBackpropFilter"
      input: "^gradients/deconv64/conv2d_transpose_grad/Conv2D"
    }
    node {
      name: "gradients/deconv64/conv2d_transpose_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/deconv64/conv2d_transpose_grad/Conv2DBackpropFilter"
      input: "^gradients/deconv64/conv2d_transpose_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv64/conv2d_transpose_grad/Conv2DBackpropFilter"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv64/conv2d_transpose_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/deconv64/conv2d_transpose_grad/Conv2D"
      input: "^gradients/deconv64/conv2d_transpose_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv64/conv2d_transpose_grad/Conv2D"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/Relu_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/deconv64/conv2d_transpose_grad/tuple/control_dependency_1"
      input: "deconv32/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/Merge_grad/cond_grad"
      op: "Switch"
      input: "gradients/deconv32/Relu_grad/ReluGrad"
      input: "deconv32/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv32/Relu_grad/ReluGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/Merge_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/deconv32/BatchNorm/cond/Merge_grad/cond_grad"
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/Merge_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/deconv32/BatchNorm/cond/Merge_grad/cond_grad"
      input: "^gradients/deconv32/BatchNorm/cond/Merge_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv32/Relu_grad/ReluGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/deconv32/BatchNorm/cond/Merge_grad/cond_grad:1"
      input: "^gradients/deconv32/BatchNorm/cond/Merge_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv32/Relu_grad/ReluGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_1"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_2"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_3"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      op: "FusedBatchNormGrad"
      input: "gradients/deconv32/BatchNorm/cond/Merge_grad/tuple/control_dependency"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm_1:3"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm_1:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      input: "^gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
      input: "^gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
      op: "Identity"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
      input: "^gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_3"
      op: "Identity"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:3"
      input: "^gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_4"
      op: "Identity"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:4"
      input: "^gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_4"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_5"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_6"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_7"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      op: "FusedBatchNormGrad"
      input: "gradients/deconv32/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm/Switch:1"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm:3"
      input: "deconv32/BatchNorm/cond/FusedBatchNorm:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
              }
            }
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      input: "^gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
      input: "^gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
      op: "Identity"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
      input: "^gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
      op: "Identity"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
      input: "^gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
      op: "Identity"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
      input: "^gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch"
      op: "Switch"
      input: "deconv32/conv2d_transpose"
      input: "deconv32/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_1"
      op: "Shape"
      input: "gradients/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros"
      op: "Fill"
      input: "gradients/Shape_1"
      input: "gradients/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      op: "Merge"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
      input: "gradients/zeros"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_1"
      op: "Switch"
      input: "deconv32/BatchNorm/gamma/read"
      input: "deconv32/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_2"
      op: "Shape"
      input: "gradients/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_1/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_1"
      op: "Fill"
      input: "gradients/Shape_2"
      input: "gradients/zeros_1/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
      op: "Merge"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
      input: "gradients/zeros_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_2"
      op: "Switch"
      input: "deconv32/BatchNorm/beta/read"
      input: "deconv32/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_3"
      op: "Shape"
      input: "gradients/Switch_2:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_2/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_2"
      op: "Fill"
      input: "gradients/Shape_3"
      input: "gradients/zeros_2/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      op: "Merge"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
      input: "gradients/zeros_2"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_3"
      op: "Switch"
      input: "deconv32/conv2d_transpose"
      input: "deconv32/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_4"
      op: "Shape"
      input: "gradients/Switch_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_3/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_3"
      op: "Fill"
      input: "gradients/Shape_4"
      input: "gradients/zeros_3/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
      op: "Merge"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
      input: "gradients/zeros_3"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_4"
      op: "Switch"
      input: "deconv32/BatchNorm/gamma/read"
      input: "deconv32/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_5"
      op: "Shape"
      input: "gradients/Switch_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_4/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_4"
      op: "Fill"
      input: "gradients/Shape_5"
      input: "gradients/zeros_4/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
      op: "Merge"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
      input: "gradients/zeros_4"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_5"
      op: "Switch"
      input: "deconv32/BatchNorm/beta/read"
      input: "deconv32/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_6"
      op: "Shape"
      input: "gradients/Switch_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_5/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_5"
      op: "Fill"
      input: "gradients/Shape_6"
      input: "gradients/zeros_5/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
      op: "Merge"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
      input: "gradients/zeros_5"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN"
      op: "AddN"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/conv2d_transpose_grad/Shape"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\003\000\000\000\003\000\000\000\004\000\000\000\010\000\000\000"
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/conv2d_transpose_grad/Conv2DBackpropFilter"
      op: "Conv2DBackpropFilter"
      input: "gradients/AddN"
      input: "gradients/deconv32/conv2d_transpose_grad/Shape"
      input: "deconv16/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/deconv32/conv2d_transpose_grad/Conv2D"
      op: "Conv2D"
      input: "gradients/AddN"
      input: "deconv32/weights/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/deconv32/conv2d_transpose_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/deconv32/conv2d_transpose_grad/Conv2DBackpropFilter"
      input: "^gradients/deconv32/conv2d_transpose_grad/Conv2D"
    }
    node {
      name: "gradients/deconv32/conv2d_transpose_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/deconv32/conv2d_transpose_grad/Conv2DBackpropFilter"
      input: "^gradients/deconv32/conv2d_transpose_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv32/conv2d_transpose_grad/Conv2DBackpropFilter"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv32/conv2d_transpose_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/deconv32/conv2d_transpose_grad/Conv2D"
      input: "^gradients/deconv32/conv2d_transpose_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv32/conv2d_transpose_grad/Conv2D"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_1"
      op: "AddN"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_2"
      op: "AddN"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      input: "gradients/deconv32/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/Relu_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/deconv32/conv2d_transpose_grad/tuple/control_dependency_1"
      input: "deconv16/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/Merge_grad/cond_grad"
      op: "Switch"
      input: "gradients/deconv16/Relu_grad/ReluGrad"
      input: "deconv16/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv16/Relu_grad/ReluGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/Merge_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/deconv16/BatchNorm/cond/Merge_grad/cond_grad"
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/Merge_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/deconv16/BatchNorm/cond/Merge_grad/cond_grad"
      input: "^gradients/deconv16/BatchNorm/cond/Merge_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv16/Relu_grad/ReluGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/deconv16/BatchNorm/cond/Merge_grad/cond_grad:1"
      input: "^gradients/deconv16/BatchNorm/cond/Merge_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv16/Relu_grad/ReluGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_8"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_9"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_10"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_11"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      op: "FusedBatchNormGrad"
      input: "gradients/deconv16/BatchNorm/cond/Merge_grad/tuple/control_dependency"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm_1:3"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm_1:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      input: "^gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
      input: "^gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
      op: "Identity"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
      input: "^gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_3"
      op: "Identity"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:3"
      input: "^gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_4"
      op: "Identity"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:4"
      input: "^gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_12"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_13"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_14"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_15"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      op: "FusedBatchNormGrad"
      input: "gradients/deconv16/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm/Switch:1"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm:3"
      input: "deconv16/BatchNorm/cond/FusedBatchNorm:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
              }
            }
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      input: "^gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
      input: "^gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
      op: "Identity"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
      input: "^gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
      op: "Identity"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
      input: "^gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
      op: "Identity"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
      input: "^gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_6"
      op: "Switch"
      input: "deconv16/conv2d_transpose"
      input: "deconv16/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_7"
      op: "Shape"
      input: "gradients/Switch_6:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_6/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_6"
      op: "Fill"
      input: "gradients/Shape_7"
      input: "gradients/zeros_6/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      op: "Merge"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
      input: "gradients/zeros_6"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_7"
      op: "Switch"
      input: "deconv16/BatchNorm/gamma/read"
      input: "deconv16/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_8"
      op: "Shape"
      input: "gradients/Switch_7:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_7/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_7"
      op: "Fill"
      input: "gradients/Shape_8"
      input: "gradients/zeros_7/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
      op: "Merge"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
      input: "gradients/zeros_7"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_8"
      op: "Switch"
      input: "deconv16/BatchNorm/beta/read"
      input: "deconv16/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_9"
      op: "Shape"
      input: "gradients/Switch_8:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_8/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_8"
      op: "Fill"
      input: "gradients/Shape_9"
      input: "gradients/zeros_8/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      op: "Merge"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
      input: "gradients/zeros_8"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_9"
      op: "Switch"
      input: "deconv16/conv2d_transpose"
      input: "deconv16/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_10"
      op: "Shape"
      input: "gradients/Switch_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_9/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_9"
      op: "Fill"
      input: "gradients/Shape_10"
      input: "gradients/zeros_9/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
      op: "Merge"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
      input: "gradients/zeros_9"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_10"
      op: "Switch"
      input: "deconv16/BatchNorm/gamma/read"
      input: "deconv16/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_11"
      op: "Shape"
      input: "gradients/Switch_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_10/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_10"
      op: "Fill"
      input: "gradients/Shape_11"
      input: "gradients/zeros_10/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
      op: "Merge"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
      input: "gradients/zeros_10"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_11"
      op: "Switch"
      input: "deconv16/BatchNorm/beta/read"
      input: "deconv16/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_12"
      op: "Shape"
      input: "gradients/Switch_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_11/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_11"
      op: "Fill"
      input: "gradients/Shape_12"
      input: "gradients/zeros_11/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
      op: "Merge"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
      input: "gradients/zeros_11"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_3"
      op: "AddN"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/conv2d_transpose_grad/Shape"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\020\000\000\000"
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/conv2d_transpose_grad/Conv2DBackpropFilter"
      op: "Conv2DBackpropFilter"
      input: "gradients/AddN_3"
      input: "gradients/deconv16/conv2d_transpose_grad/Shape"
      input: "deconv8/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/deconv16/conv2d_transpose_grad/Conv2D"
      op: "Conv2D"
      input: "gradients/AddN_3"
      input: "deconv16/weights/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/deconv16/conv2d_transpose_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/deconv16/conv2d_transpose_grad/Conv2DBackpropFilter"
      input: "^gradients/deconv16/conv2d_transpose_grad/Conv2D"
    }
    node {
      name: "gradients/deconv16/conv2d_transpose_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/deconv16/conv2d_transpose_grad/Conv2DBackpropFilter"
      input: "^gradients/deconv16/conv2d_transpose_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv16/conv2d_transpose_grad/Conv2DBackpropFilter"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv16/conv2d_transpose_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/deconv16/conv2d_transpose_grad/Conv2D"
      input: "^gradients/deconv16/conv2d_transpose_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv16/conv2d_transpose_grad/Conv2D"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_4"
      op: "AddN"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_5"
      op: "AddN"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      input: "gradients/deconv16/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/Relu_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/deconv16/conv2d_transpose_grad/tuple/control_dependency_1"
      input: "deconv8/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/Merge_grad/cond_grad"
      op: "Switch"
      input: "gradients/deconv8/Relu_grad/ReluGrad"
      input: "deconv8/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv8/Relu_grad/ReluGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/Merge_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/deconv8/BatchNorm/cond/Merge_grad/cond_grad"
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/Merge_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/deconv8/BatchNorm/cond/Merge_grad/cond_grad"
      input: "^gradients/deconv8/BatchNorm/cond/Merge_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv8/Relu_grad/ReluGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/deconv8/BatchNorm/cond/Merge_grad/cond_grad:1"
      input: "^gradients/deconv8/BatchNorm/cond/Merge_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv8/Relu_grad/ReluGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_16"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_17"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_18"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_19"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      op: "FusedBatchNormGrad"
      input: "gradients/deconv8/BatchNorm/cond/Merge_grad/tuple/control_dependency"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm_1:3"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm_1:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      input: "^gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
      input: "^gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
      op: "Identity"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
      input: "^gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_3"
      op: "Identity"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:3"
      input: "^gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_4"
      op: "Identity"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:4"
      input: "^gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_20"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_21"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_22"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_23"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      op: "FusedBatchNormGrad"
      input: "gradients/deconv8/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm/Switch:1"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm:3"
      input: "deconv8/BatchNorm/cond/FusedBatchNorm:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
              }
            }
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      input: "^gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
      input: "^gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
      op: "Identity"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
      input: "^gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
      op: "Identity"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
      input: "^gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
      op: "Identity"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
      input: "^gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_12"
      op: "Switch"
      input: "deconv8/conv2d_transpose"
      input: "deconv8/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_13"
      op: "Shape"
      input: "gradients/Switch_12:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_12/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_12"
      op: "Fill"
      input: "gradients/Shape_13"
      input: "gradients/zeros_12/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      op: "Merge"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
      input: "gradients/zeros_12"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_13"
      op: "Switch"
      input: "deconv8/BatchNorm/gamma/read"
      input: "deconv8/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_14"
      op: "Shape"
      input: "gradients/Switch_13:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_13/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_13"
      op: "Fill"
      input: "gradients/Shape_14"
      input: "gradients/zeros_13/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
      op: "Merge"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
      input: "gradients/zeros_13"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_14"
      op: "Switch"
      input: "deconv8/BatchNorm/beta/read"
      input: "deconv8/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_15"
      op: "Shape"
      input: "gradients/Switch_14:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_14/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_14"
      op: "Fill"
      input: "gradients/Shape_15"
      input: "gradients/zeros_14/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      op: "Merge"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
      input: "gradients/zeros_14"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_15"
      op: "Switch"
      input: "deconv8/conv2d_transpose"
      input: "deconv8/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_16"
      op: "Shape"
      input: "gradients/Switch_15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_15/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_15"
      op: "Fill"
      input: "gradients/Shape_16"
      input: "gradients/zeros_15/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
      op: "Merge"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
      input: "gradients/zeros_15"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_16"
      op: "Switch"
      input: "deconv8/BatchNorm/gamma/read"
      input: "deconv8/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_17"
      op: "Shape"
      input: "gradients/Switch_16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_16/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_16"
      op: "Fill"
      input: "gradients/Shape_17"
      input: "gradients/zeros_16/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
      op: "Merge"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
      input: "gradients/zeros_16"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_17"
      op: "Switch"
      input: "deconv8/BatchNorm/beta/read"
      input: "deconv8/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_18"
      op: "Shape"
      input: "gradients/Switch_17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_17/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_17"
      op: "Fill"
      input: "gradients/Shape_18"
      input: "gradients/zeros_17/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
      op: "Merge"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
      input: "gradients/zeros_17"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_6"
      op: "AddN"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/conv2d_transpose_grad/Shape"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\003\000\000\000\003\000\000\000\020\000\000\000\020\000\000\000"
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/conv2d_transpose_grad/Conv2DBackpropFilter"
      op: "Conv2DBackpropFilter"
      input: "gradients/AddN_6"
      input: "gradients/deconv8/conv2d_transpose_grad/Shape"
      input: "reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/deconv8/conv2d_transpose_grad/Conv2D"
      op: "Conv2D"
      input: "gradients/AddN_6"
      input: "deconv8/weights/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/deconv8/conv2d_transpose_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/deconv8/conv2d_transpose_grad/Conv2DBackpropFilter"
      input: "^gradients/deconv8/conv2d_transpose_grad/Conv2D"
    }
    node {
      name: "gradients/deconv8/conv2d_transpose_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/deconv8/conv2d_transpose_grad/Conv2DBackpropFilter"
      input: "^gradients/deconv8/conv2d_transpose_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv8/conv2d_transpose_grad/Conv2DBackpropFilter"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/deconv8/conv2d_transpose_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/deconv8/conv2d_transpose_grad/Conv2D"
      input: "^gradients/deconv8/conv2d_transpose_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv8/conv2d_transpose_grad/Conv2D"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_7"
      op: "AddN"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_8"
      op: "AddN"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      input: "gradients/deconv8/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/reshape_grad/Shape"
      op: "Shape"
      input: "fc256/Relu"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/reshape_grad/Reshape"
      op: "Reshape"
      input: "gradients/deconv8/conv2d_transpose_grad/tuple/control_dependency_1"
      input: "gradients/reshape_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/Relu_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/reshape_grad/Reshape"
      input: "fc256/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/Reshape_1_grad/Shape"
      op: "Shape"
      input: "fc256/BatchNorm/cond/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/Reshape_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/fc256/Relu_grad/ReluGrad"
      input: "gradients/fc256/BatchNorm/Reshape_1_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/Merge_grad/cond_grad"
      op: "Switch"
      input: "gradients/fc256/BatchNorm/Reshape_1_grad/Reshape"
      input: "fc256/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/fc256/BatchNorm/Reshape_1_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/Merge_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/fc256/BatchNorm/cond/Merge_grad/cond_grad"
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/Merge_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/fc256/BatchNorm/cond/Merge_grad/cond_grad"
      input: "^gradients/fc256/BatchNorm/cond/Merge_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/fc256/BatchNorm/Reshape_1_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/fc256/BatchNorm/cond/Merge_grad/cond_grad:1"
      input: "^gradients/fc256/BatchNorm/cond/Merge_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/fc256/BatchNorm/Reshape_1_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_24"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_25"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_26"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_27"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      op: "FusedBatchNormGrad"
      input: "gradients/fc256/BatchNorm/cond/Merge_grad/tuple/control_dependency"
      input: "fc256/BatchNorm/cond/FusedBatchNorm_1/Switch"
      input: "fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      input: "fc256/BatchNorm/cond/FusedBatchNorm_1:3"
      input: "fc256/BatchNorm/cond/FusedBatchNorm_1:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      input: "^gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
      input: "^gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
      op: "Identity"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
      input: "^gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_3"
      op: "Identity"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:3"
      input: "^gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_4"
      op: "Identity"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:4"
      input: "^gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_28"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_29"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_30"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_31"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      op: "FusedBatchNormGrad"
      input: "gradients/fc256/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
      input: "fc256/BatchNorm/cond/FusedBatchNorm/Switch:1"
      input: "fc256/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
      input: "fc256/BatchNorm/cond/FusedBatchNorm:3"
      input: "fc256/BatchNorm/cond/FusedBatchNorm:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
              }
            }
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      input: "^gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
      input: "^gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
      op: "Identity"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
      input: "^gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
      op: "Identity"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
      input: "^gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
      op: "Identity"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
      input: "^gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_18"
      op: "Switch"
      input: "fc256/BatchNorm/Reshape"
      input: "fc256/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_19"
      op: "Shape"
      input: "gradients/Switch_18:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_18/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_18"
      op: "Fill"
      input: "gradients/Shape_19"
      input: "gradients/zeros_18/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      op: "Merge"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
      input: "gradients/zeros_18"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_19"
      op: "Switch"
      input: "fc256/BatchNorm/gamma/read"
      input: "fc256/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_20"
      op: "Shape"
      input: "gradients/Switch_19:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_19/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_19"
      op: "Fill"
      input: "gradients/Shape_20"
      input: "gradients/zeros_19/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
      op: "Merge"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
      input: "gradients/zeros_19"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_20"
      op: "Switch"
      input: "fc256/BatchNorm/beta/read"
      input: "fc256/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_21"
      op: "Shape"
      input: "gradients/Switch_20:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_20/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_20"
      op: "Fill"
      input: "gradients/Shape_21"
      input: "gradients/zeros_20/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      op: "Merge"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
      input: "gradients/zeros_20"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_21"
      op: "Switch"
      input: "fc256/BatchNorm/Reshape"
      input: "fc256/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_22"
      op: "Shape"
      input: "gradients/Switch_21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_21/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_21"
      op: "Fill"
      input: "gradients/Shape_22"
      input: "gradients/zeros_21/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
      op: "Merge"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
      input: "gradients/zeros_21"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_22"
      op: "Switch"
      input: "fc256/BatchNorm/gamma/read"
      input: "fc256/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_23"
      op: "Shape"
      input: "gradients/Switch_22"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_22/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_22"
      op: "Fill"
      input: "gradients/Shape_23"
      input: "gradients/zeros_22/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
      op: "Merge"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
      input: "gradients/zeros_22"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_23"
      op: "Switch"
      input: "fc256/BatchNorm/beta/read"
      input: "fc256/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_24"
      op: "Shape"
      input: "gradients/Switch_23"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_23/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_23"
      op: "Fill"
      input: "gradients/Shape_24"
      input: "gradients/zeros_23/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
      op: "Merge"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
      input: "gradients/zeros_23"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_9"
      op: "AddN"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/Reshape_grad/Shape"
      op: "Shape"
      input: "fc256/MatMul"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/fc256/BatchNorm/Reshape_grad/Reshape"
      op: "Reshape"
      input: "gradients/AddN_9"
      input: "gradients/fc256/BatchNorm/Reshape_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_10"
      op: "AddN"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_11"
      op: "AddN"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      input: "gradients/fc256/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/MatMul_grad/MatMul"
      op: "MatMul"
      input: "gradients/fc256/BatchNorm/Reshape_grad/Reshape"
      input: "fc256/weights/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/fc256/MatMul_grad/MatMul_1"
      op: "MatMul"
      input: "flatten512/Reshape"
      input: "gradients/fc256/BatchNorm/Reshape_grad/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/fc256/MatMul_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/fc256/MatMul_grad/MatMul"
      input: "^gradients/fc256/MatMul_grad/MatMul_1"
    }
    node {
      name: "gradients/fc256/MatMul_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/fc256/MatMul_grad/MatMul"
      input: "^gradients/fc256/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/fc256/MatMul_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/fc256/MatMul_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/fc256/MatMul_grad/MatMul_1"
      input: "^gradients/fc256/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/fc256/MatMul_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/flatten512/Reshape_grad/Shape"
      op: "Shape"
      input: "conv4/Relu"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/flatten512/Reshape_grad/Reshape"
      op: "Reshape"
      input: "gradients/fc256/MatMul_grad/tuple/control_dependency"
      input: "gradients/flatten512/Reshape_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv4/Relu_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/flatten512/Reshape_grad/Reshape"
      input: "conv4/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/Merge_grad/cond_grad"
      op: "Switch"
      input: "gradients/conv4/Relu_grad/ReluGrad"
      input: "conv4/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv4/Relu_grad/ReluGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/Merge_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/conv4/BatchNorm/cond/Merge_grad/cond_grad"
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/Merge_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/conv4/BatchNorm/cond/Merge_grad/cond_grad"
      input: "^gradients/conv4/BatchNorm/cond/Merge_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv4/Relu_grad/ReluGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/conv4/BatchNorm/cond/Merge_grad/cond_grad:1"
      input: "^gradients/conv4/BatchNorm/cond/Merge_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv4/Relu_grad/ReluGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_32"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 32
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_33"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 32
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_34"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 32
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_35"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 32
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      op: "FusedBatchNormGrad"
      input: "gradients/conv4/BatchNorm/cond/Merge_grad/tuple/control_dependency"
      input: "conv4/BatchNorm/cond/FusedBatchNorm_1/Switch"
      input: "conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      input: "conv4/BatchNorm/cond/FusedBatchNorm_1:3"
      input: "conv4/BatchNorm/cond/FusedBatchNorm_1:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      input: "^gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
      input: "^gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
      op: "Identity"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
      input: "^gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_3"
      op: "Identity"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:3"
      input: "^gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_4"
      op: "Identity"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:4"
      input: "^gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_36"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 32
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_37"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 32
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_38"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 32
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_39"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 32
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      op: "FusedBatchNormGrad"
      input: "gradients/conv4/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
      input: "conv4/BatchNorm/cond/FusedBatchNorm/Switch:1"
      input: "conv4/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
      input: "conv4/BatchNorm/cond/FusedBatchNorm:3"
      input: "conv4/BatchNorm/cond/FusedBatchNorm:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
              }
            }
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      input: "^gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
      input: "^gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
      op: "Identity"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
      input: "^gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
      op: "Identity"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
      input: "^gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
      op: "Identity"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
      input: "^gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_24"
      op: "Switch"
      input: "conv4/convolution"
      input: "conv4/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_25"
      op: "Shape"
      input: "gradients/Switch_24:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_24/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_24"
      op: "Fill"
      input: "gradients/Shape_25"
      input: "gradients/zeros_24/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
      input: "gradients/zeros_24"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_25"
      op: "Switch"
      input: "conv4/BatchNorm/gamma/read"
      input: "conv4/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_26"
      op: "Shape"
      input: "gradients/Switch_25:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_25/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_25"
      op: "Fill"
      input: "gradients/Shape_26"
      input: "gradients/zeros_25/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
      input: "gradients/zeros_25"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_26"
      op: "Switch"
      input: "conv4/BatchNorm/beta/read"
      input: "conv4/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_27"
      op: "Shape"
      input: "gradients/Switch_26:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_26/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_26"
      op: "Fill"
      input: "gradients/Shape_27"
      input: "gradients/zeros_26/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
      input: "gradients/zeros_26"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_27"
      op: "Switch"
      input: "conv4/convolution"
      input: "conv4/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_28"
      op: "Shape"
      input: "gradients/Switch_27"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_27/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_27"
      op: "Fill"
      input: "gradients/Shape_28"
      input: "gradients/zeros_27/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
      input: "gradients/zeros_27"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_28"
      op: "Switch"
      input: "conv4/BatchNorm/gamma/read"
      input: "conv4/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_29"
      op: "Shape"
      input: "gradients/Switch_28"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_28/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_28"
      op: "Fill"
      input: "gradients/Shape_29"
      input: "gradients/zeros_28/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
      input: "gradients/zeros_28"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_29"
      op: "Switch"
      input: "conv4/BatchNorm/beta/read"
      input: "conv4/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_30"
      op: "Shape"
      input: "gradients/Switch_29"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_29/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_29"
      op: "Fill"
      input: "gradients/Shape_30"
      input: "gradients/zeros_29/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv4/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
      input: "gradients/zeros_29"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_12"
      op: "AddN"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv4/convolution_grad/Shape"
      op: "Shape"
      input: "conv8/Relu"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/conv4/convolution_grad/Conv2DBackpropInput"
      op: "Conv2DBackpropInput"
      input: "gradients/conv4/convolution_grad/Shape"
      input: "conv4/weights/read"
      input: "gradients/AddN_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/conv4/convolution_grad/Shape_1"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\003\000\000\000\003\000\000\000\020\000\000\000 \000\000\000"
          }
        }
      }
    }
    node {
      name: "gradients/conv4/convolution_grad/Conv2DBackpropFilter"
      op: "Conv2DBackpropFilter"
      input: "conv8/Relu"
      input: "gradients/conv4/convolution_grad/Shape_1"
      input: "gradients/AddN_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/conv4/convolution_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/conv4/convolution_grad/Conv2DBackpropInput"
      input: "^gradients/conv4/convolution_grad/Conv2DBackpropFilter"
    }
    node {
      name: "gradients/conv4/convolution_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/conv4/convolution_grad/Conv2DBackpropInput"
      input: "^gradients/conv4/convolution_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv4/convolution_grad/Conv2DBackpropInput"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv4/convolution_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/conv4/convolution_grad/Conv2DBackpropFilter"
      input: "^gradients/conv4/convolution_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv4/convolution_grad/Conv2DBackpropFilter"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_13"
      op: "AddN"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_14"
      op: "AddN"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      input: "gradients/conv4/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv8/Relu_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/conv4/convolution_grad/tuple/control_dependency"
      input: "conv8/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/Merge_grad/cond_grad"
      op: "Switch"
      input: "gradients/conv8/Relu_grad/ReluGrad"
      input: "conv8/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv8/Relu_grad/ReluGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/Merge_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/conv8/BatchNorm/cond/Merge_grad/cond_grad"
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/Merge_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/conv8/BatchNorm/cond/Merge_grad/cond_grad"
      input: "^gradients/conv8/BatchNorm/cond/Merge_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv8/Relu_grad/ReluGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/conv8/BatchNorm/cond/Merge_grad/cond_grad:1"
      input: "^gradients/conv8/BatchNorm/cond/Merge_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv8/Relu_grad/ReluGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_40"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_41"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_42"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_43"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      op: "FusedBatchNormGrad"
      input: "gradients/conv8/BatchNorm/cond/Merge_grad/tuple/control_dependency"
      input: "conv8/BatchNorm/cond/FusedBatchNorm_1/Switch"
      input: "conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      input: "conv8/BatchNorm/cond/FusedBatchNorm_1:3"
      input: "conv8/BatchNorm/cond/FusedBatchNorm_1:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      input: "^gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
      input: "^gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
      op: "Identity"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
      input: "^gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_3"
      op: "Identity"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:3"
      input: "^gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_4"
      op: "Identity"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:4"
      input: "^gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_44"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_45"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_46"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_47"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      op: "FusedBatchNormGrad"
      input: "gradients/conv8/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
      input: "conv8/BatchNorm/cond/FusedBatchNorm/Switch:1"
      input: "conv8/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
      input: "conv8/BatchNorm/cond/FusedBatchNorm:3"
      input: "conv8/BatchNorm/cond/FusedBatchNorm:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
              }
            }
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      input: "^gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
      input: "^gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
      op: "Identity"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
      input: "^gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
      op: "Identity"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
      input: "^gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
      op: "Identity"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
      input: "^gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_30"
      op: "Switch"
      input: "conv8/convolution"
      input: "conv8/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_31"
      op: "Shape"
      input: "gradients/Switch_30:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_30/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_30"
      op: "Fill"
      input: "gradients/Shape_31"
      input: "gradients/zeros_30/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
      input: "gradients/zeros_30"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_31"
      op: "Switch"
      input: "conv8/BatchNorm/gamma/read"
      input: "conv8/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_32"
      op: "Shape"
      input: "gradients/Switch_31:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_31/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_31"
      op: "Fill"
      input: "gradients/Shape_32"
      input: "gradients/zeros_31/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
      input: "gradients/zeros_31"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_32"
      op: "Switch"
      input: "conv8/BatchNorm/beta/read"
      input: "conv8/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_33"
      op: "Shape"
      input: "gradients/Switch_32:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_32/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_32"
      op: "Fill"
      input: "gradients/Shape_33"
      input: "gradients/zeros_32/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
      input: "gradients/zeros_32"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_33"
      op: "Switch"
      input: "conv8/convolution"
      input: "conv8/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_34"
      op: "Shape"
      input: "gradients/Switch_33"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_33/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_33"
      op: "Fill"
      input: "gradients/Shape_34"
      input: "gradients/zeros_33/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
      input: "gradients/zeros_33"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_34"
      op: "Switch"
      input: "conv8/BatchNorm/gamma/read"
      input: "conv8/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_35"
      op: "Shape"
      input: "gradients/Switch_34"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_34/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_34"
      op: "Fill"
      input: "gradients/Shape_35"
      input: "gradients/zeros_34/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
      input: "gradients/zeros_34"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_35"
      op: "Switch"
      input: "conv8/BatchNorm/beta/read"
      input: "conv8/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_36"
      op: "Shape"
      input: "gradients/Switch_35"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_35/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_35"
      op: "Fill"
      input: "gradients/Shape_36"
      input: "gradients/zeros_35/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv8/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
      input: "gradients/zeros_35"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_15"
      op: "AddN"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv8/convolution_grad/Shape"
      op: "Shape"
      input: "conv16/Relu"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/conv8/convolution_grad/Conv2DBackpropInput"
      op: "Conv2DBackpropInput"
      input: "gradients/conv8/convolution_grad/Shape"
      input: "conv8/weights/read"
      input: "gradients/AddN_15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/conv8/convolution_grad/Shape_1"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\020\000\000\000"
          }
        }
      }
    }
    node {
      name: "gradients/conv8/convolution_grad/Conv2DBackpropFilter"
      op: "Conv2DBackpropFilter"
      input: "conv16/Relu"
      input: "gradients/conv8/convolution_grad/Shape_1"
      input: "gradients/AddN_15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/conv8/convolution_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/conv8/convolution_grad/Conv2DBackpropInput"
      input: "^gradients/conv8/convolution_grad/Conv2DBackpropFilter"
    }
    node {
      name: "gradients/conv8/convolution_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/conv8/convolution_grad/Conv2DBackpropInput"
      input: "^gradients/conv8/convolution_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv8/convolution_grad/Conv2DBackpropInput"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv8/convolution_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/conv8/convolution_grad/Conv2DBackpropFilter"
      input: "^gradients/conv8/convolution_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv8/convolution_grad/Conv2DBackpropFilter"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_16"
      op: "AddN"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_17"
      op: "AddN"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      input: "gradients/conv8/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv16/Relu_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/conv8/convolution_grad/tuple/control_dependency"
      input: "conv16/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/Merge_grad/cond_grad"
      op: "Switch"
      input: "gradients/conv16/Relu_grad/ReluGrad"
      input: "conv16/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv16/Relu_grad/ReluGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/Merge_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/conv16/BatchNorm/cond/Merge_grad/cond_grad"
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/Merge_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/conv16/BatchNorm/cond/Merge_grad/cond_grad"
      input: "^gradients/conv16/BatchNorm/cond/Merge_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv16/Relu_grad/ReluGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/conv16/BatchNorm/cond/Merge_grad/cond_grad:1"
      input: "^gradients/conv16/BatchNorm/cond/Merge_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv16/Relu_grad/ReluGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_48"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_49"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_50"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_51"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      op: "FusedBatchNormGrad"
      input: "gradients/conv16/BatchNorm/cond/Merge_grad/tuple/control_dependency"
      input: "conv16/BatchNorm/cond/FusedBatchNorm_1/Switch"
      input: "conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      input: "conv16/BatchNorm/cond/FusedBatchNorm_1:3"
      input: "conv16/BatchNorm/cond/FusedBatchNorm_1:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      input: "^gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
      input: "^gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
      op: "Identity"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
      input: "^gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_3"
      op: "Identity"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:3"
      input: "^gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_4"
      op: "Identity"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:4"
      input: "^gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_52"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_53"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_54"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_55"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      op: "FusedBatchNormGrad"
      input: "gradients/conv16/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
      input: "conv16/BatchNorm/cond/FusedBatchNorm/Switch:1"
      input: "conv16/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
      input: "conv16/BatchNorm/cond/FusedBatchNorm:3"
      input: "conv16/BatchNorm/cond/FusedBatchNorm:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
              }
            }
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      input: "^gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
      input: "^gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
      op: "Identity"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
      input: "^gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
      op: "Identity"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
      input: "^gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
      op: "Identity"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
      input: "^gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_36"
      op: "Switch"
      input: "conv16/convolution"
      input: "conv16/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_37"
      op: "Shape"
      input: "gradients/Switch_36:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_36/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_36"
      op: "Fill"
      input: "gradients/Shape_37"
      input: "gradients/zeros_36/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
      input: "gradients/zeros_36"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_37"
      op: "Switch"
      input: "conv16/BatchNorm/gamma/read"
      input: "conv16/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_38"
      op: "Shape"
      input: "gradients/Switch_37:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_37/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_37"
      op: "Fill"
      input: "gradients/Shape_38"
      input: "gradients/zeros_37/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
      input: "gradients/zeros_37"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_38"
      op: "Switch"
      input: "conv16/BatchNorm/beta/read"
      input: "conv16/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_39"
      op: "Shape"
      input: "gradients/Switch_38:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_38/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_38"
      op: "Fill"
      input: "gradients/Shape_39"
      input: "gradients/zeros_38/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
      input: "gradients/zeros_38"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_39"
      op: "Switch"
      input: "conv16/convolution"
      input: "conv16/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_40"
      op: "Shape"
      input: "gradients/Switch_39"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_39/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_39"
      op: "Fill"
      input: "gradients/Shape_40"
      input: "gradients/zeros_39/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
      input: "gradients/zeros_39"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_40"
      op: "Switch"
      input: "conv16/BatchNorm/gamma/read"
      input: "conv16/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_41"
      op: "Shape"
      input: "gradients/Switch_40"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_40/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_40"
      op: "Fill"
      input: "gradients/Shape_41"
      input: "gradients/zeros_40/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
      input: "gradients/zeros_40"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_41"
      op: "Switch"
      input: "conv16/BatchNorm/beta/read"
      input: "conv16/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_42"
      op: "Shape"
      input: "gradients/Switch_41"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_41/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_41"
      op: "Fill"
      input: "gradients/Shape_42"
      input: "gradients/zeros_41/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv16/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
      input: "gradients/zeros_41"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_18"
      op: "AddN"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv16/convolution_grad/Shape"
      op: "Shape"
      input: "conv32/Relu"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/conv16/convolution_grad/Conv2DBackpropInput"
      op: "Conv2DBackpropInput"
      input: "gradients/conv16/convolution_grad/Shape"
      input: "conv16/weights/read"
      input: "gradients/AddN_18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/conv16/convolution_grad/Shape_1"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\003\000\000\000\003\000\000\000\004\000\000\000\010\000\000\000"
          }
        }
      }
    }
    node {
      name: "gradients/conv16/convolution_grad/Conv2DBackpropFilter"
      op: "Conv2DBackpropFilter"
      input: "conv32/Relu"
      input: "gradients/conv16/convolution_grad/Shape_1"
      input: "gradients/AddN_18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/conv16/convolution_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/conv16/convolution_grad/Conv2DBackpropInput"
      input: "^gradients/conv16/convolution_grad/Conv2DBackpropFilter"
    }
    node {
      name: "gradients/conv16/convolution_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/conv16/convolution_grad/Conv2DBackpropInput"
      input: "^gradients/conv16/convolution_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv16/convolution_grad/Conv2DBackpropInput"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv16/convolution_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/conv16/convolution_grad/Conv2DBackpropFilter"
      input: "^gradients/conv16/convolution_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv16/convolution_grad/Conv2DBackpropFilter"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_19"
      op: "AddN"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_20"
      op: "AddN"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      input: "gradients/conv16/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv32/Relu_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/conv16/convolution_grad/tuple/control_dependency"
      input: "conv32/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/Merge_grad/cond_grad"
      op: "Switch"
      input: "gradients/conv32/Relu_grad/ReluGrad"
      input: "conv32/BatchNorm/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv32/Relu_grad/ReluGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/Merge_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/conv32/BatchNorm/cond/Merge_grad/cond_grad"
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/Merge_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/conv32/BatchNorm/cond/Merge_grad/cond_grad"
      input: "^gradients/conv32/BatchNorm/cond/Merge_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv32/Relu_grad/ReluGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/conv32/BatchNorm/cond/Merge_grad/cond_grad:1"
      input: "^gradients/conv32/BatchNorm/cond/Merge_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv32/Relu_grad/ReluGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_56"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_57"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_58"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_59"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      op: "FusedBatchNormGrad"
      input: "gradients/conv32/BatchNorm/cond/Merge_grad/tuple/control_dependency"
      input: "conv32/BatchNorm/cond/FusedBatchNorm_1/Switch"
      input: "conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
      input: "conv32/BatchNorm/cond/FusedBatchNorm_1:3"
      input: "conv32/BatchNorm/cond/FusedBatchNorm_1:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      input: "^gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
      input: "^gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
      op: "Identity"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
      input: "^gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_3"
      op: "Identity"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:3"
      input: "^gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_4"
      op: "Identity"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:4"
      input: "^gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_60"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_61"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_62"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_like_63"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      op: "FusedBatchNormGrad"
      input: "gradients/conv32/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
      input: "conv32/BatchNorm/cond/FusedBatchNorm/Switch:1"
      input: "conv32/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
      input: "conv32/BatchNorm/cond/FusedBatchNorm:3"
      input: "conv32/BatchNorm/cond/FusedBatchNorm:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
              }
            }
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      input: "^gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
      input: "^gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
      op: "Identity"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
      input: "^gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
      op: "Identity"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
      input: "^gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
      op: "Identity"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
      input: "^gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_42"
      op: "Switch"
      input: "conv32/convolution"
      input: "conv32/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_43"
      op: "Shape"
      input: "gradients/Switch_42:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_42/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_42"
      op: "Fill"
      input: "gradients/Shape_43"
      input: "gradients/zeros_42/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
      input: "gradients/zeros_42"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_43"
      op: "Switch"
      input: "conv32/BatchNorm/gamma/read"
      input: "conv32/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_44"
      op: "Shape"
      input: "gradients/Switch_43:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_43/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_43"
      op: "Fill"
      input: "gradients/Shape_44"
      input: "gradients/zeros_43/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
      input: "gradients/zeros_43"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_44"
      op: "Switch"
      input: "conv32/BatchNorm/beta/read"
      input: "conv32/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_45"
      op: "Shape"
      input: "gradients/Switch_44:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_44/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_44"
      op: "Fill"
      input: "gradients/Shape_45"
      input: "gradients/zeros_44/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
      input: "gradients/zeros_44"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_45"
      op: "Switch"
      input: "conv32/convolution"
      input: "conv32/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_46"
      op: "Shape"
      input: "gradients/Switch_45"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_45/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_45"
      op: "Fill"
      input: "gradients/Shape_46"
      input: "gradients/zeros_45/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
      input: "gradients/zeros_45"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_46"
      op: "Switch"
      input: "conv32/BatchNorm/gamma/read"
      input: "conv32/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_47"
      op: "Shape"
      input: "gradients/Switch_46"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_46/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_46"
      op: "Fill"
      input: "gradients/Shape_47"
      input: "gradients/zeros_46/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
      input: "gradients/zeros_46"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Switch_47"
      op: "Switch"
      input: "conv32/BatchNorm/beta/read"
      input: "conv32/BatchNorm/cond/pred_id"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape_48"
      op: "Shape"
      input: "gradients/Switch_47"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/zeros_47/Const"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "gradients/zeros_47"
      op: "Fill"
      input: "gradients/Shape_48"
      input: "gradients/zeros_47/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv32/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
      op: "Merge"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
      input: "gradients/zeros_47"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_21"
      op: "AddN"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
              dim {
                size: 32
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv32/convolution_grad/Shape"
      op: "Shape"
      input: "placeholder/images"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/conv32/convolution_grad/Conv2DBackpropInput"
      op: "Conv2DBackpropInput"
      input: "gradients/conv32/convolution_grad/Shape"
      input: "conv32/weights/read"
      input: "gradients/AddN_21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/conv32/convolution_grad/Shape_1"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\003\000\000\000\003\000\000\000\001\000\000\000\004\000\000\000"
          }
        }
      }
    }
    node {
      name: "gradients/conv32/convolution_grad/Conv2DBackpropFilter"
      op: "Conv2DBackpropFilter"
      input: "placeholder/images"
      input: "gradients/conv32/convolution_grad/Shape_1"
      input: "gradients/AddN_21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "padding"
        value {
          s: "SAME"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/conv32/convolution_grad/tuple/group_deps"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^gradients/conv32/convolution_grad/Conv2DBackpropInput"
      input: "^gradients/conv32/convolution_grad/Conv2DBackpropFilter"
    }
    node {
      name: "gradients/conv32/convolution_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/conv32/convolution_grad/Conv2DBackpropInput"
      input: "^gradients/conv32/convolution_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv32/convolution_grad/Conv2DBackpropInput"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 64
              }
              dim {
                size: 64
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/conv32/convolution_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/conv32/convolution_grad/Conv2DBackpropFilter"
      input: "^gradients/conv32/convolution_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv32/convolution_grad/Conv2DBackpropFilter"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_22"
      op: "AddN"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/AddN_23"
      op: "AddN"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      input: "gradients/conv32/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "beta1_power/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.8999999761581421
          }
        }
      }
    }
    node {
      name: "beta1_power"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "beta1_power/Assign"
      op: "Assign"
      input: "beta1_power"
      input: "beta1_power/initial_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "beta1_power/read"
      op: "Identity"
      input: "beta1_power"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "beta2_power/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9990000128746033
          }
        }
      }
    }
    node {
      name: "beta2_power"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "beta2_power/Assign"
      op: "Assign"
      input: "beta2_power"
      input: "beta2_power/initial_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "beta2_power/read"
      op: "Identity"
      input: "beta2_power"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "conv32/weights/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv32/weights/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 1
            }
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv32/weights/Adam/Assign"
      op: "Assign"
      input: "conv32/weights/Adam"
      input: "conv32/weights/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv32/weights/Adam/read"
      op: "Identity"
      input: "conv32/weights/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/weights/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv32/weights/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 1
            }
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv32/weights/Adam_1/Assign"
      op: "Assign"
      input: "conv32/weights/Adam_1"
      input: "conv32/weights/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv32/weights/Adam_1/read"
      op: "Identity"
      input: "conv32/weights/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/beta/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/beta/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv32/BatchNorm/beta/Adam/Assign"
      op: "Assign"
      input: "conv32/BatchNorm/beta/Adam"
      input: "conv32/BatchNorm/beta/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv32/BatchNorm/beta/Adam/read"
      op: "Identity"
      input: "conv32/BatchNorm/beta/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/beta/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/beta/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv32/BatchNorm/beta/Adam_1/Assign"
      op: "Assign"
      input: "conv32/BatchNorm/beta/Adam_1"
      input: "conv32/BatchNorm/beta/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv32/BatchNorm/beta/Adam_1/read"
      op: "Identity"
      input: "conv32/BatchNorm/beta/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/gamma/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/gamma/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv32/BatchNorm/gamma/Adam/Assign"
      op: "Assign"
      input: "conv32/BatchNorm/gamma/Adam"
      input: "conv32/BatchNorm/gamma/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv32/BatchNorm/gamma/Adam/read"
      op: "Identity"
      input: "conv32/BatchNorm/gamma/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/gamma/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv32/BatchNorm/gamma/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv32/BatchNorm/gamma/Adam_1/Assign"
      op: "Assign"
      input: "conv32/BatchNorm/gamma/Adam_1"
      input: "conv32/BatchNorm/gamma/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv32/BatchNorm/gamma/Adam_1/read"
      op: "Identity"
      input: "conv32/BatchNorm/gamma/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/weights/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv16/weights/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 4
            }
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv16/weights/Adam/Assign"
      op: "Assign"
      input: "conv16/weights/Adam"
      input: "conv16/weights/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv16/weights/Adam/read"
      op: "Identity"
      input: "conv16/weights/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/weights/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv16/weights/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 4
            }
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv16/weights/Adam_1/Assign"
      op: "Assign"
      input: "conv16/weights/Adam_1"
      input: "conv16/weights/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv16/weights/Adam_1/read"
      op: "Identity"
      input: "conv16/weights/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/beta/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/beta/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv16/BatchNorm/beta/Adam/Assign"
      op: "Assign"
      input: "conv16/BatchNorm/beta/Adam"
      input: "conv16/BatchNorm/beta/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv16/BatchNorm/beta/Adam/read"
      op: "Identity"
      input: "conv16/BatchNorm/beta/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/beta/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/beta/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv16/BatchNorm/beta/Adam_1/Assign"
      op: "Assign"
      input: "conv16/BatchNorm/beta/Adam_1"
      input: "conv16/BatchNorm/beta/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv16/BatchNorm/beta/Adam_1/read"
      op: "Identity"
      input: "conv16/BatchNorm/beta/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/gamma/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/gamma/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv16/BatchNorm/gamma/Adam/Assign"
      op: "Assign"
      input: "conv16/BatchNorm/gamma/Adam"
      input: "conv16/BatchNorm/gamma/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv16/BatchNorm/gamma/Adam/read"
      op: "Identity"
      input: "conv16/BatchNorm/gamma/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/gamma/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv16/BatchNorm/gamma/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv16/BatchNorm/gamma/Adam_1/Assign"
      op: "Assign"
      input: "conv16/BatchNorm/gamma/Adam_1"
      input: "conv16/BatchNorm/gamma/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv16/BatchNorm/gamma/Adam_1/read"
      op: "Identity"
      input: "conv16/BatchNorm/gamma/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/weights/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv8/weights/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 8
            }
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv8/weights/Adam/Assign"
      op: "Assign"
      input: "conv8/weights/Adam"
      input: "conv8/weights/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv8/weights/Adam/read"
      op: "Identity"
      input: "conv8/weights/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/weights/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv8/weights/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 8
            }
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv8/weights/Adam_1/Assign"
      op: "Assign"
      input: "conv8/weights/Adam_1"
      input: "conv8/weights/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv8/weights/Adam_1/read"
      op: "Identity"
      input: "conv8/weights/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/beta/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/beta/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv8/BatchNorm/beta/Adam/Assign"
      op: "Assign"
      input: "conv8/BatchNorm/beta/Adam"
      input: "conv8/BatchNorm/beta/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv8/BatchNorm/beta/Adam/read"
      op: "Identity"
      input: "conv8/BatchNorm/beta/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/beta/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/beta/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv8/BatchNorm/beta/Adam_1/Assign"
      op: "Assign"
      input: "conv8/BatchNorm/beta/Adam_1"
      input: "conv8/BatchNorm/beta/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv8/BatchNorm/beta/Adam_1/read"
      op: "Identity"
      input: "conv8/BatchNorm/beta/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/gamma/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/gamma/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv8/BatchNorm/gamma/Adam/Assign"
      op: "Assign"
      input: "conv8/BatchNorm/gamma/Adam"
      input: "conv8/BatchNorm/gamma/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv8/BatchNorm/gamma/Adam/read"
      op: "Identity"
      input: "conv8/BatchNorm/gamma/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/gamma/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv8/BatchNorm/gamma/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv8/BatchNorm/gamma/Adam_1/Assign"
      op: "Assign"
      input: "conv8/BatchNorm/gamma/Adam_1"
      input: "conv8/BatchNorm/gamma/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv8/BatchNorm/gamma/Adam_1/read"
      op: "Identity"
      input: "conv8/BatchNorm/gamma/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/weights/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv4/weights/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 16
            }
            dim {
              size: 32
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv4/weights/Adam/Assign"
      op: "Assign"
      input: "conv4/weights/Adam"
      input: "conv4/weights/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv4/weights/Adam/read"
      op: "Identity"
      input: "conv4/weights/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/weights/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv4/weights/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 16
            }
            dim {
              size: 32
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv4/weights/Adam_1/Assign"
      op: "Assign"
      input: "conv4/weights/Adam_1"
      input: "conv4/weights/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv4/weights/Adam_1/read"
      op: "Identity"
      input: "conv4/weights/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/beta/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 32
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/beta/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 32
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv4/BatchNorm/beta/Adam/Assign"
      op: "Assign"
      input: "conv4/BatchNorm/beta/Adam"
      input: "conv4/BatchNorm/beta/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv4/BatchNorm/beta/Adam/read"
      op: "Identity"
      input: "conv4/BatchNorm/beta/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/beta/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 32
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/beta/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 32
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv4/BatchNorm/beta/Adam_1/Assign"
      op: "Assign"
      input: "conv4/BatchNorm/beta/Adam_1"
      input: "conv4/BatchNorm/beta/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv4/BatchNorm/beta/Adam_1/read"
      op: "Identity"
      input: "conv4/BatchNorm/beta/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/gamma/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 32
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/gamma/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 32
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv4/BatchNorm/gamma/Adam/Assign"
      op: "Assign"
      input: "conv4/BatchNorm/gamma/Adam"
      input: "conv4/BatchNorm/gamma/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv4/BatchNorm/gamma/Adam/read"
      op: "Identity"
      input: "conv4/BatchNorm/gamma/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/gamma/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 32
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "conv4/BatchNorm/gamma/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 32
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "conv4/BatchNorm/gamma/Adam_1/Assign"
      op: "Assign"
      input: "conv4/BatchNorm/gamma/Adam_1"
      input: "conv4/BatchNorm/gamma/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "conv4/BatchNorm/gamma/Adam_1/read"
      op: "Identity"
      input: "conv4/BatchNorm/gamma/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/weights/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "fc256/weights/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 512
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fc256/weights/Adam/Assign"
      op: "Assign"
      input: "fc256/weights/Adam"
      input: "fc256/weights/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fc256/weights/Adam/read"
      op: "Identity"
      input: "fc256/weights/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/weights/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "fc256/weights/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 512
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fc256/weights/Adam_1/Assign"
      op: "Assign"
      input: "fc256/weights/Adam_1"
      input: "fc256/weights/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fc256/weights/Adam_1/read"
      op: "Identity"
      input: "fc256/weights/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/beta/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/beta/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fc256/BatchNorm/beta/Adam/Assign"
      op: "Assign"
      input: "fc256/BatchNorm/beta/Adam"
      input: "fc256/BatchNorm/beta/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fc256/BatchNorm/beta/Adam/read"
      op: "Identity"
      input: "fc256/BatchNorm/beta/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/beta/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/beta/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fc256/BatchNorm/beta/Adam_1/Assign"
      op: "Assign"
      input: "fc256/BatchNorm/beta/Adam_1"
      input: "fc256/BatchNorm/beta/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fc256/BatchNorm/beta/Adam_1/read"
      op: "Identity"
      input: "fc256/BatchNorm/beta/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/gamma/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/gamma/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fc256/BatchNorm/gamma/Adam/Assign"
      op: "Assign"
      input: "fc256/BatchNorm/gamma/Adam"
      input: "fc256/BatchNorm/gamma/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fc256/BatchNorm/gamma/Adam/read"
      op: "Identity"
      input: "fc256/BatchNorm/gamma/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/gamma/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "fc256/BatchNorm/gamma/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "fc256/BatchNorm/gamma/Adam_1/Assign"
      op: "Assign"
      input: "fc256/BatchNorm/gamma/Adam_1"
      input: "fc256/BatchNorm/gamma/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "fc256/BatchNorm/gamma/Adam_1/read"
      op: "Identity"
      input: "fc256/BatchNorm/gamma/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/weights/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv8/weights/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 16
            }
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv8/weights/Adam/Assign"
      op: "Assign"
      input: "deconv8/weights/Adam"
      input: "deconv8/weights/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv8/weights/Adam/read"
      op: "Identity"
      input: "deconv8/weights/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/weights/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv8/weights/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 16
            }
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv8/weights/Adam_1/Assign"
      op: "Assign"
      input: "deconv8/weights/Adam_1"
      input: "deconv8/weights/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv8/weights/Adam_1/read"
      op: "Identity"
      input: "deconv8/weights/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/beta/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/beta/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/beta/Adam/Assign"
      op: "Assign"
      input: "deconv8/BatchNorm/beta/Adam"
      input: "deconv8/BatchNorm/beta/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/beta/Adam/read"
      op: "Identity"
      input: "deconv8/BatchNorm/beta/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/beta/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/beta/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/beta/Adam_1/Assign"
      op: "Assign"
      input: "deconv8/BatchNorm/beta/Adam_1"
      input: "deconv8/BatchNorm/beta/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/beta/Adam_1/read"
      op: "Identity"
      input: "deconv8/BatchNorm/beta/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/gamma/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/gamma/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/gamma/Adam/Assign"
      op: "Assign"
      input: "deconv8/BatchNorm/gamma/Adam"
      input: "deconv8/BatchNorm/gamma/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/gamma/Adam/read"
      op: "Identity"
      input: "deconv8/BatchNorm/gamma/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/gamma/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/gamma/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/gamma/Adam_1/Assign"
      op: "Assign"
      input: "deconv8/BatchNorm/gamma/Adam_1"
      input: "deconv8/BatchNorm/gamma/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv8/BatchNorm/gamma/Adam_1/read"
      op: "Identity"
      input: "deconv8/BatchNorm/gamma/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/weights/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv16/weights/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 8
            }
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv16/weights/Adam/Assign"
      op: "Assign"
      input: "deconv16/weights/Adam"
      input: "deconv16/weights/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv16/weights/Adam/read"
      op: "Identity"
      input: "deconv16/weights/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/weights/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv16/weights/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 8
            }
            dim {
              size: 16
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv16/weights/Adam_1/Assign"
      op: "Assign"
      input: "deconv16/weights/Adam_1"
      input: "deconv16/weights/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv16/weights/Adam_1/read"
      op: "Identity"
      input: "deconv16/weights/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/beta/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/beta/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/beta/Adam/Assign"
      op: "Assign"
      input: "deconv16/BatchNorm/beta/Adam"
      input: "deconv16/BatchNorm/beta/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/beta/Adam/read"
      op: "Identity"
      input: "deconv16/BatchNorm/beta/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/beta/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/beta/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/beta/Adam_1/Assign"
      op: "Assign"
      input: "deconv16/BatchNorm/beta/Adam_1"
      input: "deconv16/BatchNorm/beta/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/beta/Adam_1/read"
      op: "Identity"
      input: "deconv16/BatchNorm/beta/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/gamma/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/gamma/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/gamma/Adam/Assign"
      op: "Assign"
      input: "deconv16/BatchNorm/gamma/Adam"
      input: "deconv16/BatchNorm/gamma/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/gamma/Adam/read"
      op: "Identity"
      input: "deconv16/BatchNorm/gamma/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/gamma/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/gamma/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/gamma/Adam_1/Assign"
      op: "Assign"
      input: "deconv16/BatchNorm/gamma/Adam_1"
      input: "deconv16/BatchNorm/gamma/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv16/BatchNorm/gamma/Adam_1/read"
      op: "Identity"
      input: "deconv16/BatchNorm/gamma/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/weights/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv32/weights/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 4
            }
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv32/weights/Adam/Assign"
      op: "Assign"
      input: "deconv32/weights/Adam"
      input: "deconv32/weights/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv32/weights/Adam/read"
      op: "Identity"
      input: "deconv32/weights/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/weights/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv32/weights/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 4
            }
            dim {
              size: 8
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv32/weights/Adam_1/Assign"
      op: "Assign"
      input: "deconv32/weights/Adam_1"
      input: "deconv32/weights/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv32/weights/Adam_1/read"
      op: "Identity"
      input: "deconv32/weights/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/beta/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/beta/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/beta/Adam/Assign"
      op: "Assign"
      input: "deconv32/BatchNorm/beta/Adam"
      input: "deconv32/BatchNorm/beta/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/beta/Adam/read"
      op: "Identity"
      input: "deconv32/BatchNorm/beta/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/beta/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/beta/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/beta/Adam_1/Assign"
      op: "Assign"
      input: "deconv32/BatchNorm/beta/Adam_1"
      input: "deconv32/BatchNorm/beta/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/beta/Adam_1/read"
      op: "Identity"
      input: "deconv32/BatchNorm/beta/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/gamma/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/gamma/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/gamma/Adam/Assign"
      op: "Assign"
      input: "deconv32/BatchNorm/gamma/Adam"
      input: "deconv32/BatchNorm/gamma/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/gamma/Adam/read"
      op: "Identity"
      input: "deconv32/BatchNorm/gamma/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/gamma/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/gamma/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/gamma/Adam_1/Assign"
      op: "Assign"
      input: "deconv32/BatchNorm/gamma/Adam_1"
      input: "deconv32/BatchNorm/gamma/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv32/BatchNorm/gamma/Adam_1/read"
      op: "Identity"
      input: "deconv32/BatchNorm/gamma/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv64/weights/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv64/weights/Adam"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 1
            }
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv64/weights/Adam/Assign"
      op: "Assign"
      input: "deconv64/weights/Adam"
      input: "deconv64/weights/Adam/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv64/weights/Adam/read"
      op: "Identity"
      input: "deconv64/weights/Adam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "deconv64/weights/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "deconv64/weights/Adam_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 3
            }
            dim {
              size: 1
            }
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "deconv64/weights/Adam_1/Assign"
      op: "Assign"
      input: "deconv64/weights/Adam_1"
      input: "deconv64/weights/Adam_1/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "deconv64/weights/Adam_1/read"
      op: "Identity"
      input: "deconv64/weights/Adam_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "Adam/learning_rate"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0010000000474974513
          }
        }
      }
    }
    node {
      name: "Adam/beta1"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.8999999761581421
          }
        }
      }
    }
    node {
      name: "Adam/beta2"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9990000128746033
          }
        }
      }
    }
    node {
      name: "Adam/epsilon"
      op: "Const"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0000000116860974e-07
          }
        }
      }
    }
    node {
      name: "Adam/update_conv32/weights/ApplyAdam"
      op: "ApplyAdam"
      input: "conv32/weights"
      input: "conv32/weights/Adam"
      input: "conv32/weights/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/conv32/convolution_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_conv32/BatchNorm/beta/ApplyAdam"
      op: "ApplyAdam"
      input: "conv32/BatchNorm/beta"
      input: "conv32/BatchNorm/beta/Adam"
      input: "conv32/BatchNorm/beta/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/AddN_23"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_conv32/BatchNorm/gamma/ApplyAdam"
      op: "ApplyAdam"
      input: "conv32/BatchNorm/gamma"
      input: "conv32/BatchNorm/gamma/Adam"
      input: "conv32/BatchNorm/gamma/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/AddN_22"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_conv16/weights/ApplyAdam"
      op: "ApplyAdam"
      input: "conv16/weights"
      input: "conv16/weights/Adam"
      input: "conv16/weights/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/conv16/convolution_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_conv16/BatchNorm/beta/ApplyAdam"
      op: "ApplyAdam"
      input: "conv16/BatchNorm/beta"
      input: "conv16/BatchNorm/beta/Adam"
      input: "conv16/BatchNorm/beta/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/AddN_20"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_conv16/BatchNorm/gamma/ApplyAdam"
      op: "ApplyAdam"
      input: "conv16/BatchNorm/gamma"
      input: "conv16/BatchNorm/gamma/Adam"
      input: "conv16/BatchNorm/gamma/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/AddN_19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_conv8/weights/ApplyAdam"
      op: "ApplyAdam"
      input: "conv8/weights"
      input: "conv8/weights/Adam"
      input: "conv8/weights/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/conv8/convolution_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_conv8/BatchNorm/beta/ApplyAdam"
      op: "ApplyAdam"
      input: "conv8/BatchNorm/beta"
      input: "conv8/BatchNorm/beta/Adam"
      input: "conv8/BatchNorm/beta/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/AddN_17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_conv8/BatchNorm/gamma/ApplyAdam"
      op: "ApplyAdam"
      input: "conv8/BatchNorm/gamma"
      input: "conv8/BatchNorm/gamma/Adam"
      input: "conv8/BatchNorm/gamma/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/AddN_16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_conv4/weights/ApplyAdam"
      op: "ApplyAdam"
      input: "conv4/weights"
      input: "conv4/weights/Adam"
      input: "conv4/weights/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/conv4/convolution_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_conv4/BatchNorm/beta/ApplyAdam"
      op: "ApplyAdam"
      input: "conv4/BatchNorm/beta"
      input: "conv4/BatchNorm/beta/Adam"
      input: "conv4/BatchNorm/beta/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/AddN_14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_conv4/BatchNorm/gamma/ApplyAdam"
      op: "ApplyAdam"
      input: "conv4/BatchNorm/gamma"
      input: "conv4/BatchNorm/gamma/Adam"
      input: "conv4/BatchNorm/gamma/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/AddN_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_fc256/weights/ApplyAdam"
      op: "ApplyAdam"
      input: "fc256/weights"
      input: "fc256/weights/Adam"
      input: "fc256/weights/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/fc256/MatMul_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_fc256/BatchNorm/beta/ApplyAdam"
      op: "ApplyAdam"
      input: "fc256/BatchNorm/beta"
      input: "fc256/BatchNorm/beta/Adam"
      input: "fc256/BatchNorm/beta/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/AddN_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_fc256/BatchNorm/gamma/ApplyAdam"
      op: "ApplyAdam"
      input: "fc256/BatchNorm/gamma"
      input: "fc256/BatchNorm/gamma/Adam"
      input: "fc256/BatchNorm/gamma/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/AddN_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_deconv8/weights/ApplyAdam"
      op: "ApplyAdam"
      input: "deconv8/weights"
      input: "deconv8/weights/Adam"
      input: "deconv8/weights/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/deconv8/conv2d_transpose_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_deconv8/BatchNorm/beta/ApplyAdam"
      op: "ApplyAdam"
      input: "deconv8/BatchNorm/beta"
      input: "deconv8/BatchNorm/beta/Adam"
      input: "deconv8/BatchNorm/beta/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/AddN_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_deconv8/BatchNorm/gamma/ApplyAdam"
      op: "ApplyAdam"
      input: "deconv8/BatchNorm/gamma"
      input: "deconv8/BatchNorm/gamma/Adam"
      input: "deconv8/BatchNorm/gamma/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/AddN_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_deconv16/weights/ApplyAdam"
      op: "ApplyAdam"
      input: "deconv16/weights"
      input: "deconv16/weights/Adam"
      input: "deconv16/weights/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/deconv16/conv2d_transpose_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_deconv16/BatchNorm/beta/ApplyAdam"
      op: "ApplyAdam"
      input: "deconv16/BatchNorm/beta"
      input: "deconv16/BatchNorm/beta/Adam"
      input: "deconv16/BatchNorm/beta/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/AddN_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_deconv16/BatchNorm/gamma/ApplyAdam"
      op: "ApplyAdam"
      input: "deconv16/BatchNorm/gamma"
      input: "deconv16/BatchNorm/gamma/Adam"
      input: "deconv16/BatchNorm/gamma/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/AddN_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_deconv32/weights/ApplyAdam"
      op: "ApplyAdam"
      input: "deconv32/weights"
      input: "deconv32/weights/Adam"
      input: "deconv32/weights/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/deconv32/conv2d_transpose_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_deconv32/BatchNorm/beta/ApplyAdam"
      op: "ApplyAdam"
      input: "deconv32/BatchNorm/beta"
      input: "deconv32/BatchNorm/beta/Adam"
      input: "deconv32/BatchNorm/beta/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/AddN_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_deconv32/BatchNorm/gamma/ApplyAdam"
      op: "ApplyAdam"
      input: "deconv32/BatchNorm/gamma"
      input: "deconv32/BatchNorm/gamma/Adam"
      input: "deconv32/BatchNorm/gamma/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/AddN_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_deconv64/weights/ApplyAdam"
      op: "ApplyAdam"
      input: "deconv64/weights"
      input: "deconv64/weights/Adam"
      input: "deconv64/weights/Adam_1"
      input: "beta1_power/read"
      input: "beta2_power/read"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/deconv64/conv2d_transpose_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/mul"
      op: "Mul"
      input: "beta1_power/read"
      input: "Adam/beta1"
      input: "^Adam/update_conv32/weights/ApplyAdam"
      input: "^Adam/update_conv32/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_conv32/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_conv16/weights/ApplyAdam"
      input: "^Adam/update_conv16/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_conv16/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_conv8/weights/ApplyAdam"
      input: "^Adam/update_conv8/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_conv8/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_conv4/weights/ApplyAdam"
      input: "^Adam/update_conv4/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_conv4/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_fc256/weights/ApplyAdam"
      input: "^Adam/update_fc256/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_fc256/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_deconv8/weights/ApplyAdam"
      input: "^Adam/update_deconv8/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_deconv8/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_deconv16/weights/ApplyAdam"
      input: "^Adam/update_deconv16/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_deconv16/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_deconv32/weights/ApplyAdam"
      input: "^Adam/update_deconv32/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_deconv32/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_deconv64/weights/ApplyAdam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "Adam/Assign"
      op: "Assign"
      input: "beta1_power"
      input: "Adam/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "Adam/mul_1"
      op: "Mul"
      input: "beta2_power/read"
      input: "Adam/beta2"
      input: "^Adam/update_conv32/weights/ApplyAdam"
      input: "^Adam/update_conv32/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_conv32/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_conv16/weights/ApplyAdam"
      input: "^Adam/update_conv16/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_conv16/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_conv8/weights/ApplyAdam"
      input: "^Adam/update_conv8/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_conv8/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_conv4/weights/ApplyAdam"
      input: "^Adam/update_conv4/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_conv4/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_fc256/weights/ApplyAdam"
      input: "^Adam/update_fc256/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_fc256/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_deconv8/weights/ApplyAdam"
      input: "^Adam/update_deconv8/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_deconv8/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_deconv16/weights/ApplyAdam"
      input: "^Adam/update_deconv16/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_deconv16/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_deconv32/weights/ApplyAdam"
      input: "^Adam/update_deconv32/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_deconv32/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_deconv64/weights/ApplyAdam"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "Adam/Assign_1"
      op: "Assign"
      input: "beta2_power"
      input: "Adam/mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "Adam"
      op: "NoOp"
      input: "^conv32/BatchNorm/cond_1/Merge"
      input: "^conv32/BatchNorm/cond_1/Merge_1"
      input: "^conv16/BatchNorm/cond_1/Merge"
      input: "^conv16/BatchNorm/cond_1/Merge_1"
      input: "^conv8/BatchNorm/cond_1/Merge"
      input: "^conv8/BatchNorm/cond_1/Merge_1"
      input: "^conv4/BatchNorm/cond_1/Merge"
      input: "^conv4/BatchNorm/cond_1/Merge_1"
      input: "^fc256/BatchNorm/cond_1/Merge"
      input: "^fc256/BatchNorm/cond_1/Merge_1"
      input: "^deconv8/BatchNorm/cond_1/Merge"
      input: "^deconv8/BatchNorm/cond_1/Merge_1"
      input: "^deconv16/BatchNorm/cond_1/Merge"
      input: "^deconv16/BatchNorm/cond_1/Merge_1"
      input: "^deconv32/BatchNorm/cond_1/Merge"
      input: "^deconv32/BatchNorm/cond_1/Merge_1"
      input: "^Adam/update_conv32/weights/ApplyAdam"
      input: "^Adam/update_conv32/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_conv32/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_conv16/weights/ApplyAdam"
      input: "^Adam/update_conv16/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_conv16/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_conv8/weights/ApplyAdam"
      input: "^Adam/update_conv8/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_conv8/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_conv4/weights/ApplyAdam"
      input: "^Adam/update_conv4/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_conv4/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_fc256/weights/ApplyAdam"
      input: "^Adam/update_fc256/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_fc256/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_deconv8/weights/ApplyAdam"
      input: "^Adam/update_deconv8/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_deconv8/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_deconv16/weights/ApplyAdam"
      input: "^Adam/update_deconv16/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_deconv16/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_deconv32/weights/ApplyAdam"
      input: "^Adam/update_deconv32/BatchNorm/beta/ApplyAdam"
      input: "^Adam/update_deconv32/BatchNorm/gamma/ApplyAdam"
      input: "^Adam/update_deconv64/weights/ApplyAdam"
      input: "^Adam/Assign"
      input: "^Adam/Assign_1"
    }
    node {
      name: "train_op/NoOp"
      op: "NoOp"
      input: "^Adam"
    }
    node {
      name: "train_op/NoOp_1"
      op: "NoOp"
      input: "^increment_global_step"
    }
    node {
      name: "train_op"
      op: "NoOp"
      input: "^train_op/NoOp"
      input: "^train_op/NoOp_1"
    }
    node {
      name: "saver/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "saver/SaveV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 95
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 95
              }
            }
            string_val: "beta1_power"
            string_val: "beta2_power"
            string_val: "conv16/BatchNorm/beta"
            string_val: "conv16/BatchNorm/beta/Adam"
            string_val: "conv16/BatchNorm/beta/Adam_1"
            string_val: "conv16/BatchNorm/gamma"
            string_val: "conv16/BatchNorm/gamma/Adam"
            string_val: "conv16/BatchNorm/gamma/Adam_1"
            string_val: "conv16/BatchNorm/moving_mean"
            string_val: "conv16/BatchNorm/moving_variance"
            string_val: "conv16/weights"
            string_val: "conv16/weights/Adam"
            string_val: "conv16/weights/Adam_1"
            string_val: "conv32/BatchNorm/beta"
            string_val: "conv32/BatchNorm/beta/Adam"
            string_val: "conv32/BatchNorm/beta/Adam_1"
            string_val: "conv32/BatchNorm/gamma"
            string_val: "conv32/BatchNorm/gamma/Adam"
            string_val: "conv32/BatchNorm/gamma/Adam_1"
            string_val: "conv32/BatchNorm/moving_mean"
            string_val: "conv32/BatchNorm/moving_variance"
            string_val: "conv32/weights"
            string_val: "conv32/weights/Adam"
            string_val: "conv32/weights/Adam_1"
            string_val: "conv4/BatchNorm/beta"
            string_val: "conv4/BatchNorm/beta/Adam"
            string_val: "conv4/BatchNorm/beta/Adam_1"
            string_val: "conv4/BatchNorm/gamma"
            string_val: "conv4/BatchNorm/gamma/Adam"
            string_val: "conv4/BatchNorm/gamma/Adam_1"
            string_val: "conv4/BatchNorm/moving_mean"
            string_val: "conv4/BatchNorm/moving_variance"
            string_val: "conv4/weights"
            string_val: "conv4/weights/Adam"
            string_val: "conv4/weights/Adam_1"
            string_val: "conv8/BatchNorm/beta"
            string_val: "conv8/BatchNorm/beta/Adam"
            string_val: "conv8/BatchNorm/beta/Adam_1"
            string_val: "conv8/BatchNorm/gamma"
            string_val: "conv8/BatchNorm/gamma/Adam"
            string_val: "conv8/BatchNorm/gamma/Adam_1"
            string_val: "conv8/BatchNorm/moving_mean"
            string_val: "conv8/BatchNorm/moving_variance"
            string_val: "conv8/weights"
            string_val: "conv8/weights/Adam"
            string_val: "conv8/weights/Adam_1"
            string_val: "deconv16/BatchNorm/beta"
            string_val: "deconv16/BatchNorm/beta/Adam"
            string_val: "deconv16/BatchNorm/beta/Adam_1"
            string_val: "deconv16/BatchNorm/gamma"
            string_val: "deconv16/BatchNorm/gamma/Adam"
            string_val: "deconv16/BatchNorm/gamma/Adam_1"
            string_val: "deconv16/BatchNorm/moving_mean"
            string_val: "deconv16/BatchNorm/moving_variance"
            string_val: "deconv16/weights"
            string_val: "deconv16/weights/Adam"
            string_val: "deconv16/weights/Adam_1"
            string_val: "deconv32/BatchNorm/beta"
            string_val: "deconv32/BatchNorm/beta/Adam"
            string_val: "deconv32/BatchNorm/beta/Adam_1"
            string_val: "deconv32/BatchNorm/gamma"
            string_val: "deconv32/BatchNorm/gamma/Adam"
            string_val: "deconv32/BatchNorm/gamma/Adam_1"
            string_val: "deconv32/BatchNorm/moving_mean"
            string_val: "deconv32/BatchNorm/moving_variance"
            string_val: "deconv32/weights"
            string_val: "deconv32/weights/Adam"
            string_val: "deconv32/weights/Adam_1"
            string_val: "deconv64/weights"
            string_val: "deconv64/weights/Adam"
            string_val: "deconv64/weights/Adam_1"
            string_val: "deconv8/BatchNorm/beta"
            string_val: "deconv8/BatchNorm/beta/Adam"
            string_val: "deconv8/BatchNorm/beta/Adam_1"
            string_val: "deconv8/BatchNorm/gamma"
            string_val: "deconv8/BatchNorm/gamma/Adam"
            string_val: "deconv8/BatchNorm/gamma/Adam_1"
            string_val: "deconv8/BatchNorm/moving_mean"
            string_val: "deconv8/BatchNorm/moving_variance"
            string_val: "deconv8/weights"
            string_val: "deconv8/weights/Adam"
            string_val: "deconv8/weights/Adam_1"
            string_val: "epoch"
            string_val: "fc256/BatchNorm/beta"
            string_val: "fc256/BatchNorm/beta/Adam"
            string_val: "fc256/BatchNorm/beta/Adam_1"
            string_val: "fc256/BatchNorm/gamma"
            string_val: "fc256/BatchNorm/gamma/Adam"
            string_val: "fc256/BatchNorm/gamma/Adam_1"
            string_val: "fc256/BatchNorm/moving_mean"
            string_val: "fc256/BatchNorm/moving_variance"
            string_val: "fc256/weights"
            string_val: "fc256/weights/Adam"
            string_val: "fc256/weights/Adam_1"
            string_val: "global_step"
          }
        }
      }
    }
    node {
      name: "saver/SaveV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 95
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 95
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/SaveV2"
      op: "SaveV2"
      input: "saver/Const"
      input: "saver/SaveV2/tensor_names"
      input: "saver/SaveV2/shape_and_slices"
      input: "beta1_power"
      input: "beta2_power"
      input: "conv16/BatchNorm/beta"
      input: "conv16/BatchNorm/beta/Adam"
      input: "conv16/BatchNorm/beta/Adam_1"
      input: "conv16/BatchNorm/gamma"
      input: "conv16/BatchNorm/gamma/Adam"
      input: "conv16/BatchNorm/gamma/Adam_1"
      input: "conv16/BatchNorm/moving_mean"
      input: "conv16/BatchNorm/moving_variance"
      input: "conv16/weights"
      input: "conv16/weights/Adam"
      input: "conv16/weights/Adam_1"
      input: "conv32/BatchNorm/beta"
      input: "conv32/BatchNorm/beta/Adam"
      input: "conv32/BatchNorm/beta/Adam_1"
      input: "conv32/BatchNorm/gamma"
      input: "conv32/BatchNorm/gamma/Adam"
      input: "conv32/BatchNorm/gamma/Adam_1"
      input: "conv32/BatchNorm/moving_mean"
      input: "conv32/BatchNorm/moving_variance"
      input: "conv32/weights"
      input: "conv32/weights/Adam"
      input: "conv32/weights/Adam_1"
      input: "conv4/BatchNorm/beta"
      input: "conv4/BatchNorm/beta/Adam"
      input: "conv4/BatchNorm/beta/Adam_1"
      input: "conv4/BatchNorm/gamma"
      input: "conv4/BatchNorm/gamma/Adam"
      input: "conv4/BatchNorm/gamma/Adam_1"
      input: "conv4/BatchNorm/moving_mean"
      input: "conv4/BatchNorm/moving_variance"
      input: "conv4/weights"
      input: "conv4/weights/Adam"
      input: "conv4/weights/Adam_1"
      input: "conv8/BatchNorm/beta"
      input: "conv8/BatchNorm/beta/Adam"
      input: "conv8/BatchNorm/beta/Adam_1"
      input: "conv8/BatchNorm/gamma"
      input: "conv8/BatchNorm/gamma/Adam"
      input: "conv8/BatchNorm/gamma/Adam_1"
      input: "conv8/BatchNorm/moving_mean"
      input: "conv8/BatchNorm/moving_variance"
      input: "conv8/weights"
      input: "conv8/weights/Adam"
      input: "conv8/weights/Adam_1"
      input: "deconv16/BatchNorm/beta"
      input: "deconv16/BatchNorm/beta/Adam"
      input: "deconv16/BatchNorm/beta/Adam_1"
      input: "deconv16/BatchNorm/gamma"
      input: "deconv16/BatchNorm/gamma/Adam"
      input: "deconv16/BatchNorm/gamma/Adam_1"
      input: "deconv16/BatchNorm/moving_mean"
      input: "deconv16/BatchNorm/moving_variance"
      input: "deconv16/weights"
      input: "deconv16/weights/Adam"
      input: "deconv16/weights/Adam_1"
      input: "deconv32/BatchNorm/beta"
      input: "deconv32/BatchNorm/beta/Adam"
      input: "deconv32/BatchNorm/beta/Adam_1"
      input: "deconv32/BatchNorm/gamma"
      input: "deconv32/BatchNorm/gamma/Adam"
      input: "deconv32/BatchNorm/gamma/Adam_1"
      input: "deconv32/BatchNorm/moving_mean"
      input: "deconv32/BatchNorm/moving_variance"
      input: "deconv32/weights"
      input: "deconv32/weights/Adam"
      input: "deconv32/weights/Adam_1"
      input: "deconv64/weights"
      input: "deconv64/weights/Adam"
      input: "deconv64/weights/Adam_1"
      input: "deconv8/BatchNorm/beta"
      input: "deconv8/BatchNorm/beta/Adam"
      input: "deconv8/BatchNorm/beta/Adam_1"
      input: "deconv8/BatchNorm/gamma"
      input: "deconv8/BatchNorm/gamma/Adam"
      input: "deconv8/BatchNorm/gamma/Adam_1"
      input: "deconv8/BatchNorm/moving_mean"
      input: "deconv8/BatchNorm/moving_variance"
      input: "deconv8/weights"
      input: "deconv8/weights/Adam"
      input: "deconv8/weights/Adam_1"
      input: "epoch"
      input: "fc256/BatchNorm/beta"
      input: "fc256/BatchNorm/beta/Adam"
      input: "fc256/BatchNorm/beta/Adam_1"
      input: "fc256/BatchNorm/gamma"
      input: "fc256/BatchNorm/gamma/Adam"
      input: "fc256/BatchNorm/gamma/Adam_1"
      input: "fc256/BatchNorm/moving_mean"
      input: "fc256/BatchNorm/moving_variance"
      input: "fc256/weights"
      input: "fc256/weights/Adam"
      input: "fc256/weights/Adam_1"
      input: "global_step"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT32
          }
        }
      }
    }
    node {
      name: "saver/control_dependency"
      op: "Identity"
      input: "saver/Const"
      input: "^saver/SaveV2"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@saver/Const"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "beta1_power"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2/tensor_names"
      input: "saver/RestoreV2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign"
      op: "Assign"
      input: "beta1_power"
      input: "saver/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_1/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "beta2_power"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_1/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_1"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_1/tensor_names"
      input: "saver/RestoreV2_1/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_1"
      op: "Assign"
      input: "beta2_power"
      input: "saver/RestoreV2_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/BatchNorm/beta"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_2"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_2/tensor_names"
      input: "saver/RestoreV2_2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_2"
      op: "Assign"
      input: "conv16/BatchNorm/beta"
      input: "saver/RestoreV2_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_3/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/BatchNorm/beta/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_3/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_3"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_3/tensor_names"
      input: "saver/RestoreV2_3/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_3"
      op: "Assign"
      input: "conv16/BatchNorm/beta/Adam"
      input: "saver/RestoreV2_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_4/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/BatchNorm/beta/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_4/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_4"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_4/tensor_names"
      input: "saver/RestoreV2_4/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_4"
      op: "Assign"
      input: "conv16/BatchNorm/beta/Adam_1"
      input: "saver/RestoreV2_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_5/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/BatchNorm/gamma"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_5/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_5"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_5/tensor_names"
      input: "saver/RestoreV2_5/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_5"
      op: "Assign"
      input: "conv16/BatchNorm/gamma"
      input: "saver/RestoreV2_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_6/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/BatchNorm/gamma/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_6/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_6"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_6/tensor_names"
      input: "saver/RestoreV2_6/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_6"
      op: "Assign"
      input: "conv16/BatchNorm/gamma/Adam"
      input: "saver/RestoreV2_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_7/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/BatchNorm/gamma/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_7/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_7"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_7/tensor_names"
      input: "saver/RestoreV2_7/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_7"
      op: "Assign"
      input: "conv16/BatchNorm/gamma/Adam_1"
      input: "saver/RestoreV2_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_8/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/BatchNorm/moving_mean"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_8/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_8"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_8/tensor_names"
      input: "saver/RestoreV2_8/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_8"
      op: "Assign"
      input: "conv16/BatchNorm/moving_mean"
      input: "saver/RestoreV2_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_9/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/BatchNorm/moving_variance"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_9/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_9"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_9/tensor_names"
      input: "saver/RestoreV2_9/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_9"
      op: "Assign"
      input: "conv16/BatchNorm/moving_variance"
      input: "saver/RestoreV2_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_10/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/weights"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_10/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_10"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_10/tensor_names"
      input: "saver/RestoreV2_10/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_10"
      op: "Assign"
      input: "conv16/weights"
      input: "saver/RestoreV2_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_11/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/weights/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_11/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_11"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_11/tensor_names"
      input: "saver/RestoreV2_11/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_11"
      op: "Assign"
      input: "conv16/weights/Adam"
      input: "saver/RestoreV2_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_12/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/weights/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_12/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_12"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_12/tensor_names"
      input: "saver/RestoreV2_12/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_12"
      op: "Assign"
      input: "conv16/weights/Adam_1"
      input: "saver/RestoreV2_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_13/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/BatchNorm/beta"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_13/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_13"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_13/tensor_names"
      input: "saver/RestoreV2_13/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_13"
      op: "Assign"
      input: "conv32/BatchNorm/beta"
      input: "saver/RestoreV2_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_14/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/BatchNorm/beta/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_14/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_14"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_14/tensor_names"
      input: "saver/RestoreV2_14/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_14"
      op: "Assign"
      input: "conv32/BatchNorm/beta/Adam"
      input: "saver/RestoreV2_14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_15/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/BatchNorm/beta/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_15/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_15"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_15/tensor_names"
      input: "saver/RestoreV2_15/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_15"
      op: "Assign"
      input: "conv32/BatchNorm/beta/Adam_1"
      input: "saver/RestoreV2_15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_16/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/BatchNorm/gamma"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_16/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_16"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_16/tensor_names"
      input: "saver/RestoreV2_16/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_16"
      op: "Assign"
      input: "conv32/BatchNorm/gamma"
      input: "saver/RestoreV2_16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_17/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/BatchNorm/gamma/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_17/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_17"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_17/tensor_names"
      input: "saver/RestoreV2_17/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_17"
      op: "Assign"
      input: "conv32/BatchNorm/gamma/Adam"
      input: "saver/RestoreV2_17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_18/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/BatchNorm/gamma/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_18/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_18"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_18/tensor_names"
      input: "saver/RestoreV2_18/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_18"
      op: "Assign"
      input: "conv32/BatchNorm/gamma/Adam_1"
      input: "saver/RestoreV2_18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_19/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/BatchNorm/moving_mean"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_19/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_19"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_19/tensor_names"
      input: "saver/RestoreV2_19/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_19"
      op: "Assign"
      input: "conv32/BatchNorm/moving_mean"
      input: "saver/RestoreV2_19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_20/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/BatchNorm/moving_variance"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_20/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_20"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_20/tensor_names"
      input: "saver/RestoreV2_20/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_20"
      op: "Assign"
      input: "conv32/BatchNorm/moving_variance"
      input: "saver/RestoreV2_20"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_21/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/weights"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_21/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_21"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_21/tensor_names"
      input: "saver/RestoreV2_21/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_21"
      op: "Assign"
      input: "conv32/weights"
      input: "saver/RestoreV2_21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_22/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/weights/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_22/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_22"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_22/tensor_names"
      input: "saver/RestoreV2_22/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_22"
      op: "Assign"
      input: "conv32/weights/Adam"
      input: "saver/RestoreV2_22"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_23/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/weights/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_23/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_23"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_23/tensor_names"
      input: "saver/RestoreV2_23/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_23"
      op: "Assign"
      input: "conv32/weights/Adam_1"
      input: "saver/RestoreV2_23"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_24/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/BatchNorm/beta"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_24/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_24"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_24/tensor_names"
      input: "saver/RestoreV2_24/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_24"
      op: "Assign"
      input: "conv4/BatchNorm/beta"
      input: "saver/RestoreV2_24"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_25/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/BatchNorm/beta/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_25/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_25"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_25/tensor_names"
      input: "saver/RestoreV2_25/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_25"
      op: "Assign"
      input: "conv4/BatchNorm/beta/Adam"
      input: "saver/RestoreV2_25"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_26/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/BatchNorm/beta/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_26/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_26"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_26/tensor_names"
      input: "saver/RestoreV2_26/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_26"
      op: "Assign"
      input: "conv4/BatchNorm/beta/Adam_1"
      input: "saver/RestoreV2_26"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_27/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/BatchNorm/gamma"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_27/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_27"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_27/tensor_names"
      input: "saver/RestoreV2_27/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_27"
      op: "Assign"
      input: "conv4/BatchNorm/gamma"
      input: "saver/RestoreV2_27"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_28/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/BatchNorm/gamma/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_28/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_28"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_28/tensor_names"
      input: "saver/RestoreV2_28/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_28"
      op: "Assign"
      input: "conv4/BatchNorm/gamma/Adam"
      input: "saver/RestoreV2_28"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_29/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/BatchNorm/gamma/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_29/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_29"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_29/tensor_names"
      input: "saver/RestoreV2_29/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_29"
      op: "Assign"
      input: "conv4/BatchNorm/gamma/Adam_1"
      input: "saver/RestoreV2_29"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_30/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/BatchNorm/moving_mean"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_30/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_30"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_30/tensor_names"
      input: "saver/RestoreV2_30/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_30"
      op: "Assign"
      input: "conv4/BatchNorm/moving_mean"
      input: "saver/RestoreV2_30"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_31/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/BatchNorm/moving_variance"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_31/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_31"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_31/tensor_names"
      input: "saver/RestoreV2_31/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_31"
      op: "Assign"
      input: "conv4/BatchNorm/moving_variance"
      input: "saver/RestoreV2_31"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_32/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/weights"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_32/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_32"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_32/tensor_names"
      input: "saver/RestoreV2_32/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_32"
      op: "Assign"
      input: "conv4/weights"
      input: "saver/RestoreV2_32"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_33/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/weights/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_33/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_33"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_33/tensor_names"
      input: "saver/RestoreV2_33/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_33"
      op: "Assign"
      input: "conv4/weights/Adam"
      input: "saver/RestoreV2_33"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_34/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/weights/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_34/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_34"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_34/tensor_names"
      input: "saver/RestoreV2_34/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_34"
      op: "Assign"
      input: "conv4/weights/Adam_1"
      input: "saver/RestoreV2_34"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_35/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/BatchNorm/beta"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_35/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_35"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_35/tensor_names"
      input: "saver/RestoreV2_35/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_35"
      op: "Assign"
      input: "conv8/BatchNorm/beta"
      input: "saver/RestoreV2_35"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_36/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/BatchNorm/beta/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_36/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_36"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_36/tensor_names"
      input: "saver/RestoreV2_36/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_36"
      op: "Assign"
      input: "conv8/BatchNorm/beta/Adam"
      input: "saver/RestoreV2_36"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_37/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/BatchNorm/beta/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_37/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_37"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_37/tensor_names"
      input: "saver/RestoreV2_37/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_37"
      op: "Assign"
      input: "conv8/BatchNorm/beta/Adam_1"
      input: "saver/RestoreV2_37"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_38/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/BatchNorm/gamma"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_38/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_38"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_38/tensor_names"
      input: "saver/RestoreV2_38/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_38"
      op: "Assign"
      input: "conv8/BatchNorm/gamma"
      input: "saver/RestoreV2_38"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_39/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/BatchNorm/gamma/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_39/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_39"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_39/tensor_names"
      input: "saver/RestoreV2_39/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_39"
      op: "Assign"
      input: "conv8/BatchNorm/gamma/Adam"
      input: "saver/RestoreV2_39"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_40/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/BatchNorm/gamma/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_40/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_40"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_40/tensor_names"
      input: "saver/RestoreV2_40/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_40"
      op: "Assign"
      input: "conv8/BatchNorm/gamma/Adam_1"
      input: "saver/RestoreV2_40"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_41/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/BatchNorm/moving_mean"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_41/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_41"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_41/tensor_names"
      input: "saver/RestoreV2_41/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_41"
      op: "Assign"
      input: "conv8/BatchNorm/moving_mean"
      input: "saver/RestoreV2_41"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_42/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/BatchNorm/moving_variance"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_42/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_42"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_42/tensor_names"
      input: "saver/RestoreV2_42/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_42"
      op: "Assign"
      input: "conv8/BatchNorm/moving_variance"
      input: "saver/RestoreV2_42"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_43/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/weights"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_43/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_43"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_43/tensor_names"
      input: "saver/RestoreV2_43/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_43"
      op: "Assign"
      input: "conv8/weights"
      input: "saver/RestoreV2_43"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_44/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/weights/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_44/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_44"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_44/tensor_names"
      input: "saver/RestoreV2_44/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_44"
      op: "Assign"
      input: "conv8/weights/Adam"
      input: "saver/RestoreV2_44"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_45/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/weights/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_45/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_45"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_45/tensor_names"
      input: "saver/RestoreV2_45/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_45"
      op: "Assign"
      input: "conv8/weights/Adam_1"
      input: "saver/RestoreV2_45"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_46/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/BatchNorm/beta"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_46/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_46"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_46/tensor_names"
      input: "saver/RestoreV2_46/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_46"
      op: "Assign"
      input: "deconv16/BatchNorm/beta"
      input: "saver/RestoreV2_46"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_47/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/BatchNorm/beta/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_47/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_47"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_47/tensor_names"
      input: "saver/RestoreV2_47/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_47"
      op: "Assign"
      input: "deconv16/BatchNorm/beta/Adam"
      input: "saver/RestoreV2_47"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_48/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/BatchNorm/beta/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_48/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_48"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_48/tensor_names"
      input: "saver/RestoreV2_48/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_48"
      op: "Assign"
      input: "deconv16/BatchNorm/beta/Adam_1"
      input: "saver/RestoreV2_48"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_49/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/BatchNorm/gamma"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_49/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_49"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_49/tensor_names"
      input: "saver/RestoreV2_49/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_49"
      op: "Assign"
      input: "deconv16/BatchNorm/gamma"
      input: "saver/RestoreV2_49"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_50/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/BatchNorm/gamma/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_50/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_50"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_50/tensor_names"
      input: "saver/RestoreV2_50/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_50"
      op: "Assign"
      input: "deconv16/BatchNorm/gamma/Adam"
      input: "saver/RestoreV2_50"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_51/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/BatchNorm/gamma/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_51/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_51"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_51/tensor_names"
      input: "saver/RestoreV2_51/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_51"
      op: "Assign"
      input: "deconv16/BatchNorm/gamma/Adam_1"
      input: "saver/RestoreV2_51"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_52/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/BatchNorm/moving_mean"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_52/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_52"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_52/tensor_names"
      input: "saver/RestoreV2_52/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_52"
      op: "Assign"
      input: "deconv16/BatchNorm/moving_mean"
      input: "saver/RestoreV2_52"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_53/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/BatchNorm/moving_variance"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_53/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_53"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_53/tensor_names"
      input: "saver/RestoreV2_53/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_53"
      op: "Assign"
      input: "deconv16/BatchNorm/moving_variance"
      input: "saver/RestoreV2_53"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_54/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/weights"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_54/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_54"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_54/tensor_names"
      input: "saver/RestoreV2_54/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_54"
      op: "Assign"
      input: "deconv16/weights"
      input: "saver/RestoreV2_54"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_55/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/weights/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_55/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_55"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_55/tensor_names"
      input: "saver/RestoreV2_55/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_55"
      op: "Assign"
      input: "deconv16/weights/Adam"
      input: "saver/RestoreV2_55"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_56/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/weights/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_56/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_56"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_56/tensor_names"
      input: "saver/RestoreV2_56/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_56"
      op: "Assign"
      input: "deconv16/weights/Adam_1"
      input: "saver/RestoreV2_56"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_57/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/BatchNorm/beta"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_57/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_57"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_57/tensor_names"
      input: "saver/RestoreV2_57/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_57"
      op: "Assign"
      input: "deconv32/BatchNorm/beta"
      input: "saver/RestoreV2_57"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_58/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/BatchNorm/beta/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_58/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_58"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_58/tensor_names"
      input: "saver/RestoreV2_58/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_58"
      op: "Assign"
      input: "deconv32/BatchNorm/beta/Adam"
      input: "saver/RestoreV2_58"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_59/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/BatchNorm/beta/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_59/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_59"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_59/tensor_names"
      input: "saver/RestoreV2_59/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_59"
      op: "Assign"
      input: "deconv32/BatchNorm/beta/Adam_1"
      input: "saver/RestoreV2_59"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_60/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/BatchNorm/gamma"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_60/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_60"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_60/tensor_names"
      input: "saver/RestoreV2_60/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_60"
      op: "Assign"
      input: "deconv32/BatchNorm/gamma"
      input: "saver/RestoreV2_60"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_61/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/BatchNorm/gamma/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_61/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_61"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_61/tensor_names"
      input: "saver/RestoreV2_61/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_61"
      op: "Assign"
      input: "deconv32/BatchNorm/gamma/Adam"
      input: "saver/RestoreV2_61"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_62/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/BatchNorm/gamma/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_62/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_62"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_62/tensor_names"
      input: "saver/RestoreV2_62/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_62"
      op: "Assign"
      input: "deconv32/BatchNorm/gamma/Adam_1"
      input: "saver/RestoreV2_62"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_63/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/BatchNorm/moving_mean"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_63/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_63"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_63/tensor_names"
      input: "saver/RestoreV2_63/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_63"
      op: "Assign"
      input: "deconv32/BatchNorm/moving_mean"
      input: "saver/RestoreV2_63"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_64/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/BatchNorm/moving_variance"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_64/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_64"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_64/tensor_names"
      input: "saver/RestoreV2_64/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_64"
      op: "Assign"
      input: "deconv32/BatchNorm/moving_variance"
      input: "saver/RestoreV2_64"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_65/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/weights"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_65/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_65"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_65/tensor_names"
      input: "saver/RestoreV2_65/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_65"
      op: "Assign"
      input: "deconv32/weights"
      input: "saver/RestoreV2_65"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_66/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/weights/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_66/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_66"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_66/tensor_names"
      input: "saver/RestoreV2_66/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_66"
      op: "Assign"
      input: "deconv32/weights/Adam"
      input: "saver/RestoreV2_66"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_67/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/weights/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_67/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_67"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_67/tensor_names"
      input: "saver/RestoreV2_67/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_67"
      op: "Assign"
      input: "deconv32/weights/Adam_1"
      input: "saver/RestoreV2_67"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_68/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv64/weights"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_68/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_68"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_68/tensor_names"
      input: "saver/RestoreV2_68/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_68"
      op: "Assign"
      input: "deconv64/weights"
      input: "saver/RestoreV2_68"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_69/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv64/weights/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_69/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_69"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_69/tensor_names"
      input: "saver/RestoreV2_69/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_69"
      op: "Assign"
      input: "deconv64/weights/Adam"
      input: "saver/RestoreV2_69"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_70/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv64/weights/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_70/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_70"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_70/tensor_names"
      input: "saver/RestoreV2_70/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_70"
      op: "Assign"
      input: "deconv64/weights/Adam_1"
      input: "saver/RestoreV2_70"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_71/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/BatchNorm/beta"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_71/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_71"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_71/tensor_names"
      input: "saver/RestoreV2_71/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_71"
      op: "Assign"
      input: "deconv8/BatchNorm/beta"
      input: "saver/RestoreV2_71"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_72/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/BatchNorm/beta/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_72/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_72"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_72/tensor_names"
      input: "saver/RestoreV2_72/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_72"
      op: "Assign"
      input: "deconv8/BatchNorm/beta/Adam"
      input: "saver/RestoreV2_72"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_73/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/BatchNorm/beta/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_73/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_73"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_73/tensor_names"
      input: "saver/RestoreV2_73/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_73"
      op: "Assign"
      input: "deconv8/BatchNorm/beta/Adam_1"
      input: "saver/RestoreV2_73"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_74/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/BatchNorm/gamma"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_74/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_74"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_74/tensor_names"
      input: "saver/RestoreV2_74/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_74"
      op: "Assign"
      input: "deconv8/BatchNorm/gamma"
      input: "saver/RestoreV2_74"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_75/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/BatchNorm/gamma/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_75/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_75"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_75/tensor_names"
      input: "saver/RestoreV2_75/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_75"
      op: "Assign"
      input: "deconv8/BatchNorm/gamma/Adam"
      input: "saver/RestoreV2_75"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_76/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/BatchNorm/gamma/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_76/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_76"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_76/tensor_names"
      input: "saver/RestoreV2_76/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_76"
      op: "Assign"
      input: "deconv8/BatchNorm/gamma/Adam_1"
      input: "saver/RestoreV2_76"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_77/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/BatchNorm/moving_mean"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_77/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_77"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_77/tensor_names"
      input: "saver/RestoreV2_77/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_77"
      op: "Assign"
      input: "deconv8/BatchNorm/moving_mean"
      input: "saver/RestoreV2_77"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_78/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/BatchNorm/moving_variance"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_78/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_78"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_78/tensor_names"
      input: "saver/RestoreV2_78/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_78"
      op: "Assign"
      input: "deconv8/BatchNorm/moving_variance"
      input: "saver/RestoreV2_78"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_79/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/weights"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_79/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_79"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_79/tensor_names"
      input: "saver/RestoreV2_79/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_79"
      op: "Assign"
      input: "deconv8/weights"
      input: "saver/RestoreV2_79"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_80/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/weights/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_80/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_80"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_80/tensor_names"
      input: "saver/RestoreV2_80/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_80"
      op: "Assign"
      input: "deconv8/weights/Adam"
      input: "saver/RestoreV2_80"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_81/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/weights/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_81/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_81"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_81/tensor_names"
      input: "saver/RestoreV2_81/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_81"
      op: "Assign"
      input: "deconv8/weights/Adam_1"
      input: "saver/RestoreV2_81"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_82/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "epoch"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_82/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_82"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_82/tensor_names"
      input: "saver/RestoreV2_82/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_INT32
          }
        }
      }
    }
    node {
      name: "saver/Assign_82"
      op: "Assign"
      input: "epoch"
      input: "saver/RestoreV2_82"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@epoch"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_83/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/BatchNorm/beta"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_83/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_83"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_83/tensor_names"
      input: "saver/RestoreV2_83/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_83"
      op: "Assign"
      input: "fc256/BatchNorm/beta"
      input: "saver/RestoreV2_83"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_84/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/BatchNorm/beta/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_84/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_84"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_84/tensor_names"
      input: "saver/RestoreV2_84/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_84"
      op: "Assign"
      input: "fc256/BatchNorm/beta/Adam"
      input: "saver/RestoreV2_84"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_85/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/BatchNorm/beta/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_85/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_85"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_85/tensor_names"
      input: "saver/RestoreV2_85/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_85"
      op: "Assign"
      input: "fc256/BatchNorm/beta/Adam_1"
      input: "saver/RestoreV2_85"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_86/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/BatchNorm/gamma"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_86/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_86"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_86/tensor_names"
      input: "saver/RestoreV2_86/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_86"
      op: "Assign"
      input: "fc256/BatchNorm/gamma"
      input: "saver/RestoreV2_86"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_87/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/BatchNorm/gamma/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_87/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_87"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_87/tensor_names"
      input: "saver/RestoreV2_87/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_87"
      op: "Assign"
      input: "fc256/BatchNorm/gamma/Adam"
      input: "saver/RestoreV2_87"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_88/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/BatchNorm/gamma/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_88/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_88"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_88/tensor_names"
      input: "saver/RestoreV2_88/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_88"
      op: "Assign"
      input: "fc256/BatchNorm/gamma/Adam_1"
      input: "saver/RestoreV2_88"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_89/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/BatchNorm/moving_mean"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_89/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_89"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_89/tensor_names"
      input: "saver/RestoreV2_89/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_89"
      op: "Assign"
      input: "fc256/BatchNorm/moving_mean"
      input: "saver/RestoreV2_89"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_90/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/BatchNorm/moving_variance"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_90/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_90"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_90/tensor_names"
      input: "saver/RestoreV2_90/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_90"
      op: "Assign"
      input: "fc256/BatchNorm/moving_variance"
      input: "saver/RestoreV2_90"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_91/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/weights"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_91/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_91"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_91/tensor_names"
      input: "saver/RestoreV2_91/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_91"
      op: "Assign"
      input: "fc256/weights"
      input: "saver/RestoreV2_91"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_92/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/weights/Adam"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_92/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_92"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_92/tensor_names"
      input: "saver/RestoreV2_92/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_92"
      op: "Assign"
      input: "fc256/weights/Adam"
      input: "saver/RestoreV2_92"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_93/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/weights/Adam_1"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_93/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_93"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_93/tensor_names"
      input: "saver/RestoreV2_93/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "saver/Assign_93"
      op: "Assign"
      input: "fc256/weights/Adam_1"
      input: "saver/RestoreV2_93"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/RestoreV2_94/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "global_step"
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_94/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "saver/RestoreV2_94"
      op: "RestoreV2"
      input: "saver/Const"
      input: "saver/RestoreV2_94/tensor_names"
      input: "saver/RestoreV2_94/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_INT32
          }
        }
      }
    }
    node {
      name: "saver/Assign_94"
      op: "Assign"
      input: "global_step"
      input: "saver/RestoreV2_94"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "saver/restore_all/NoOp"
      op: "NoOp"
      input: "^saver/Assign"
      input: "^saver/Assign_1"
      input: "^saver/Assign_2"
      input: "^saver/Assign_3"
      input: "^saver/Assign_4"
      input: "^saver/Assign_5"
      input: "^saver/Assign_6"
      input: "^saver/Assign_7"
      input: "^saver/Assign_8"
      input: "^saver/Assign_9"
      input: "^saver/Assign_10"
      input: "^saver/Assign_11"
      input: "^saver/Assign_12"
      input: "^saver/Assign_13"
      input: "^saver/Assign_14"
      input: "^saver/Assign_15"
      input: "^saver/Assign_16"
      input: "^saver/Assign_17"
      input: "^saver/Assign_18"
      input: "^saver/Assign_19"
      input: "^saver/Assign_20"
      input: "^saver/Assign_21"
      input: "^saver/Assign_22"
      input: "^saver/Assign_23"
      input: "^saver/Assign_24"
      input: "^saver/Assign_25"
      input: "^saver/Assign_26"
      input: "^saver/Assign_27"
      input: "^saver/Assign_28"
      input: "^saver/Assign_29"
      input: "^saver/Assign_30"
      input: "^saver/Assign_31"
      input: "^saver/Assign_32"
      input: "^saver/Assign_33"
      input: "^saver/Assign_34"
      input: "^saver/Assign_35"
      input: "^saver/Assign_36"
      input: "^saver/Assign_37"
      input: "^saver/Assign_38"
      input: "^saver/Assign_39"
      input: "^saver/Assign_40"
      input: "^saver/Assign_41"
      input: "^saver/Assign_42"
      input: "^saver/Assign_43"
      input: "^saver/Assign_44"
      input: "^saver/Assign_45"
      input: "^saver/Assign_46"
      input: "^saver/Assign_47"
      input: "^saver/Assign_48"
      input: "^saver/Assign_49"
      input: "^saver/Assign_50"
      input: "^saver/Assign_51"
      input: "^saver/Assign_52"
      input: "^saver/Assign_53"
      input: "^saver/Assign_54"
      input: "^saver/Assign_55"
      input: "^saver/Assign_56"
      input: "^saver/Assign_57"
      input: "^saver/Assign_58"
      input: "^saver/Assign_59"
      input: "^saver/Assign_60"
      input: "^saver/Assign_61"
      input: "^saver/Assign_62"
      input: "^saver/Assign_63"
      input: "^saver/Assign_64"
      input: "^saver/Assign_65"
      input: "^saver/Assign_66"
      input: "^saver/Assign_67"
      input: "^saver/Assign_68"
      input: "^saver/Assign_69"
      input: "^saver/Assign_70"
      input: "^saver/Assign_71"
      input: "^saver/Assign_72"
      input: "^saver/Assign_73"
      input: "^saver/Assign_74"
      input: "^saver/Assign_75"
      input: "^saver/Assign_76"
      input: "^saver/Assign_77"
      input: "^saver/Assign_78"
      input: "^saver/Assign_79"
      input: "^saver/Assign_80"
      input: "^saver/Assign_81"
      input: "^saver/Assign_83"
      input: "^saver/Assign_84"
      input: "^saver/Assign_85"
      input: "^saver/Assign_86"
      input: "^saver/Assign_87"
      input: "^saver/Assign_88"
      input: "^saver/Assign_89"
      input: "^saver/Assign_90"
      input: "^saver/Assign_91"
      input: "^saver/Assign_92"
      input: "^saver/Assign_93"
    }
    node {
      name: "saver/restore_all/NoOp_1"
      op: "NoOp"
      input: "^saver/Assign_82"
      input: "^saver/Assign_94"
    }
    node {
      name: "saver/restore_all"
      op: "NoOp"
      input: "^saver/restore_all/NoOp"
      input: "^saver/restore_all/NoOp_1"
    }
    node {
      name: "init/NoOp"
      op: "NoOp"
      input: "^conv32/weights/Assign"
      input: "^conv32/BatchNorm/beta/Assign"
      input: "^conv32/BatchNorm/gamma/Assign"
      input: "^conv32/BatchNorm/moving_mean/Assign"
      input: "^conv32/BatchNorm/moving_variance/Assign"
      input: "^conv16/weights/Assign"
      input: "^conv16/BatchNorm/beta/Assign"
      input: "^conv16/BatchNorm/gamma/Assign"
      input: "^conv16/BatchNorm/moving_mean/Assign"
      input: "^conv16/BatchNorm/moving_variance/Assign"
      input: "^conv8/weights/Assign"
      input: "^conv8/BatchNorm/beta/Assign"
      input: "^conv8/BatchNorm/gamma/Assign"
      input: "^conv8/BatchNorm/moving_mean/Assign"
      input: "^conv8/BatchNorm/moving_variance/Assign"
      input: "^conv4/weights/Assign"
      input: "^conv4/BatchNorm/beta/Assign"
      input: "^conv4/BatchNorm/gamma/Assign"
      input: "^conv4/BatchNorm/moving_mean/Assign"
      input: "^conv4/BatchNorm/moving_variance/Assign"
      input: "^fc256/weights/Assign"
      input: "^fc256/BatchNorm/beta/Assign"
      input: "^fc256/BatchNorm/gamma/Assign"
      input: "^fc256/BatchNorm/moving_mean/Assign"
      input: "^fc256/BatchNorm/moving_variance/Assign"
      input: "^deconv8/weights/Assign"
      input: "^deconv8/BatchNorm/beta/Assign"
      input: "^deconv8/BatchNorm/gamma/Assign"
      input: "^deconv8/BatchNorm/moving_mean/Assign"
      input: "^deconv8/BatchNorm/moving_variance/Assign"
      input: "^deconv16/weights/Assign"
      input: "^deconv16/BatchNorm/beta/Assign"
      input: "^deconv16/BatchNorm/gamma/Assign"
      input: "^deconv16/BatchNorm/moving_mean/Assign"
      input: "^deconv16/BatchNorm/moving_variance/Assign"
      input: "^deconv32/weights/Assign"
      input: "^deconv32/BatchNorm/beta/Assign"
      input: "^deconv32/BatchNorm/gamma/Assign"
      input: "^deconv32/BatchNorm/moving_mean/Assign"
      input: "^deconv32/BatchNorm/moving_variance/Assign"
      input: "^deconv64/weights/Assign"
      input: "^beta1_power/Assign"
      input: "^beta2_power/Assign"
      input: "^conv32/weights/Adam/Assign"
      input: "^conv32/weights/Adam_1/Assign"
      input: "^conv32/BatchNorm/beta/Adam/Assign"
      input: "^conv32/BatchNorm/beta/Adam_1/Assign"
      input: "^conv32/BatchNorm/gamma/Adam/Assign"
      input: "^conv32/BatchNorm/gamma/Adam_1/Assign"
      input: "^conv16/weights/Adam/Assign"
      input: "^conv16/weights/Adam_1/Assign"
      input: "^conv16/BatchNorm/beta/Adam/Assign"
      input: "^conv16/BatchNorm/beta/Adam_1/Assign"
      input: "^conv16/BatchNorm/gamma/Adam/Assign"
      input: "^conv16/BatchNorm/gamma/Adam_1/Assign"
      input: "^conv8/weights/Adam/Assign"
      input: "^conv8/weights/Adam_1/Assign"
      input: "^conv8/BatchNorm/beta/Adam/Assign"
      input: "^conv8/BatchNorm/beta/Adam_1/Assign"
      input: "^conv8/BatchNorm/gamma/Adam/Assign"
      input: "^conv8/BatchNorm/gamma/Adam_1/Assign"
      input: "^conv4/weights/Adam/Assign"
      input: "^conv4/weights/Adam_1/Assign"
      input: "^conv4/BatchNorm/beta/Adam/Assign"
      input: "^conv4/BatchNorm/beta/Adam_1/Assign"
      input: "^conv4/BatchNorm/gamma/Adam/Assign"
      input: "^conv4/BatchNorm/gamma/Adam_1/Assign"
      input: "^fc256/weights/Adam/Assign"
      input: "^fc256/weights/Adam_1/Assign"
      input: "^fc256/BatchNorm/beta/Adam/Assign"
      input: "^fc256/BatchNorm/beta/Adam_1/Assign"
      input: "^fc256/BatchNorm/gamma/Adam/Assign"
      input: "^fc256/BatchNorm/gamma/Adam_1/Assign"
      input: "^deconv8/weights/Adam/Assign"
      input: "^deconv8/weights/Adam_1/Assign"
      input: "^deconv8/BatchNorm/beta/Adam/Assign"
      input: "^deconv8/BatchNorm/beta/Adam_1/Assign"
      input: "^deconv8/BatchNorm/gamma/Adam/Assign"
      input: "^deconv8/BatchNorm/gamma/Adam_1/Assign"
      input: "^deconv16/weights/Adam/Assign"
      input: "^deconv16/weights/Adam_1/Assign"
      input: "^deconv16/BatchNorm/beta/Adam/Assign"
      input: "^deconv16/BatchNorm/beta/Adam_1/Assign"
      input: "^deconv16/BatchNorm/gamma/Adam/Assign"
      input: "^deconv16/BatchNorm/gamma/Adam_1/Assign"
      input: "^deconv32/weights/Adam/Assign"
      input: "^deconv32/weights/Adam_1/Assign"
      input: "^deconv32/BatchNorm/beta/Adam/Assign"
      input: "^deconv32/BatchNorm/beta/Adam_1/Assign"
      input: "^deconv32/BatchNorm/gamma/Adam/Assign"
      input: "^deconv32/BatchNorm/gamma/Adam_1/Assign"
      input: "^deconv64/weights/Adam/Assign"
      input: "^deconv64/weights/Adam_1/Assign"
    }
    node {
      name: "init/NoOp_1"
      op: "NoOp"
      input: "^global_step/Assign"
      input: "^epoch/Assign"
    }
    node {
      name: "init"
      op: "NoOp"
      input: "^init/NoOp"
      input: "^init/NoOp_1"
    }
    node {
      name: "save/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save/StringJoin/inputs_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "_temp_a655da9bd7ae4d8e8b5bbadf302cc15b/part"
          }
        }
      }
    }
    node {
      name: "save/StringJoin"
      op: "StringJoin"
      input: "save/Const"
      input: "save/StringJoin/inputs_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "separator"
        value {
          s: ""
        }
      }
    }
    node {
      name: "save/num_shards"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename/shard"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename"
      op: "ShardedFilename"
      input: "save/StringJoin"
      input: "save/ShardedFilename/shard"
      input: "save/num_shards"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/SaveV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 93
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 93
              }
            }
            string_val: "beta1_power"
            string_val: "beta2_power"
            string_val: "conv16/BatchNorm/beta"
            string_val: "conv16/BatchNorm/beta/Adam"
            string_val: "conv16/BatchNorm/beta/Adam_1"
            string_val: "conv16/BatchNorm/gamma"
            string_val: "conv16/BatchNorm/gamma/Adam"
            string_val: "conv16/BatchNorm/gamma/Adam_1"
            string_val: "conv16/BatchNorm/moving_mean"
            string_val: "conv16/BatchNorm/moving_variance"
            string_val: "conv16/weights"
            string_val: "conv16/weights/Adam"
            string_val: "conv16/weights/Adam_1"
            string_val: "conv32/BatchNorm/beta"
            string_val: "conv32/BatchNorm/beta/Adam"
            string_val: "conv32/BatchNorm/beta/Adam_1"
            string_val: "conv32/BatchNorm/gamma"
            string_val: "conv32/BatchNorm/gamma/Adam"
            string_val: "conv32/BatchNorm/gamma/Adam_1"
            string_val: "conv32/BatchNorm/moving_mean"
            string_val: "conv32/BatchNorm/moving_variance"
            string_val: "conv32/weights"
            string_val: "conv32/weights/Adam"
            string_val: "conv32/weights/Adam_1"
            string_val: "conv4/BatchNorm/beta"
            string_val: "conv4/BatchNorm/beta/Adam"
            string_val: "conv4/BatchNorm/beta/Adam_1"
            string_val: "conv4/BatchNorm/gamma"
            string_val: "conv4/BatchNorm/gamma/Adam"
            string_val: "conv4/BatchNorm/gamma/Adam_1"
            string_val: "conv4/BatchNorm/moving_mean"
            string_val: "conv4/BatchNorm/moving_variance"
            string_val: "conv4/weights"
            string_val: "conv4/weights/Adam"
            string_val: "conv4/weights/Adam_1"
            string_val: "conv8/BatchNorm/beta"
            string_val: "conv8/BatchNorm/beta/Adam"
            string_val: "conv8/BatchNorm/beta/Adam_1"
            string_val: "conv8/BatchNorm/gamma"
            string_val: "conv8/BatchNorm/gamma/Adam"
            string_val: "conv8/BatchNorm/gamma/Adam_1"
            string_val: "conv8/BatchNorm/moving_mean"
            string_val: "conv8/BatchNorm/moving_variance"
            string_val: "conv8/weights"
            string_val: "conv8/weights/Adam"
            string_val: "conv8/weights/Adam_1"
            string_val: "deconv16/BatchNorm/beta"
            string_val: "deconv16/BatchNorm/beta/Adam"
            string_val: "deconv16/BatchNorm/beta/Adam_1"
            string_val: "deconv16/BatchNorm/gamma"
            string_val: "deconv16/BatchNorm/gamma/Adam"
            string_val: "deconv16/BatchNorm/gamma/Adam_1"
            string_val: "deconv16/BatchNorm/moving_mean"
            string_val: "deconv16/BatchNorm/moving_variance"
            string_val: "deconv16/weights"
            string_val: "deconv16/weights/Adam"
            string_val: "deconv16/weights/Adam_1"
            string_val: "deconv32/BatchNorm/beta"
            string_val: "deconv32/BatchNorm/beta/Adam"
            string_val: "deconv32/BatchNorm/beta/Adam_1"
            string_val: "deconv32/BatchNorm/gamma"
            string_val: "deconv32/BatchNorm/gamma/Adam"
            string_val: "deconv32/BatchNorm/gamma/Adam_1"
            string_val: "deconv32/BatchNorm/moving_mean"
            string_val: "deconv32/BatchNorm/moving_variance"
            string_val: "deconv32/weights"
            string_val: "deconv32/weights/Adam"
            string_val: "deconv32/weights/Adam_1"
            string_val: "deconv64/weights"
            string_val: "deconv64/weights/Adam"
            string_val: "deconv64/weights/Adam_1"
            string_val: "deconv8/BatchNorm/beta"
            string_val: "deconv8/BatchNorm/beta/Adam"
            string_val: "deconv8/BatchNorm/beta/Adam_1"
            string_val: "deconv8/BatchNorm/gamma"
            string_val: "deconv8/BatchNorm/gamma/Adam"
            string_val: "deconv8/BatchNorm/gamma/Adam_1"
            string_val: "deconv8/BatchNorm/moving_mean"
            string_val: "deconv8/BatchNorm/moving_variance"
            string_val: "deconv8/weights"
            string_val: "deconv8/weights/Adam"
            string_val: "deconv8/weights/Adam_1"
            string_val: "fc256/BatchNorm/beta"
            string_val: "fc256/BatchNorm/beta/Adam"
            string_val: "fc256/BatchNorm/beta/Adam_1"
            string_val: "fc256/BatchNorm/gamma"
            string_val: "fc256/BatchNorm/gamma/Adam"
            string_val: "fc256/BatchNorm/gamma/Adam_1"
            string_val: "fc256/BatchNorm/moving_mean"
            string_val: "fc256/BatchNorm/moving_variance"
            string_val: "fc256/weights"
            string_val: "fc256/weights/Adam"
            string_val: "fc256/weights/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/SaveV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 93
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 93
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/SaveV2"
      op: "SaveV2"
      input: "save/ShardedFilename"
      input: "save/SaveV2/tensor_names"
      input: "save/SaveV2/shape_and_slices"
      input: "beta1_power"
      input: "beta2_power"
      input: "conv16/BatchNorm/beta"
      input: "conv16/BatchNorm/beta/Adam"
      input: "conv16/BatchNorm/beta/Adam_1"
      input: "conv16/BatchNorm/gamma"
      input: "conv16/BatchNorm/gamma/Adam"
      input: "conv16/BatchNorm/gamma/Adam_1"
      input: "conv16/BatchNorm/moving_mean"
      input: "conv16/BatchNorm/moving_variance"
      input: "conv16/weights"
      input: "conv16/weights/Adam"
      input: "conv16/weights/Adam_1"
      input: "conv32/BatchNorm/beta"
      input: "conv32/BatchNorm/beta/Adam"
      input: "conv32/BatchNorm/beta/Adam_1"
      input: "conv32/BatchNorm/gamma"
      input: "conv32/BatchNorm/gamma/Adam"
      input: "conv32/BatchNorm/gamma/Adam_1"
      input: "conv32/BatchNorm/moving_mean"
      input: "conv32/BatchNorm/moving_variance"
      input: "conv32/weights"
      input: "conv32/weights/Adam"
      input: "conv32/weights/Adam_1"
      input: "conv4/BatchNorm/beta"
      input: "conv4/BatchNorm/beta/Adam"
      input: "conv4/BatchNorm/beta/Adam_1"
      input: "conv4/BatchNorm/gamma"
      input: "conv4/BatchNorm/gamma/Adam"
      input: "conv4/BatchNorm/gamma/Adam_1"
      input: "conv4/BatchNorm/moving_mean"
      input: "conv4/BatchNorm/moving_variance"
      input: "conv4/weights"
      input: "conv4/weights/Adam"
      input: "conv4/weights/Adam_1"
      input: "conv8/BatchNorm/beta"
      input: "conv8/BatchNorm/beta/Adam"
      input: "conv8/BatchNorm/beta/Adam_1"
      input: "conv8/BatchNorm/gamma"
      input: "conv8/BatchNorm/gamma/Adam"
      input: "conv8/BatchNorm/gamma/Adam_1"
      input: "conv8/BatchNorm/moving_mean"
      input: "conv8/BatchNorm/moving_variance"
      input: "conv8/weights"
      input: "conv8/weights/Adam"
      input: "conv8/weights/Adam_1"
      input: "deconv16/BatchNorm/beta"
      input: "deconv16/BatchNorm/beta/Adam"
      input: "deconv16/BatchNorm/beta/Adam_1"
      input: "deconv16/BatchNorm/gamma"
      input: "deconv16/BatchNorm/gamma/Adam"
      input: "deconv16/BatchNorm/gamma/Adam_1"
      input: "deconv16/BatchNorm/moving_mean"
      input: "deconv16/BatchNorm/moving_variance"
      input: "deconv16/weights"
      input: "deconv16/weights/Adam"
      input: "deconv16/weights/Adam_1"
      input: "deconv32/BatchNorm/beta"
      input: "deconv32/BatchNorm/beta/Adam"
      input: "deconv32/BatchNorm/beta/Adam_1"
      input: "deconv32/BatchNorm/gamma"
      input: "deconv32/BatchNorm/gamma/Adam"
      input: "deconv32/BatchNorm/gamma/Adam_1"
      input: "deconv32/BatchNorm/moving_mean"
      input: "deconv32/BatchNorm/moving_variance"
      input: "deconv32/weights"
      input: "deconv32/weights/Adam"
      input: "deconv32/weights/Adam_1"
      input: "deconv64/weights"
      input: "deconv64/weights/Adam"
      input: "deconv64/weights/Adam_1"
      input: "deconv8/BatchNorm/beta"
      input: "deconv8/BatchNorm/beta/Adam"
      input: "deconv8/BatchNorm/beta/Adam_1"
      input: "deconv8/BatchNorm/gamma"
      input: "deconv8/BatchNorm/gamma/Adam"
      input: "deconv8/BatchNorm/gamma/Adam_1"
      input: "deconv8/BatchNorm/moving_mean"
      input: "deconv8/BatchNorm/moving_variance"
      input: "deconv8/weights"
      input: "deconv8/weights/Adam"
      input: "deconv8/weights/Adam_1"
      input: "fc256/BatchNorm/beta"
      input: "fc256/BatchNorm/beta/Adam"
      input: "fc256/BatchNorm/beta/Adam_1"
      input: "fc256/BatchNorm/gamma"
      input: "fc256/BatchNorm/gamma/Adam"
      input: "fc256/BatchNorm/gamma/Adam_1"
      input: "fc256/BatchNorm/moving_mean"
      input: "fc256/BatchNorm/moving_variance"
      input: "fc256/weights"
      input: "fc256/weights/Adam"
      input: "fc256/weights/Adam_1"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/control_dependency"
      op: "Identity"
      input: "save/ShardedFilename"
      input: "^save/SaveV2"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save/ShardedFilename"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename_1/shard"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename_1"
      op: "ShardedFilename"
      input: "save/StringJoin"
      input: "save/ShardedFilename_1/shard"
      input: "save/num_shards"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/SaveV2_1/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "epoch"
            string_val: "global_step"
          }
        }
      }
    }
    node {
      name: "save/SaveV2_1/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/SaveV2_1"
      op: "SaveV2"
      input: "save/ShardedFilename_1"
      input: "save/SaveV2_1/tensor_names"
      input: "save/SaveV2_1/shape_and_slices"
      input: "epoch"
      input: "global_step"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
          }
        }
      }
    }
    node {
      name: "save/control_dependency_1"
      op: "Identity"
      input: "save/ShardedFilename_1"
      input: "^save/SaveV2_1"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save/ShardedFilename_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints/checkpoint_prefixes"
      op: "Pack"
      input: "save/ShardedFilename"
      input: "save/ShardedFilename_1"
      input: "^save/control_dependency"
      input: "^save/control_dependency_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints"
      op: "MergeV2Checkpoints"
      input: "save/MergeV2Checkpoints/checkpoint_prefixes"
      input: "save/Const"
      attr {
        key: "delete_old_dirs"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Identity"
      op: "Identity"
      input: "save/Const"
      input: "^save/control_dependency"
      input: "^save/control_dependency_1"
      input: "^save/MergeV2Checkpoints"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "beta1_power"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2/tensor_names"
      input: "save/RestoreV2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign"
      op: "Assign"
      input: "beta1_power"
      input: "save/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_1/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "beta2_power"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_1/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_1"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_1/tensor_names"
      input: "save/RestoreV2_1/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_1"
      op: "Assign"
      input: "beta2_power"
      input: "save/RestoreV2_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/BatchNorm/beta"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_2"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_2/tensor_names"
      input: "save/RestoreV2_2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_2"
      op: "Assign"
      input: "conv16/BatchNorm/beta"
      input: "save/RestoreV2_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_3/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/BatchNorm/beta/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_3/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_3"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_3/tensor_names"
      input: "save/RestoreV2_3/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_3"
      op: "Assign"
      input: "conv16/BatchNorm/beta/Adam"
      input: "save/RestoreV2_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_4/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/BatchNorm/beta/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_4/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_4"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_4/tensor_names"
      input: "save/RestoreV2_4/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_4"
      op: "Assign"
      input: "conv16/BatchNorm/beta/Adam_1"
      input: "save/RestoreV2_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_5/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/BatchNorm/gamma"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_5/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_5"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_5/tensor_names"
      input: "save/RestoreV2_5/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_5"
      op: "Assign"
      input: "conv16/BatchNorm/gamma"
      input: "save/RestoreV2_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_6/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/BatchNorm/gamma/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_6/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_6"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_6/tensor_names"
      input: "save/RestoreV2_6/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_6"
      op: "Assign"
      input: "conv16/BatchNorm/gamma/Adam"
      input: "save/RestoreV2_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_7/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/BatchNorm/gamma/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_7/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_7"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_7/tensor_names"
      input: "save/RestoreV2_7/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_7"
      op: "Assign"
      input: "conv16/BatchNorm/gamma/Adam_1"
      input: "save/RestoreV2_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_8/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/BatchNorm/moving_mean"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_8/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_8"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_8/tensor_names"
      input: "save/RestoreV2_8/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_8"
      op: "Assign"
      input: "conv16/BatchNorm/moving_mean"
      input: "save/RestoreV2_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_9/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/BatchNorm/moving_variance"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_9/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_9"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_9/tensor_names"
      input: "save/RestoreV2_9/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_9"
      op: "Assign"
      input: "conv16/BatchNorm/moving_variance"
      input: "save/RestoreV2_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_10/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/weights"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_10/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_10"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_10/tensor_names"
      input: "save/RestoreV2_10/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_10"
      op: "Assign"
      input: "conv16/weights"
      input: "save/RestoreV2_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_11/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/weights/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_11/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_11"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_11/tensor_names"
      input: "save/RestoreV2_11/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_11"
      op: "Assign"
      input: "conv16/weights/Adam"
      input: "save/RestoreV2_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_12/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv16/weights/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_12/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_12"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_12/tensor_names"
      input: "save/RestoreV2_12/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_12"
      op: "Assign"
      input: "conv16/weights/Adam_1"
      input: "save/RestoreV2_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_13/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/BatchNorm/beta"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_13/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_13"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_13/tensor_names"
      input: "save/RestoreV2_13/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_13"
      op: "Assign"
      input: "conv32/BatchNorm/beta"
      input: "save/RestoreV2_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_14/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/BatchNorm/beta/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_14/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_14"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_14/tensor_names"
      input: "save/RestoreV2_14/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_14"
      op: "Assign"
      input: "conv32/BatchNorm/beta/Adam"
      input: "save/RestoreV2_14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_15/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/BatchNorm/beta/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_15/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_15"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_15/tensor_names"
      input: "save/RestoreV2_15/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_15"
      op: "Assign"
      input: "conv32/BatchNorm/beta/Adam_1"
      input: "save/RestoreV2_15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_16/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/BatchNorm/gamma"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_16/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_16"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_16/tensor_names"
      input: "save/RestoreV2_16/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_16"
      op: "Assign"
      input: "conv32/BatchNorm/gamma"
      input: "save/RestoreV2_16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_17/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/BatchNorm/gamma/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_17/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_17"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_17/tensor_names"
      input: "save/RestoreV2_17/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_17"
      op: "Assign"
      input: "conv32/BatchNorm/gamma/Adam"
      input: "save/RestoreV2_17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_18/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/BatchNorm/gamma/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_18/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_18"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_18/tensor_names"
      input: "save/RestoreV2_18/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_18"
      op: "Assign"
      input: "conv32/BatchNorm/gamma/Adam_1"
      input: "save/RestoreV2_18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_19/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/BatchNorm/moving_mean"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_19/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_19"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_19/tensor_names"
      input: "save/RestoreV2_19/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_19"
      op: "Assign"
      input: "conv32/BatchNorm/moving_mean"
      input: "save/RestoreV2_19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_20/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/BatchNorm/moving_variance"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_20/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_20"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_20/tensor_names"
      input: "save/RestoreV2_20/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_20"
      op: "Assign"
      input: "conv32/BatchNorm/moving_variance"
      input: "save/RestoreV2_20"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_21/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/weights"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_21/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_21"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_21/tensor_names"
      input: "save/RestoreV2_21/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_21"
      op: "Assign"
      input: "conv32/weights"
      input: "save/RestoreV2_21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_22/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/weights/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_22/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_22"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_22/tensor_names"
      input: "save/RestoreV2_22/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_22"
      op: "Assign"
      input: "conv32/weights/Adam"
      input: "save/RestoreV2_22"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_23/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv32/weights/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_23/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_23"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_23/tensor_names"
      input: "save/RestoreV2_23/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_23"
      op: "Assign"
      input: "conv32/weights/Adam_1"
      input: "save/RestoreV2_23"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_24/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/BatchNorm/beta"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_24/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_24"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_24/tensor_names"
      input: "save/RestoreV2_24/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_24"
      op: "Assign"
      input: "conv4/BatchNorm/beta"
      input: "save/RestoreV2_24"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_25/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/BatchNorm/beta/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_25/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_25"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_25/tensor_names"
      input: "save/RestoreV2_25/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_25"
      op: "Assign"
      input: "conv4/BatchNorm/beta/Adam"
      input: "save/RestoreV2_25"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_26/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/BatchNorm/beta/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_26/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_26"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_26/tensor_names"
      input: "save/RestoreV2_26/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_26"
      op: "Assign"
      input: "conv4/BatchNorm/beta/Adam_1"
      input: "save/RestoreV2_26"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_27/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/BatchNorm/gamma"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_27/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_27"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_27/tensor_names"
      input: "save/RestoreV2_27/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_27"
      op: "Assign"
      input: "conv4/BatchNorm/gamma"
      input: "save/RestoreV2_27"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_28/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/BatchNorm/gamma/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_28/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_28"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_28/tensor_names"
      input: "save/RestoreV2_28/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_28"
      op: "Assign"
      input: "conv4/BatchNorm/gamma/Adam"
      input: "save/RestoreV2_28"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_29/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/BatchNorm/gamma/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_29/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_29"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_29/tensor_names"
      input: "save/RestoreV2_29/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_29"
      op: "Assign"
      input: "conv4/BatchNorm/gamma/Adam_1"
      input: "save/RestoreV2_29"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_30/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/BatchNorm/moving_mean"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_30/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_30"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_30/tensor_names"
      input: "save/RestoreV2_30/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_30"
      op: "Assign"
      input: "conv4/BatchNorm/moving_mean"
      input: "save/RestoreV2_30"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_31/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/BatchNorm/moving_variance"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_31/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_31"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_31/tensor_names"
      input: "save/RestoreV2_31/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_31"
      op: "Assign"
      input: "conv4/BatchNorm/moving_variance"
      input: "save/RestoreV2_31"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_32/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/weights"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_32/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_32"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_32/tensor_names"
      input: "save/RestoreV2_32/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_32"
      op: "Assign"
      input: "conv4/weights"
      input: "save/RestoreV2_32"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_33/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/weights/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_33/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_33"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_33/tensor_names"
      input: "save/RestoreV2_33/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_33"
      op: "Assign"
      input: "conv4/weights/Adam"
      input: "save/RestoreV2_33"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_34/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv4/weights/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_34/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_34"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_34/tensor_names"
      input: "save/RestoreV2_34/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_34"
      op: "Assign"
      input: "conv4/weights/Adam_1"
      input: "save/RestoreV2_34"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv4/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_35/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/BatchNorm/beta"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_35/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_35"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_35/tensor_names"
      input: "save/RestoreV2_35/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_35"
      op: "Assign"
      input: "conv8/BatchNorm/beta"
      input: "save/RestoreV2_35"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_36/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/BatchNorm/beta/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_36/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_36"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_36/tensor_names"
      input: "save/RestoreV2_36/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_36"
      op: "Assign"
      input: "conv8/BatchNorm/beta/Adam"
      input: "save/RestoreV2_36"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_37/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/BatchNorm/beta/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_37/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_37"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_37/tensor_names"
      input: "save/RestoreV2_37/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_37"
      op: "Assign"
      input: "conv8/BatchNorm/beta/Adam_1"
      input: "save/RestoreV2_37"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_38/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/BatchNorm/gamma"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_38/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_38"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_38/tensor_names"
      input: "save/RestoreV2_38/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_38"
      op: "Assign"
      input: "conv8/BatchNorm/gamma"
      input: "save/RestoreV2_38"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_39/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/BatchNorm/gamma/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_39/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_39"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_39/tensor_names"
      input: "save/RestoreV2_39/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_39"
      op: "Assign"
      input: "conv8/BatchNorm/gamma/Adam"
      input: "save/RestoreV2_39"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_40/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/BatchNorm/gamma/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_40/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_40"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_40/tensor_names"
      input: "save/RestoreV2_40/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_40"
      op: "Assign"
      input: "conv8/BatchNorm/gamma/Adam_1"
      input: "save/RestoreV2_40"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_41/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/BatchNorm/moving_mean"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_41/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_41"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_41/tensor_names"
      input: "save/RestoreV2_41/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_41"
      op: "Assign"
      input: "conv8/BatchNorm/moving_mean"
      input: "save/RestoreV2_41"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_42/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/BatchNorm/moving_variance"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_42/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_42"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_42/tensor_names"
      input: "save/RestoreV2_42/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_42"
      op: "Assign"
      input: "conv8/BatchNorm/moving_variance"
      input: "save/RestoreV2_42"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_43/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/weights"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_43/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_43"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_43/tensor_names"
      input: "save/RestoreV2_43/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_43"
      op: "Assign"
      input: "conv8/weights"
      input: "save/RestoreV2_43"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_44/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/weights/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_44/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_44"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_44/tensor_names"
      input: "save/RestoreV2_44/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_44"
      op: "Assign"
      input: "conv8/weights/Adam"
      input: "save/RestoreV2_44"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_45/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "conv8/weights/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_45/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_45"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_45/tensor_names"
      input: "save/RestoreV2_45/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_45"
      op: "Assign"
      input: "conv8/weights/Adam_1"
      input: "save/RestoreV2_45"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@conv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_46/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/BatchNorm/beta"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_46/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_46"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_46/tensor_names"
      input: "save/RestoreV2_46/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_46"
      op: "Assign"
      input: "deconv16/BatchNorm/beta"
      input: "save/RestoreV2_46"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_47/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/BatchNorm/beta/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_47/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_47"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_47/tensor_names"
      input: "save/RestoreV2_47/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_47"
      op: "Assign"
      input: "deconv16/BatchNorm/beta/Adam"
      input: "save/RestoreV2_47"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_48/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/BatchNorm/beta/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_48/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_48"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_48/tensor_names"
      input: "save/RestoreV2_48/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_48"
      op: "Assign"
      input: "deconv16/BatchNorm/beta/Adam_1"
      input: "save/RestoreV2_48"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_49/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/BatchNorm/gamma"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_49/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_49"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_49/tensor_names"
      input: "save/RestoreV2_49/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_49"
      op: "Assign"
      input: "deconv16/BatchNorm/gamma"
      input: "save/RestoreV2_49"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_50/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/BatchNorm/gamma/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_50/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_50"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_50/tensor_names"
      input: "save/RestoreV2_50/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_50"
      op: "Assign"
      input: "deconv16/BatchNorm/gamma/Adam"
      input: "save/RestoreV2_50"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_51/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/BatchNorm/gamma/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_51/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_51"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_51/tensor_names"
      input: "save/RestoreV2_51/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_51"
      op: "Assign"
      input: "deconv16/BatchNorm/gamma/Adam_1"
      input: "save/RestoreV2_51"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_52/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/BatchNorm/moving_mean"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_52/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_52"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_52/tensor_names"
      input: "save/RestoreV2_52/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_52"
      op: "Assign"
      input: "deconv16/BatchNorm/moving_mean"
      input: "save/RestoreV2_52"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_53/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/BatchNorm/moving_variance"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_53/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_53"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_53/tensor_names"
      input: "save/RestoreV2_53/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_53"
      op: "Assign"
      input: "deconv16/BatchNorm/moving_variance"
      input: "save/RestoreV2_53"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_54/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/weights"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_54/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_54"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_54/tensor_names"
      input: "save/RestoreV2_54/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_54"
      op: "Assign"
      input: "deconv16/weights"
      input: "save/RestoreV2_54"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_55/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/weights/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_55/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_55"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_55/tensor_names"
      input: "save/RestoreV2_55/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_55"
      op: "Assign"
      input: "deconv16/weights/Adam"
      input: "save/RestoreV2_55"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_56/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv16/weights/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_56/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_56"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_56/tensor_names"
      input: "save/RestoreV2_56/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_56"
      op: "Assign"
      input: "deconv16/weights/Adam_1"
      input: "save/RestoreV2_56"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv16/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 8
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_57/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/BatchNorm/beta"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_57/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_57"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_57/tensor_names"
      input: "save/RestoreV2_57/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_57"
      op: "Assign"
      input: "deconv32/BatchNorm/beta"
      input: "save/RestoreV2_57"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_58/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/BatchNorm/beta/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_58/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_58"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_58/tensor_names"
      input: "save/RestoreV2_58/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_58"
      op: "Assign"
      input: "deconv32/BatchNorm/beta/Adam"
      input: "save/RestoreV2_58"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_59/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/BatchNorm/beta/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_59/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_59"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_59/tensor_names"
      input: "save/RestoreV2_59/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_59"
      op: "Assign"
      input: "deconv32/BatchNorm/beta/Adam_1"
      input: "save/RestoreV2_59"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_60/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/BatchNorm/gamma"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_60/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_60"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_60/tensor_names"
      input: "save/RestoreV2_60/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_60"
      op: "Assign"
      input: "deconv32/BatchNorm/gamma"
      input: "save/RestoreV2_60"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_61/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/BatchNorm/gamma/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_61/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_61"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_61/tensor_names"
      input: "save/RestoreV2_61/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_61"
      op: "Assign"
      input: "deconv32/BatchNorm/gamma/Adam"
      input: "save/RestoreV2_61"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_62/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/BatchNorm/gamma/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_62/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_62"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_62/tensor_names"
      input: "save/RestoreV2_62/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_62"
      op: "Assign"
      input: "deconv32/BatchNorm/gamma/Adam_1"
      input: "save/RestoreV2_62"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_63/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/BatchNorm/moving_mean"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_63/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_63"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_63/tensor_names"
      input: "save/RestoreV2_63/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_63"
      op: "Assign"
      input: "deconv32/BatchNorm/moving_mean"
      input: "save/RestoreV2_63"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_64/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/BatchNorm/moving_variance"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_64/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_64"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_64/tensor_names"
      input: "save/RestoreV2_64/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_64"
      op: "Assign"
      input: "deconv32/BatchNorm/moving_variance"
      input: "save/RestoreV2_64"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_65/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/weights"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_65/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_65"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_65/tensor_names"
      input: "save/RestoreV2_65/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_65"
      op: "Assign"
      input: "deconv32/weights"
      input: "save/RestoreV2_65"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_66/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/weights/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_66/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_66"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_66/tensor_names"
      input: "save/RestoreV2_66/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_66"
      op: "Assign"
      input: "deconv32/weights/Adam"
      input: "save/RestoreV2_66"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_67/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv32/weights/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_67/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_67"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_67/tensor_names"
      input: "save/RestoreV2_67/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_67"
      op: "Assign"
      input: "deconv32/weights/Adam_1"
      input: "save/RestoreV2_67"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv32/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 4
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_68/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv64/weights"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_68/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_68"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_68/tensor_names"
      input: "save/RestoreV2_68/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_68"
      op: "Assign"
      input: "deconv64/weights"
      input: "save/RestoreV2_68"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_69/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv64/weights/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_69/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_69"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_69/tensor_names"
      input: "save/RestoreV2_69/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_69"
      op: "Assign"
      input: "deconv64/weights/Adam"
      input: "save/RestoreV2_69"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_70/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv64/weights/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_70/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_70"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_70/tensor_names"
      input: "save/RestoreV2_70/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_70"
      op: "Assign"
      input: "deconv64/weights/Adam_1"
      input: "save/RestoreV2_70"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv64/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_71/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/BatchNorm/beta"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_71/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_71"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_71/tensor_names"
      input: "save/RestoreV2_71/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_71"
      op: "Assign"
      input: "deconv8/BatchNorm/beta"
      input: "save/RestoreV2_71"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_72/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/BatchNorm/beta/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_72/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_72"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_72/tensor_names"
      input: "save/RestoreV2_72/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_72"
      op: "Assign"
      input: "deconv8/BatchNorm/beta/Adam"
      input: "save/RestoreV2_72"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_73/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/BatchNorm/beta/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_73/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_73"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_73/tensor_names"
      input: "save/RestoreV2_73/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_73"
      op: "Assign"
      input: "deconv8/BatchNorm/beta/Adam_1"
      input: "save/RestoreV2_73"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_74/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/BatchNorm/gamma"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_74/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_74"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_74/tensor_names"
      input: "save/RestoreV2_74/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_74"
      op: "Assign"
      input: "deconv8/BatchNorm/gamma"
      input: "save/RestoreV2_74"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_75/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/BatchNorm/gamma/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_75/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_75"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_75/tensor_names"
      input: "save/RestoreV2_75/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_75"
      op: "Assign"
      input: "deconv8/BatchNorm/gamma/Adam"
      input: "save/RestoreV2_75"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_76/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/BatchNorm/gamma/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_76/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_76"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_76/tensor_names"
      input: "save/RestoreV2_76/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_76"
      op: "Assign"
      input: "deconv8/BatchNorm/gamma/Adam_1"
      input: "save/RestoreV2_76"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_77/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/BatchNorm/moving_mean"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_77/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_77"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_77/tensor_names"
      input: "save/RestoreV2_77/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_77"
      op: "Assign"
      input: "deconv8/BatchNorm/moving_mean"
      input: "save/RestoreV2_77"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_78/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/BatchNorm/moving_variance"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_78/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_78"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_78/tensor_names"
      input: "save/RestoreV2_78/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_78"
      op: "Assign"
      input: "deconv8/BatchNorm/moving_variance"
      input: "save/RestoreV2_78"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_79/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/weights"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_79/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_79"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_79/tensor_names"
      input: "save/RestoreV2_79/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_79"
      op: "Assign"
      input: "deconv8/weights"
      input: "save/RestoreV2_79"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_80/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/weights/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_80/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_80"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_80/tensor_names"
      input: "save/RestoreV2_80/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_80"
      op: "Assign"
      input: "deconv8/weights/Adam"
      input: "save/RestoreV2_80"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_81/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "deconv8/weights/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_81/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_81"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_81/tensor_names"
      input: "save/RestoreV2_81/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_81"
      op: "Assign"
      input: "deconv8/weights/Adam_1"
      input: "save/RestoreV2_81"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@deconv8/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 3
              }
              dim {
                size: 16
              }
              dim {
                size: 16
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_82/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/BatchNorm/beta"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_82/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_82"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_82/tensor_names"
      input: "save/RestoreV2_82/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_82"
      op: "Assign"
      input: "fc256/BatchNorm/beta"
      input: "save/RestoreV2_82"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_83/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/BatchNorm/beta/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_83/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_83"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_83/tensor_names"
      input: "save/RestoreV2_83/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_83"
      op: "Assign"
      input: "fc256/BatchNorm/beta/Adam"
      input: "save/RestoreV2_83"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_84/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/BatchNorm/beta/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_84/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_84"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_84/tensor_names"
      input: "save/RestoreV2_84/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_84"
      op: "Assign"
      input: "fc256/BatchNorm/beta/Adam_1"
      input: "save/RestoreV2_84"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/beta"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_85/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/BatchNorm/gamma"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_85/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_85"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_85/tensor_names"
      input: "save/RestoreV2_85/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_85"
      op: "Assign"
      input: "fc256/BatchNorm/gamma"
      input: "save/RestoreV2_85"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_86/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/BatchNorm/gamma/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_86/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_86"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_86/tensor_names"
      input: "save/RestoreV2_86/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_86"
      op: "Assign"
      input: "fc256/BatchNorm/gamma/Adam"
      input: "save/RestoreV2_86"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_87/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/BatchNorm/gamma/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_87/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_87"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_87/tensor_names"
      input: "save/RestoreV2_87/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_87"
      op: "Assign"
      input: "fc256/BatchNorm/gamma/Adam_1"
      input: "save/RestoreV2_87"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/gamma"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_88/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/BatchNorm/moving_mean"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_88/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_88"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_88/tensor_names"
      input: "save/RestoreV2_88/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_88"
      op: "Assign"
      input: "fc256/BatchNorm/moving_mean"
      input: "save/RestoreV2_88"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_89/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/BatchNorm/moving_variance"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_89/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_89"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_89/tensor_names"
      input: "save/RestoreV2_89/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_89"
      op: "Assign"
      input: "fc256/BatchNorm/moving_variance"
      input: "save/RestoreV2_89"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/BatchNorm/moving_variance"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_90/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/weights"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_90/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_90"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_90/tensor_names"
      input: "save/RestoreV2_90/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_90"
      op: "Assign"
      input: "fc256/weights"
      input: "save/RestoreV2_90"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_91/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/weights/Adam"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_91/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_91"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_91/tensor_names"
      input: "save/RestoreV2_91/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_91"
      op: "Assign"
      input: "fc256/weights/Adam"
      input: "save/RestoreV2_91"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_92/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "fc256/weights/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_92/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_92"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_92/tensor_names"
      input: "save/RestoreV2_92/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_92"
      op: "Assign"
      input: "fc256/weights/Adam_1"
      input: "save/RestoreV2_92"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@fc256/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/restore_shard"
      op: "NoOp"
      input: "^save/Assign"
      input: "^save/Assign_1"
      input: "^save/Assign_2"
      input: "^save/Assign_3"
      input: "^save/Assign_4"
      input: "^save/Assign_5"
      input: "^save/Assign_6"
      input: "^save/Assign_7"
      input: "^save/Assign_8"
      input: "^save/Assign_9"
      input: "^save/Assign_10"
      input: "^save/Assign_11"
      input: "^save/Assign_12"
      input: "^save/Assign_13"
      input: "^save/Assign_14"
      input: "^save/Assign_15"
      input: "^save/Assign_16"
      input: "^save/Assign_17"
      input: "^save/Assign_18"
      input: "^save/Assign_19"
      input: "^save/Assign_20"
      input: "^save/Assign_21"
      input: "^save/Assign_22"
      input: "^save/Assign_23"
      input: "^save/Assign_24"
      input: "^save/Assign_25"
      input: "^save/Assign_26"
      input: "^save/Assign_27"
      input: "^save/Assign_28"
      input: "^save/Assign_29"
      input: "^save/Assign_30"
      input: "^save/Assign_31"
      input: "^save/Assign_32"
      input: "^save/Assign_33"
      input: "^save/Assign_34"
      input: "^save/Assign_35"
      input: "^save/Assign_36"
      input: "^save/Assign_37"
      input: "^save/Assign_38"
      input: "^save/Assign_39"
      input: "^save/Assign_40"
      input: "^save/Assign_41"
      input: "^save/Assign_42"
      input: "^save/Assign_43"
      input: "^save/Assign_44"
      input: "^save/Assign_45"
      input: "^save/Assign_46"
      input: "^save/Assign_47"
      input: "^save/Assign_48"
      input: "^save/Assign_49"
      input: "^save/Assign_50"
      input: "^save/Assign_51"
      input: "^save/Assign_52"
      input: "^save/Assign_53"
      input: "^save/Assign_54"
      input: "^save/Assign_55"
      input: "^save/Assign_56"
      input: "^save/Assign_57"
      input: "^save/Assign_58"
      input: "^save/Assign_59"
      input: "^save/Assign_60"
      input: "^save/Assign_61"
      input: "^save/Assign_62"
      input: "^save/Assign_63"
      input: "^save/Assign_64"
      input: "^save/Assign_65"
      input: "^save/Assign_66"
      input: "^save/Assign_67"
      input: "^save/Assign_68"
      input: "^save/Assign_69"
      input: "^save/Assign_70"
      input: "^save/Assign_71"
      input: "^save/Assign_72"
      input: "^save/Assign_73"
      input: "^save/Assign_74"
      input: "^save/Assign_75"
      input: "^save/Assign_76"
      input: "^save/Assign_77"
      input: "^save/Assign_78"
      input: "^save/Assign_79"
      input: "^save/Assign_80"
      input: "^save/Assign_81"
      input: "^save/Assign_82"
      input: "^save/Assign_83"
      input: "^save/Assign_84"
      input: "^save/Assign_85"
      input: "^save/Assign_86"
      input: "^save/Assign_87"
      input: "^save/Assign_88"
      input: "^save/Assign_89"
      input: "^save/Assign_90"
      input: "^save/Assign_91"
      input: "^save/Assign_92"
    }
    node {
      name: "save/RestoreV2_93/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "epoch"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_93/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_93"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_93/tensor_names"
      input: "save/RestoreV2_93/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_INT32
          }
        }
      }
    }
    node {
      name: "save/Assign_93"
      op: "Assign"
      input: "epoch"
      input: "save/RestoreV2_93"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@epoch"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_94/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "global_step"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_94/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_94"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_94/tensor_names"
      input: "save/RestoreV2_94/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_INT32
          }
        }
      }
    }
    node {
      name: "save/Assign_94"
      op: "Assign"
      input: "global_step"
      input: "save/RestoreV2_94"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/restore_shard_1"
      op: "NoOp"
      input: "^save/Assign_93"
      input: "^save/Assign_94"
    }
    node {
      name: "save/restore_all/NoOp"
      op: "NoOp"
      input: "^save/restore_shard"
    }
    node {
      name: "save/restore_all/NoOp_1"
      op: "NoOp"
      input: "^save/restore_shard_1"
    }
    node {
      name: "save/restore_all"
      op: "NoOp"
      input: "^save/restore_all/NoOp"
      input: "^save/restore_all/NoOp_1"
    }
    versions {
      producer: 22
    }
  }
  saver_def {
    filename_tensor_name: "save/Const:0"
    save_tensor_name: "save/Identity:0"
    restore_op_name: "save/restore_all"
    max_to_keep: 5
    sharded: true
    keep_checkpoint_every_n_hours: 10000.0
    version: V2
  }
  collection_def {
    key: "cond_context"
    value {
      bytes_list {
        value: "\n\037conv32/BatchNorm/cond/cond_text\022\037conv32/BatchNorm/cond/pred_id:0\032 conv32/BatchNorm/cond/switch_t:0 \001*\231\006\n\034conv32/BatchNorm/beta/read:0\n\035conv32/BatchNorm/cond/Const:0\n\037conv32/BatchNorm/cond/Const_1:0\n-conv32/BatchNorm/cond/FusedBatchNorm/Switch:1\n/conv32/BatchNorm/cond/FusedBatchNorm/Switch_1:1\n/conv32/BatchNorm/cond/FusedBatchNorm/Switch_2:1\n&conv32/BatchNorm/cond/FusedBatchNorm:0\n&conv32/BatchNorm/cond/FusedBatchNorm:1\n&conv32/BatchNorm/cond/FusedBatchNorm:2\n&conv32/BatchNorm/cond/FusedBatchNorm:3\n&conv32/BatchNorm/cond/FusedBatchNorm:4\n\037conv32/BatchNorm/cond/pred_id:0\n conv32/BatchNorm/cond/switch_t:0\n\035conv32/BatchNorm/gamma/read:0\n\024conv32/convolution:0\022E\n\024conv32/convolution:0\022-conv32/BatchNorm/cond/FusedBatchNorm/Switch:1\022P\n\035conv32/BatchNorm/gamma/read:0\022/conv32/BatchNorm/cond/FusedBatchNorm/Switch_1:1\022O\n\034conv32/BatchNorm/beta/read:0\022/conv32/BatchNorm/cond/FusedBatchNorm/Switch_2:1"
        value: "\n!conv32/BatchNorm/cond/cond_text_1\022\037conv32/BatchNorm/cond/pred_id:0\032 conv32/BatchNorm/cond/switch_f:0*\333\010\n\034conv32/BatchNorm/beta/read:0\n/conv32/BatchNorm/cond/FusedBatchNorm_1/Switch:0\n1conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_1:0\n1conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_2:0\n1conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_3:0\n1conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_4:0\n(conv32/BatchNorm/cond/FusedBatchNorm_1:0\n(conv32/BatchNorm/cond/FusedBatchNorm_1:1\n(conv32/BatchNorm/cond/FusedBatchNorm_1:2\n(conv32/BatchNorm/cond/FusedBatchNorm_1:3\n(conv32/BatchNorm/cond/FusedBatchNorm_1:4\n\037conv32/BatchNorm/cond/pred_id:0\n conv32/BatchNorm/cond/switch_f:0\n\035conv32/BatchNorm/gamma/read:0\n#conv32/BatchNorm/moving_mean/read:0\n\'conv32/BatchNorm/moving_variance/read:0\n\024conv32/convolution:0\022X\n#conv32/BatchNorm/moving_mean/read:0\0221conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_3:0\022G\n\024conv32/convolution:0\022/conv32/BatchNorm/cond/FusedBatchNorm_1/Switch:0\022\\\n\'conv32/BatchNorm/moving_variance/read:0\0221conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_4:0\022R\n\035conv32/BatchNorm/gamma/read:0\0221conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_1:0\022Q\n\034conv32/BatchNorm/beta/read:0\0221conv32/BatchNorm/cond/FusedBatchNorm_1/Switch_2:0"
        value: "\n!conv32/BatchNorm/cond_1/cond_text\022!conv32/BatchNorm/cond_1/pred_id:0\032\"conv32/BatchNorm/cond_1/switch_t:0 \001*\203\014\n\037conv32/BatchNorm/cond/Merge_1:0\n\037conv32/BatchNorm/cond/Merge_2:0\n0conv32/BatchNorm/cond_1/AssignMovingAvg/Switch:1\n/conv32/BatchNorm/cond_1/AssignMovingAvg/decay:0\n-conv32/BatchNorm/cond_1/AssignMovingAvg/mul:0\n4conv32/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1\n6conv32/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1\n-conv32/BatchNorm/cond_1/AssignMovingAvg/sub:0\n)conv32/BatchNorm/cond_1/AssignMovingAvg:0\n2conv32/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1\n1conv32/BatchNorm/cond_1/AssignMovingAvg_1/decay:0\n/conv32/BatchNorm/cond_1/AssignMovingAvg_1/mul:0\n6conv32/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1\n8conv32/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1\n/conv32/BatchNorm/cond_1/AssignMovingAvg_1/sub:0\n+conv32/BatchNorm/cond_1/AssignMovingAvg_1:0\n!conv32/BatchNorm/cond_1/pred_id:0\n\"conv32/BatchNorm/cond_1/switch_t:0\n#conv32/BatchNorm/moving_mean/read:0\n\036conv32/BatchNorm/moving_mean:0\n\'conv32/BatchNorm/moving_variance/read:0\n\"conv32/BatchNorm/moving_variance:0\022[\n#conv32/BatchNorm/moving_mean/read:0\0224conv32/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1\022a\n\'conv32/BatchNorm/moving_variance/read:0\0226conv32/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1\022Y\n\037conv32/BatchNorm/cond/Merge_1:0\0226conv32/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1\022X\n\"conv32/BatchNorm/moving_variance:0\0222conv32/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1\022R\n\036conv32/BatchNorm/moving_mean:0\0220conv32/BatchNorm/cond_1/AssignMovingAvg/Switch:1\022[\n\037conv32/BatchNorm/cond/Merge_2:0\0228conv32/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
        value: "\n#conv32/BatchNorm/cond_1/cond_text_1\022!conv32/BatchNorm/cond_1/pred_id:0\032\"conv32/BatchNorm/cond_1/switch_f:0*\277\003\n\"conv32/BatchNorm/cond_1/Switch_1:0\n\"conv32/BatchNorm/cond_1/Switch_1:1\n\"conv32/BatchNorm/cond_1/Switch_2:0\n\"conv32/BatchNorm/cond_1/Switch_2:1\n!conv32/BatchNorm/cond_1/pred_id:0\n\"conv32/BatchNorm/cond_1/switch_f:0\n#conv32/BatchNorm/moving_mean/read:0\n\'conv32/BatchNorm/moving_variance/read:0\022I\n#conv32/BatchNorm/moving_mean/read:0\022\"conv32/BatchNorm/cond_1/Switch_1:0\022M\n\'conv32/BatchNorm/moving_variance/read:0\022\"conv32/BatchNorm/cond_1/Switch_2:0"
        value: "\n\037conv16/BatchNorm/cond/cond_text\022\037conv16/BatchNorm/cond/pred_id:0\032 conv16/BatchNorm/cond/switch_t:0 \001*\231\006\n\034conv16/BatchNorm/beta/read:0\n\035conv16/BatchNorm/cond/Const:0\n\037conv16/BatchNorm/cond/Const_1:0\n-conv16/BatchNorm/cond/FusedBatchNorm/Switch:1\n/conv16/BatchNorm/cond/FusedBatchNorm/Switch_1:1\n/conv16/BatchNorm/cond/FusedBatchNorm/Switch_2:1\n&conv16/BatchNorm/cond/FusedBatchNorm:0\n&conv16/BatchNorm/cond/FusedBatchNorm:1\n&conv16/BatchNorm/cond/FusedBatchNorm:2\n&conv16/BatchNorm/cond/FusedBatchNorm:3\n&conv16/BatchNorm/cond/FusedBatchNorm:4\n\037conv16/BatchNorm/cond/pred_id:0\n conv16/BatchNorm/cond/switch_t:0\n\035conv16/BatchNorm/gamma/read:0\n\024conv16/convolution:0\022O\n\034conv16/BatchNorm/beta/read:0\022/conv16/BatchNorm/cond/FusedBatchNorm/Switch_2:1\022P\n\035conv16/BatchNorm/gamma/read:0\022/conv16/BatchNorm/cond/FusedBatchNorm/Switch_1:1\022E\n\024conv16/convolution:0\022-conv16/BatchNorm/cond/FusedBatchNorm/Switch:1"
        value: "\n!conv16/BatchNorm/cond/cond_text_1\022\037conv16/BatchNorm/cond/pred_id:0\032 conv16/BatchNorm/cond/switch_f:0*\333\010\n\034conv16/BatchNorm/beta/read:0\n/conv16/BatchNorm/cond/FusedBatchNorm_1/Switch:0\n1conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_1:0\n1conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_2:0\n1conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_3:0\n1conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_4:0\n(conv16/BatchNorm/cond/FusedBatchNorm_1:0\n(conv16/BatchNorm/cond/FusedBatchNorm_1:1\n(conv16/BatchNorm/cond/FusedBatchNorm_1:2\n(conv16/BatchNorm/cond/FusedBatchNorm_1:3\n(conv16/BatchNorm/cond/FusedBatchNorm_1:4\n\037conv16/BatchNorm/cond/pred_id:0\n conv16/BatchNorm/cond/switch_f:0\n\035conv16/BatchNorm/gamma/read:0\n#conv16/BatchNorm/moving_mean/read:0\n\'conv16/BatchNorm/moving_variance/read:0\n\024conv16/convolution:0\022Q\n\034conv16/BatchNorm/beta/read:0\0221conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_2:0\022R\n\035conv16/BatchNorm/gamma/read:0\0221conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_1:0\022G\n\024conv16/convolution:0\022/conv16/BatchNorm/cond/FusedBatchNorm_1/Switch:0\022X\n#conv16/BatchNorm/moving_mean/read:0\0221conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_3:0\022\\\n\'conv16/BatchNorm/moving_variance/read:0\0221conv16/BatchNorm/cond/FusedBatchNorm_1/Switch_4:0"
        value: "\n!conv16/BatchNorm/cond_1/cond_text\022!conv16/BatchNorm/cond_1/pred_id:0\032\"conv16/BatchNorm/cond_1/switch_t:0 \001*\203\014\n\037conv16/BatchNorm/cond/Merge_1:0\n\037conv16/BatchNorm/cond/Merge_2:0\n0conv16/BatchNorm/cond_1/AssignMovingAvg/Switch:1\n/conv16/BatchNorm/cond_1/AssignMovingAvg/decay:0\n-conv16/BatchNorm/cond_1/AssignMovingAvg/mul:0\n4conv16/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1\n6conv16/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1\n-conv16/BatchNorm/cond_1/AssignMovingAvg/sub:0\n)conv16/BatchNorm/cond_1/AssignMovingAvg:0\n2conv16/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1\n1conv16/BatchNorm/cond_1/AssignMovingAvg_1/decay:0\n/conv16/BatchNorm/cond_1/AssignMovingAvg_1/mul:0\n6conv16/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1\n8conv16/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1\n/conv16/BatchNorm/cond_1/AssignMovingAvg_1/sub:0\n+conv16/BatchNorm/cond_1/AssignMovingAvg_1:0\n!conv16/BatchNorm/cond_1/pred_id:0\n\"conv16/BatchNorm/cond_1/switch_t:0\n#conv16/BatchNorm/moving_mean/read:0\n\036conv16/BatchNorm/moving_mean:0\n\'conv16/BatchNorm/moving_variance/read:0\n\"conv16/BatchNorm/moving_variance:0\022Y\n\037conv16/BatchNorm/cond/Merge_1:0\0226conv16/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1\022[\n\037conv16/BatchNorm/cond/Merge_2:0\0228conv16/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1\022X\n\"conv16/BatchNorm/moving_variance:0\0222conv16/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1\022R\n\036conv16/BatchNorm/moving_mean:0\0220conv16/BatchNorm/cond_1/AssignMovingAvg/Switch:1\022[\n#conv16/BatchNorm/moving_mean/read:0\0224conv16/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1\022a\n\'conv16/BatchNorm/moving_variance/read:0\0226conv16/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
        value: "\n#conv16/BatchNorm/cond_1/cond_text_1\022!conv16/BatchNorm/cond_1/pred_id:0\032\"conv16/BatchNorm/cond_1/switch_f:0*\277\003\n\"conv16/BatchNorm/cond_1/Switch_1:0\n\"conv16/BatchNorm/cond_1/Switch_1:1\n\"conv16/BatchNorm/cond_1/Switch_2:0\n\"conv16/BatchNorm/cond_1/Switch_2:1\n!conv16/BatchNorm/cond_1/pred_id:0\n\"conv16/BatchNorm/cond_1/switch_f:0\n#conv16/BatchNorm/moving_mean/read:0\n\'conv16/BatchNorm/moving_variance/read:0\022M\n\'conv16/BatchNorm/moving_variance/read:0\022\"conv16/BatchNorm/cond_1/Switch_2:0\022I\n#conv16/BatchNorm/moving_mean/read:0\022\"conv16/BatchNorm/cond_1/Switch_1:0"
        value: "\n\036conv8/BatchNorm/cond/cond_text\022\036conv8/BatchNorm/cond/pred_id:0\032\037conv8/BatchNorm/cond/switch_t:0 \001*\204\006\n\033conv8/BatchNorm/beta/read:0\n\034conv8/BatchNorm/cond/Const:0\n\036conv8/BatchNorm/cond/Const_1:0\n,conv8/BatchNorm/cond/FusedBatchNorm/Switch:1\n.conv8/BatchNorm/cond/FusedBatchNorm/Switch_1:1\n.conv8/BatchNorm/cond/FusedBatchNorm/Switch_2:1\n%conv8/BatchNorm/cond/FusedBatchNorm:0\n%conv8/BatchNorm/cond/FusedBatchNorm:1\n%conv8/BatchNorm/cond/FusedBatchNorm:2\n%conv8/BatchNorm/cond/FusedBatchNorm:3\n%conv8/BatchNorm/cond/FusedBatchNorm:4\n\036conv8/BatchNorm/cond/pred_id:0\n\037conv8/BatchNorm/cond/switch_t:0\n\034conv8/BatchNorm/gamma/read:0\n\023conv8/convolution:0\022C\n\023conv8/convolution:0\022,conv8/BatchNorm/cond/FusedBatchNorm/Switch:1\022N\n\034conv8/BatchNorm/gamma/read:0\022.conv8/BatchNorm/cond/FusedBatchNorm/Switch_1:1\022M\n\033conv8/BatchNorm/beta/read:0\022.conv8/BatchNorm/cond/FusedBatchNorm/Switch_2:1"
        value: "\n conv8/BatchNorm/cond/cond_text_1\022\036conv8/BatchNorm/cond/pred_id:0\032\037conv8/BatchNorm/cond/switch_f:0*\300\010\n\033conv8/BatchNorm/beta/read:0\n.conv8/BatchNorm/cond/FusedBatchNorm_1/Switch:0\n0conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_1:0\n0conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_2:0\n0conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_3:0\n0conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_4:0\n\'conv8/BatchNorm/cond/FusedBatchNorm_1:0\n\'conv8/BatchNorm/cond/FusedBatchNorm_1:1\n\'conv8/BatchNorm/cond/FusedBatchNorm_1:2\n\'conv8/BatchNorm/cond/FusedBatchNorm_1:3\n\'conv8/BatchNorm/cond/FusedBatchNorm_1:4\n\036conv8/BatchNorm/cond/pred_id:0\n\037conv8/BatchNorm/cond/switch_f:0\n\034conv8/BatchNorm/gamma/read:0\n\"conv8/BatchNorm/moving_mean/read:0\n&conv8/BatchNorm/moving_variance/read:0\n\023conv8/convolution:0\022Z\n&conv8/BatchNorm/moving_variance/read:0\0220conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_4:0\022O\n\033conv8/BatchNorm/beta/read:0\0220conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_2:0\022V\n\"conv8/BatchNorm/moving_mean/read:0\0220conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_3:0\022P\n\034conv8/BatchNorm/gamma/read:0\0220conv8/BatchNorm/cond/FusedBatchNorm_1/Switch_1:0\022E\n\023conv8/convolution:0\022.conv8/BatchNorm/cond/FusedBatchNorm_1/Switch:0"
        value: "\n conv8/BatchNorm/cond_1/cond_text\022 conv8/BatchNorm/cond_1/pred_id:0\032!conv8/BatchNorm/cond_1/switch_t:0 \001*\341\013\n\036conv8/BatchNorm/cond/Merge_1:0\n\036conv8/BatchNorm/cond/Merge_2:0\n/conv8/BatchNorm/cond_1/AssignMovingAvg/Switch:1\n.conv8/BatchNorm/cond_1/AssignMovingAvg/decay:0\n,conv8/BatchNorm/cond_1/AssignMovingAvg/mul:0\n3conv8/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1\n5conv8/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1\n,conv8/BatchNorm/cond_1/AssignMovingAvg/sub:0\n(conv8/BatchNorm/cond_1/AssignMovingAvg:0\n1conv8/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1\n0conv8/BatchNorm/cond_1/AssignMovingAvg_1/decay:0\n.conv8/BatchNorm/cond_1/AssignMovingAvg_1/mul:0\n5conv8/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1\n7conv8/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1\n.conv8/BatchNorm/cond_1/AssignMovingAvg_1/sub:0\n*conv8/BatchNorm/cond_1/AssignMovingAvg_1:0\n conv8/BatchNorm/cond_1/pred_id:0\n!conv8/BatchNorm/cond_1/switch_t:0\n\"conv8/BatchNorm/moving_mean/read:0\n\035conv8/BatchNorm/moving_mean:0\n&conv8/BatchNorm/moving_variance/read:0\n!conv8/BatchNorm/moving_variance:0\022Y\n\036conv8/BatchNorm/cond/Merge_2:0\0227conv8/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1\022V\n!conv8/BatchNorm/moving_variance:0\0221conv8/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1\022P\n\035conv8/BatchNorm/moving_mean:0\022/conv8/BatchNorm/cond_1/AssignMovingAvg/Switch:1\022Y\n\"conv8/BatchNorm/moving_mean/read:0\0223conv8/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1\022_\n&conv8/BatchNorm/moving_variance/read:0\0225conv8/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1\022W\n\036conv8/BatchNorm/cond/Merge_1:0\0225conv8/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
        value: "\n\"conv8/BatchNorm/cond_1/cond_text_1\022 conv8/BatchNorm/cond_1/pred_id:0\032!conv8/BatchNorm/cond_1/switch_f:0*\263\003\n!conv8/BatchNorm/cond_1/Switch_1:0\n!conv8/BatchNorm/cond_1/Switch_1:1\n!conv8/BatchNorm/cond_1/Switch_2:0\n!conv8/BatchNorm/cond_1/Switch_2:1\n conv8/BatchNorm/cond_1/pred_id:0\n!conv8/BatchNorm/cond_1/switch_f:0\n\"conv8/BatchNorm/moving_mean/read:0\n&conv8/BatchNorm/moving_variance/read:0\022K\n&conv8/BatchNorm/moving_variance/read:0\022!conv8/BatchNorm/cond_1/Switch_2:0\022G\n\"conv8/BatchNorm/moving_mean/read:0\022!conv8/BatchNorm/cond_1/Switch_1:0"
        value: "\n\036conv4/BatchNorm/cond/cond_text\022\036conv4/BatchNorm/cond/pred_id:0\032\037conv4/BatchNorm/cond/switch_t:0 \001*\204\006\n\033conv4/BatchNorm/beta/read:0\n\034conv4/BatchNorm/cond/Const:0\n\036conv4/BatchNorm/cond/Const_1:0\n,conv4/BatchNorm/cond/FusedBatchNorm/Switch:1\n.conv4/BatchNorm/cond/FusedBatchNorm/Switch_1:1\n.conv4/BatchNorm/cond/FusedBatchNorm/Switch_2:1\n%conv4/BatchNorm/cond/FusedBatchNorm:0\n%conv4/BatchNorm/cond/FusedBatchNorm:1\n%conv4/BatchNorm/cond/FusedBatchNorm:2\n%conv4/BatchNorm/cond/FusedBatchNorm:3\n%conv4/BatchNorm/cond/FusedBatchNorm:4\n\036conv4/BatchNorm/cond/pred_id:0\n\037conv4/BatchNorm/cond/switch_t:0\n\034conv4/BatchNorm/gamma/read:0\n\023conv4/convolution:0\022C\n\023conv4/convolution:0\022,conv4/BatchNorm/cond/FusedBatchNorm/Switch:1\022M\n\033conv4/BatchNorm/beta/read:0\022.conv4/BatchNorm/cond/FusedBatchNorm/Switch_2:1\022N\n\034conv4/BatchNorm/gamma/read:0\022.conv4/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
        value: "\n conv4/BatchNorm/cond/cond_text_1\022\036conv4/BatchNorm/cond/pred_id:0\032\037conv4/BatchNorm/cond/switch_f:0*\300\010\n\033conv4/BatchNorm/beta/read:0\n.conv4/BatchNorm/cond/FusedBatchNorm_1/Switch:0\n0conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_1:0\n0conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_2:0\n0conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_3:0\n0conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_4:0\n\'conv4/BatchNorm/cond/FusedBatchNorm_1:0\n\'conv4/BatchNorm/cond/FusedBatchNorm_1:1\n\'conv4/BatchNorm/cond/FusedBatchNorm_1:2\n\'conv4/BatchNorm/cond/FusedBatchNorm_1:3\n\'conv4/BatchNorm/cond/FusedBatchNorm_1:4\n\036conv4/BatchNorm/cond/pred_id:0\n\037conv4/BatchNorm/cond/switch_f:0\n\034conv4/BatchNorm/gamma/read:0\n\"conv4/BatchNorm/moving_mean/read:0\n&conv4/BatchNorm/moving_variance/read:0\n\023conv4/convolution:0\022E\n\023conv4/convolution:0\022.conv4/BatchNorm/cond/FusedBatchNorm_1/Switch:0\022O\n\033conv4/BatchNorm/beta/read:0\0220conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_2:0\022V\n\"conv4/BatchNorm/moving_mean/read:0\0220conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_3:0\022Z\n&conv4/BatchNorm/moving_variance/read:0\0220conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_4:0\022P\n\034conv4/BatchNorm/gamma/read:0\0220conv4/BatchNorm/cond/FusedBatchNorm_1/Switch_1:0"
        value: "\n conv4/BatchNorm/cond_1/cond_text\022 conv4/BatchNorm/cond_1/pred_id:0\032!conv4/BatchNorm/cond_1/switch_t:0 \001*\341\013\n\036conv4/BatchNorm/cond/Merge_1:0\n\036conv4/BatchNorm/cond/Merge_2:0\n/conv4/BatchNorm/cond_1/AssignMovingAvg/Switch:1\n.conv4/BatchNorm/cond_1/AssignMovingAvg/decay:0\n,conv4/BatchNorm/cond_1/AssignMovingAvg/mul:0\n3conv4/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1\n5conv4/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1\n,conv4/BatchNorm/cond_1/AssignMovingAvg/sub:0\n(conv4/BatchNorm/cond_1/AssignMovingAvg:0\n1conv4/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1\n0conv4/BatchNorm/cond_1/AssignMovingAvg_1/decay:0\n.conv4/BatchNorm/cond_1/AssignMovingAvg_1/mul:0\n5conv4/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1\n7conv4/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1\n.conv4/BatchNorm/cond_1/AssignMovingAvg_1/sub:0\n*conv4/BatchNorm/cond_1/AssignMovingAvg_1:0\n conv4/BatchNorm/cond_1/pred_id:0\n!conv4/BatchNorm/cond_1/switch_t:0\n\"conv4/BatchNorm/moving_mean/read:0\n\035conv4/BatchNorm/moving_mean:0\n&conv4/BatchNorm/moving_variance/read:0\n!conv4/BatchNorm/moving_variance:0\022Y\n\036conv4/BatchNorm/cond/Merge_2:0\0227conv4/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1\022_\n&conv4/BatchNorm/moving_variance/read:0\0225conv4/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1\022Y\n\"conv4/BatchNorm/moving_mean/read:0\0223conv4/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1\022V\n!conv4/BatchNorm/moving_variance:0\0221conv4/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1\022P\n\035conv4/BatchNorm/moving_mean:0\022/conv4/BatchNorm/cond_1/AssignMovingAvg/Switch:1\022W\n\036conv4/BatchNorm/cond/Merge_1:0\0225conv4/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
        value: "\n\"conv4/BatchNorm/cond_1/cond_text_1\022 conv4/BatchNorm/cond_1/pred_id:0\032!conv4/BatchNorm/cond_1/switch_f:0*\263\003\n!conv4/BatchNorm/cond_1/Switch_1:0\n!conv4/BatchNorm/cond_1/Switch_1:1\n!conv4/BatchNorm/cond_1/Switch_2:0\n!conv4/BatchNorm/cond_1/Switch_2:1\n conv4/BatchNorm/cond_1/pred_id:0\n!conv4/BatchNorm/cond_1/switch_f:0\n\"conv4/BatchNorm/moving_mean/read:0\n&conv4/BatchNorm/moving_variance/read:0\022K\n&conv4/BatchNorm/moving_variance/read:0\022!conv4/BatchNorm/cond_1/Switch_2:0\022G\n\"conv4/BatchNorm/moving_mean/read:0\022!conv4/BatchNorm/cond_1/Switch_1:0"
        value: "\n\036fc256/BatchNorm/cond/cond_text\022\036fc256/BatchNorm/cond/pred_id:0\032\037fc256/BatchNorm/cond/switch_t:0 \001*\220\006\n\031fc256/BatchNorm/Reshape:0\n\033fc256/BatchNorm/beta/read:0\n\034fc256/BatchNorm/cond/Const:0\n\036fc256/BatchNorm/cond/Const_1:0\n,fc256/BatchNorm/cond/FusedBatchNorm/Switch:1\n.fc256/BatchNorm/cond/FusedBatchNorm/Switch_1:1\n.fc256/BatchNorm/cond/FusedBatchNorm/Switch_2:1\n%fc256/BatchNorm/cond/FusedBatchNorm:0\n%fc256/BatchNorm/cond/FusedBatchNorm:1\n%fc256/BatchNorm/cond/FusedBatchNorm:2\n%fc256/BatchNorm/cond/FusedBatchNorm:3\n%fc256/BatchNorm/cond/FusedBatchNorm:4\n\036fc256/BatchNorm/cond/pred_id:0\n\037fc256/BatchNorm/cond/switch_t:0\n\034fc256/BatchNorm/gamma/read:0\022I\n\031fc256/BatchNorm/Reshape:0\022,fc256/BatchNorm/cond/FusedBatchNorm/Switch:1\022M\n\033fc256/BatchNorm/beta/read:0\022.fc256/BatchNorm/cond/FusedBatchNorm/Switch_2:1\022N\n\034fc256/BatchNorm/gamma/read:0\022.fc256/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
        value: "\n fc256/BatchNorm/cond/cond_text_1\022\036fc256/BatchNorm/cond/pred_id:0\032\037fc256/BatchNorm/cond/switch_f:0*\314\010\n\031fc256/BatchNorm/Reshape:0\n\033fc256/BatchNorm/beta/read:0\n.fc256/BatchNorm/cond/FusedBatchNorm_1/Switch:0\n0fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_1:0\n0fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_2:0\n0fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_3:0\n0fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_4:0\n\'fc256/BatchNorm/cond/FusedBatchNorm_1:0\n\'fc256/BatchNorm/cond/FusedBatchNorm_1:1\n\'fc256/BatchNorm/cond/FusedBatchNorm_1:2\n\'fc256/BatchNorm/cond/FusedBatchNorm_1:3\n\'fc256/BatchNorm/cond/FusedBatchNorm_1:4\n\036fc256/BatchNorm/cond/pred_id:0\n\037fc256/BatchNorm/cond/switch_f:0\n\034fc256/BatchNorm/gamma/read:0\n\"fc256/BatchNorm/moving_mean/read:0\n&fc256/BatchNorm/moving_variance/read:0\022K\n\031fc256/BatchNorm/Reshape:0\022.fc256/BatchNorm/cond/FusedBatchNorm_1/Switch:0\022O\n\033fc256/BatchNorm/beta/read:0\0220fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_2:0\022V\n\"fc256/BatchNorm/moving_mean/read:0\0220fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_3:0\022Z\n&fc256/BatchNorm/moving_variance/read:0\0220fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_4:0\022P\n\034fc256/BatchNorm/gamma/read:0\0220fc256/BatchNorm/cond/FusedBatchNorm_1/Switch_1:0"
        value: "\n fc256/BatchNorm/cond_1/cond_text\022 fc256/BatchNorm/cond_1/pred_id:0\032!fc256/BatchNorm/cond_1/switch_t:0 \001*\341\013\n\036fc256/BatchNorm/cond/Merge_1:0\n\036fc256/BatchNorm/cond/Merge_2:0\n/fc256/BatchNorm/cond_1/AssignMovingAvg/Switch:1\n.fc256/BatchNorm/cond_1/AssignMovingAvg/decay:0\n,fc256/BatchNorm/cond_1/AssignMovingAvg/mul:0\n3fc256/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1\n5fc256/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1\n,fc256/BatchNorm/cond_1/AssignMovingAvg/sub:0\n(fc256/BatchNorm/cond_1/AssignMovingAvg:0\n1fc256/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1\n0fc256/BatchNorm/cond_1/AssignMovingAvg_1/decay:0\n.fc256/BatchNorm/cond_1/AssignMovingAvg_1/mul:0\n5fc256/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1\n7fc256/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1\n.fc256/BatchNorm/cond_1/AssignMovingAvg_1/sub:0\n*fc256/BatchNorm/cond_1/AssignMovingAvg_1:0\n fc256/BatchNorm/cond_1/pred_id:0\n!fc256/BatchNorm/cond_1/switch_t:0\n\"fc256/BatchNorm/moving_mean/read:0\n\035fc256/BatchNorm/moving_mean:0\n&fc256/BatchNorm/moving_variance/read:0\n!fc256/BatchNorm/moving_variance:0\022P\n\035fc256/BatchNorm/moving_mean:0\022/fc256/BatchNorm/cond_1/AssignMovingAvg/Switch:1\022V\n!fc256/BatchNorm/moving_variance:0\0221fc256/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1\022_\n&fc256/BatchNorm/moving_variance/read:0\0225fc256/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1\022Y\n\"fc256/BatchNorm/moving_mean/read:0\0223fc256/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1\022Y\n\036fc256/BatchNorm/cond/Merge_2:0\0227fc256/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1\022W\n\036fc256/BatchNorm/cond/Merge_1:0\0225fc256/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
        value: "\n\"fc256/BatchNorm/cond_1/cond_text_1\022 fc256/BatchNorm/cond_1/pred_id:0\032!fc256/BatchNorm/cond_1/switch_f:0*\263\003\n!fc256/BatchNorm/cond_1/Switch_1:0\n!fc256/BatchNorm/cond_1/Switch_1:1\n!fc256/BatchNorm/cond_1/Switch_2:0\n!fc256/BatchNorm/cond_1/Switch_2:1\n fc256/BatchNorm/cond_1/pred_id:0\n!fc256/BatchNorm/cond_1/switch_f:0\n\"fc256/BatchNorm/moving_mean/read:0\n&fc256/BatchNorm/moving_variance/read:0\022G\n\"fc256/BatchNorm/moving_mean/read:0\022!fc256/BatchNorm/cond_1/Switch_1:0\022K\n&fc256/BatchNorm/moving_variance/read:0\022!fc256/BatchNorm/cond_1/Switch_2:0"
        value: "\n deconv8/BatchNorm/cond/cond_text\022 deconv8/BatchNorm/cond/pred_id:0\032!deconv8/BatchNorm/cond/switch_t:0 \001*\270\006\n\035deconv8/BatchNorm/beta/read:0\n\036deconv8/BatchNorm/cond/Const:0\n deconv8/BatchNorm/cond/Const_1:0\n.deconv8/BatchNorm/cond/FusedBatchNorm/Switch:1\n0deconv8/BatchNorm/cond/FusedBatchNorm/Switch_1:1\n0deconv8/BatchNorm/cond/FusedBatchNorm/Switch_2:1\n\'deconv8/BatchNorm/cond/FusedBatchNorm:0\n\'deconv8/BatchNorm/cond/FusedBatchNorm:1\n\'deconv8/BatchNorm/cond/FusedBatchNorm:2\n\'deconv8/BatchNorm/cond/FusedBatchNorm:3\n\'deconv8/BatchNorm/cond/FusedBatchNorm:4\n deconv8/BatchNorm/cond/pred_id:0\n!deconv8/BatchNorm/cond/switch_t:0\n\036deconv8/BatchNorm/gamma/read:0\n\032deconv8/conv2d_transpose:0\022Q\n\035deconv8/BatchNorm/beta/read:0\0220deconv8/BatchNorm/cond/FusedBatchNorm/Switch_2:1\022R\n\036deconv8/BatchNorm/gamma/read:0\0220deconv8/BatchNorm/cond/FusedBatchNorm/Switch_1:1\022L\n\032deconv8/conv2d_transpose:0\022.deconv8/BatchNorm/cond/FusedBatchNorm/Switch:1"
        value: "\n\"deconv8/BatchNorm/cond/cond_text_1\022 deconv8/BatchNorm/cond/pred_id:0\032!deconv8/BatchNorm/cond/switch_f:0*\200\t\n\035deconv8/BatchNorm/beta/read:0\n0deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch:0\n2deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_1:0\n2deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_2:0\n2deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_3:0\n2deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_4:0\n)deconv8/BatchNorm/cond/FusedBatchNorm_1:0\n)deconv8/BatchNorm/cond/FusedBatchNorm_1:1\n)deconv8/BatchNorm/cond/FusedBatchNorm_1:2\n)deconv8/BatchNorm/cond/FusedBatchNorm_1:3\n)deconv8/BatchNorm/cond/FusedBatchNorm_1:4\n deconv8/BatchNorm/cond/pred_id:0\n!deconv8/BatchNorm/cond/switch_f:0\n\036deconv8/BatchNorm/gamma/read:0\n$deconv8/BatchNorm/moving_mean/read:0\n(deconv8/BatchNorm/moving_variance/read:0\n\032deconv8/conv2d_transpose:0\022S\n\035deconv8/BatchNorm/beta/read:0\0222deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_2:0\022T\n\036deconv8/BatchNorm/gamma/read:0\0222deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_1:0\022Z\n$deconv8/BatchNorm/moving_mean/read:0\0222deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_3:0\022^\n(deconv8/BatchNorm/moving_variance/read:0\0222deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch_4:0\022N\n\032deconv8/conv2d_transpose:0\0220deconv8/BatchNorm/cond/FusedBatchNorm_1/Switch:0"
        value: "\n\"deconv8/BatchNorm/cond_1/cond_text\022\"deconv8/BatchNorm/cond_1/pred_id:0\032#deconv8/BatchNorm/cond_1/switch_t:0 \001*\245\014\n deconv8/BatchNorm/cond/Merge_1:0\n deconv8/BatchNorm/cond/Merge_2:0\n1deconv8/BatchNorm/cond_1/AssignMovingAvg/Switch:1\n0deconv8/BatchNorm/cond_1/AssignMovingAvg/decay:0\n.deconv8/BatchNorm/cond_1/AssignMovingAvg/mul:0\n5deconv8/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1\n7deconv8/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1\n.deconv8/BatchNorm/cond_1/AssignMovingAvg/sub:0\n*deconv8/BatchNorm/cond_1/AssignMovingAvg:0\n3deconv8/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1\n2deconv8/BatchNorm/cond_1/AssignMovingAvg_1/decay:0\n0deconv8/BatchNorm/cond_1/AssignMovingAvg_1/mul:0\n7deconv8/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1\n9deconv8/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1\n0deconv8/BatchNorm/cond_1/AssignMovingAvg_1/sub:0\n,deconv8/BatchNorm/cond_1/AssignMovingAvg_1:0\n\"deconv8/BatchNorm/cond_1/pred_id:0\n#deconv8/BatchNorm/cond_1/switch_t:0\n$deconv8/BatchNorm/moving_mean/read:0\n\037deconv8/BatchNorm/moving_mean:0\n(deconv8/BatchNorm/moving_variance/read:0\n#deconv8/BatchNorm/moving_variance:0\022]\n deconv8/BatchNorm/cond/Merge_2:0\0229deconv8/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1\022]\n$deconv8/BatchNorm/moving_mean/read:0\0225deconv8/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1\022c\n(deconv8/BatchNorm/moving_variance/read:0\0227deconv8/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1\022[\n deconv8/BatchNorm/cond/Merge_1:0\0227deconv8/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1\022T\n\037deconv8/BatchNorm/moving_mean:0\0221deconv8/BatchNorm/cond_1/AssignMovingAvg/Switch:1\022Z\n#deconv8/BatchNorm/moving_variance:0\0223deconv8/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
        value: "\n$deconv8/BatchNorm/cond_1/cond_text_1\022\"deconv8/BatchNorm/cond_1/pred_id:0\032#deconv8/BatchNorm/cond_1/switch_f:0*\313\003\n#deconv8/BatchNorm/cond_1/Switch_1:0\n#deconv8/BatchNorm/cond_1/Switch_1:1\n#deconv8/BatchNorm/cond_1/Switch_2:0\n#deconv8/BatchNorm/cond_1/Switch_2:1\n\"deconv8/BatchNorm/cond_1/pred_id:0\n#deconv8/BatchNorm/cond_1/switch_f:0\n$deconv8/BatchNorm/moving_mean/read:0\n(deconv8/BatchNorm/moving_variance/read:0\022K\n$deconv8/BatchNorm/moving_mean/read:0\022#deconv8/BatchNorm/cond_1/Switch_1:0\022O\n(deconv8/BatchNorm/moving_variance/read:0\022#deconv8/BatchNorm/cond_1/Switch_2:0"
        value: "\n!deconv16/BatchNorm/cond/cond_text\022!deconv16/BatchNorm/cond/pred_id:0\032\"deconv16/BatchNorm/cond/switch_t:0 \001*\315\006\n\036deconv16/BatchNorm/beta/read:0\n\037deconv16/BatchNorm/cond/Const:0\n!deconv16/BatchNorm/cond/Const_1:0\n/deconv16/BatchNorm/cond/FusedBatchNorm/Switch:1\n1deconv16/BatchNorm/cond/FusedBatchNorm/Switch_1:1\n1deconv16/BatchNorm/cond/FusedBatchNorm/Switch_2:1\n(deconv16/BatchNorm/cond/FusedBatchNorm:0\n(deconv16/BatchNorm/cond/FusedBatchNorm:1\n(deconv16/BatchNorm/cond/FusedBatchNorm:2\n(deconv16/BatchNorm/cond/FusedBatchNorm:3\n(deconv16/BatchNorm/cond/FusedBatchNorm:4\n!deconv16/BatchNorm/cond/pred_id:0\n\"deconv16/BatchNorm/cond/switch_t:0\n\037deconv16/BatchNorm/gamma/read:0\n\033deconv16/conv2d_transpose:0\022S\n\036deconv16/BatchNorm/beta/read:0\0221deconv16/BatchNorm/cond/FusedBatchNorm/Switch_2:1\022N\n\033deconv16/conv2d_transpose:0\022/deconv16/BatchNorm/cond/FusedBatchNorm/Switch:1\022T\n\037deconv16/BatchNorm/gamma/read:0\0221deconv16/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
        value: "\n#deconv16/BatchNorm/cond/cond_text_1\022!deconv16/BatchNorm/cond/pred_id:0\032\"deconv16/BatchNorm/cond/switch_f:0*\233\t\n\036deconv16/BatchNorm/beta/read:0\n1deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch:0\n3deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_1:0\n3deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_2:0\n3deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_3:0\n3deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_4:0\n*deconv16/BatchNorm/cond/FusedBatchNorm_1:0\n*deconv16/BatchNorm/cond/FusedBatchNorm_1:1\n*deconv16/BatchNorm/cond/FusedBatchNorm_1:2\n*deconv16/BatchNorm/cond/FusedBatchNorm_1:3\n*deconv16/BatchNorm/cond/FusedBatchNorm_1:4\n!deconv16/BatchNorm/cond/pred_id:0\n\"deconv16/BatchNorm/cond/switch_f:0\n\037deconv16/BatchNorm/gamma/read:0\n%deconv16/BatchNorm/moving_mean/read:0\n)deconv16/BatchNorm/moving_variance/read:0\n\033deconv16/conv2d_transpose:0\022U\n\036deconv16/BatchNorm/beta/read:0\0223deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_2:0\022`\n)deconv16/BatchNorm/moving_variance/read:0\0223deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_4:0\022\\\n%deconv16/BatchNorm/moving_mean/read:0\0223deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_3:0\022P\n\033deconv16/conv2d_transpose:0\0221deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch:0\022V\n\037deconv16/BatchNorm/gamma/read:0\0223deconv16/BatchNorm/cond/FusedBatchNorm_1/Switch_1:0"
        value: "\n#deconv16/BatchNorm/cond_1/cond_text\022#deconv16/BatchNorm/cond_1/pred_id:0\032$deconv16/BatchNorm/cond_1/switch_t:0 \001*\307\014\n!deconv16/BatchNorm/cond/Merge_1:0\n!deconv16/BatchNorm/cond/Merge_2:0\n2deconv16/BatchNorm/cond_1/AssignMovingAvg/Switch:1\n1deconv16/BatchNorm/cond_1/AssignMovingAvg/decay:0\n/deconv16/BatchNorm/cond_1/AssignMovingAvg/mul:0\n6deconv16/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1\n8deconv16/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1\n/deconv16/BatchNorm/cond_1/AssignMovingAvg/sub:0\n+deconv16/BatchNorm/cond_1/AssignMovingAvg:0\n4deconv16/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1\n3deconv16/BatchNorm/cond_1/AssignMovingAvg_1/decay:0\n1deconv16/BatchNorm/cond_1/AssignMovingAvg_1/mul:0\n8deconv16/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1\n:deconv16/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1\n1deconv16/BatchNorm/cond_1/AssignMovingAvg_1/sub:0\n-deconv16/BatchNorm/cond_1/AssignMovingAvg_1:0\n#deconv16/BatchNorm/cond_1/pred_id:0\n$deconv16/BatchNorm/cond_1/switch_t:0\n%deconv16/BatchNorm/moving_mean/read:0\n deconv16/BatchNorm/moving_mean:0\n)deconv16/BatchNorm/moving_variance/read:0\n$deconv16/BatchNorm/moving_variance:0\022_\n!deconv16/BatchNorm/cond/Merge_2:0\022:deconv16/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1\022_\n%deconv16/BatchNorm/moving_mean/read:0\0226deconv16/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1\022e\n)deconv16/BatchNorm/moving_variance/read:0\0228deconv16/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1\022\\\n$deconv16/BatchNorm/moving_variance:0\0224deconv16/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1\022V\n deconv16/BatchNorm/moving_mean:0\0222deconv16/BatchNorm/cond_1/AssignMovingAvg/Switch:1\022]\n!deconv16/BatchNorm/cond/Merge_1:0\0228deconv16/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
        value: "\n%deconv16/BatchNorm/cond_1/cond_text_1\022#deconv16/BatchNorm/cond_1/pred_id:0\032$deconv16/BatchNorm/cond_1/switch_f:0*\327\003\n$deconv16/BatchNorm/cond_1/Switch_1:0\n$deconv16/BatchNorm/cond_1/Switch_1:1\n$deconv16/BatchNorm/cond_1/Switch_2:0\n$deconv16/BatchNorm/cond_1/Switch_2:1\n#deconv16/BatchNorm/cond_1/pred_id:0\n$deconv16/BatchNorm/cond_1/switch_f:0\n%deconv16/BatchNorm/moving_mean/read:0\n)deconv16/BatchNorm/moving_variance/read:0\022M\n%deconv16/BatchNorm/moving_mean/read:0\022$deconv16/BatchNorm/cond_1/Switch_1:0\022Q\n)deconv16/BatchNorm/moving_variance/read:0\022$deconv16/BatchNorm/cond_1/Switch_2:0"
        value: "\n!deconv32/BatchNorm/cond/cond_text\022!deconv32/BatchNorm/cond/pred_id:0\032\"deconv32/BatchNorm/cond/switch_t:0 \001*\315\006\n\036deconv32/BatchNorm/beta/read:0\n\037deconv32/BatchNorm/cond/Const:0\n!deconv32/BatchNorm/cond/Const_1:0\n/deconv32/BatchNorm/cond/FusedBatchNorm/Switch:1\n1deconv32/BatchNorm/cond/FusedBatchNorm/Switch_1:1\n1deconv32/BatchNorm/cond/FusedBatchNorm/Switch_2:1\n(deconv32/BatchNorm/cond/FusedBatchNorm:0\n(deconv32/BatchNorm/cond/FusedBatchNorm:1\n(deconv32/BatchNorm/cond/FusedBatchNorm:2\n(deconv32/BatchNorm/cond/FusedBatchNorm:3\n(deconv32/BatchNorm/cond/FusedBatchNorm:4\n!deconv32/BatchNorm/cond/pred_id:0\n\"deconv32/BatchNorm/cond/switch_t:0\n\037deconv32/BatchNorm/gamma/read:0\n\033deconv32/conv2d_transpose:0\022T\n\037deconv32/BatchNorm/gamma/read:0\0221deconv32/BatchNorm/cond/FusedBatchNorm/Switch_1:1\022S\n\036deconv32/BatchNorm/beta/read:0\0221deconv32/BatchNorm/cond/FusedBatchNorm/Switch_2:1\022N\n\033deconv32/conv2d_transpose:0\022/deconv32/BatchNorm/cond/FusedBatchNorm/Switch:1"
        value: "\n#deconv32/BatchNorm/cond/cond_text_1\022!deconv32/BatchNorm/cond/pred_id:0\032\"deconv32/BatchNorm/cond/switch_f:0*\233\t\n\036deconv32/BatchNorm/beta/read:0\n1deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch:0\n3deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_1:0\n3deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_2:0\n3deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_3:0\n3deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_4:0\n*deconv32/BatchNorm/cond/FusedBatchNorm_1:0\n*deconv32/BatchNorm/cond/FusedBatchNorm_1:1\n*deconv32/BatchNorm/cond/FusedBatchNorm_1:2\n*deconv32/BatchNorm/cond/FusedBatchNorm_1:3\n*deconv32/BatchNorm/cond/FusedBatchNorm_1:4\n!deconv32/BatchNorm/cond/pred_id:0\n\"deconv32/BatchNorm/cond/switch_f:0\n\037deconv32/BatchNorm/gamma/read:0\n%deconv32/BatchNorm/moving_mean/read:0\n)deconv32/BatchNorm/moving_variance/read:0\n\033deconv32/conv2d_transpose:0\022V\n\037deconv32/BatchNorm/gamma/read:0\0223deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_1:0\022U\n\036deconv32/BatchNorm/beta/read:0\0223deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_2:0\022\\\n%deconv32/BatchNorm/moving_mean/read:0\0223deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_3:0\022`\n)deconv32/BatchNorm/moving_variance/read:0\0223deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch_4:0\022P\n\033deconv32/conv2d_transpose:0\0221deconv32/BatchNorm/cond/FusedBatchNorm_1/Switch:0"
        value: "\n#deconv32/BatchNorm/cond_1/cond_text\022#deconv32/BatchNorm/cond_1/pred_id:0\032$deconv32/BatchNorm/cond_1/switch_t:0 \001*\307\014\n!deconv32/BatchNorm/cond/Merge_1:0\n!deconv32/BatchNorm/cond/Merge_2:0\n2deconv32/BatchNorm/cond_1/AssignMovingAvg/Switch:1\n1deconv32/BatchNorm/cond_1/AssignMovingAvg/decay:0\n/deconv32/BatchNorm/cond_1/AssignMovingAvg/mul:0\n6deconv32/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1\n8deconv32/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1\n/deconv32/BatchNorm/cond_1/AssignMovingAvg/sub:0\n+deconv32/BatchNorm/cond_1/AssignMovingAvg:0\n4deconv32/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1\n3deconv32/BatchNorm/cond_1/AssignMovingAvg_1/decay:0\n1deconv32/BatchNorm/cond_1/AssignMovingAvg_1/mul:0\n8deconv32/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1\n:deconv32/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1\n1deconv32/BatchNorm/cond_1/AssignMovingAvg_1/sub:0\n-deconv32/BatchNorm/cond_1/AssignMovingAvg_1:0\n#deconv32/BatchNorm/cond_1/pred_id:0\n$deconv32/BatchNorm/cond_1/switch_t:0\n%deconv32/BatchNorm/moving_mean/read:0\n deconv32/BatchNorm/moving_mean:0\n)deconv32/BatchNorm/moving_variance/read:0\n$deconv32/BatchNorm/moving_variance:0\022]\n!deconv32/BatchNorm/cond/Merge_1:0\0228deconv32/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1\022V\n deconv32/BatchNorm/moving_mean:0\0222deconv32/BatchNorm/cond_1/AssignMovingAvg/Switch:1\022\\\n$deconv32/BatchNorm/moving_variance:0\0224deconv32/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1\022_\n!deconv32/BatchNorm/cond/Merge_2:0\022:deconv32/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1\022e\n)deconv32/BatchNorm/moving_variance/read:0\0228deconv32/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1\022_\n%deconv32/BatchNorm/moving_mean/read:0\0226deconv32/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
        value: "\n%deconv32/BatchNorm/cond_1/cond_text_1\022#deconv32/BatchNorm/cond_1/pred_id:0\032$deconv32/BatchNorm/cond_1/switch_f:0*\327\003\n$deconv32/BatchNorm/cond_1/Switch_1:0\n$deconv32/BatchNorm/cond_1/Switch_1:1\n$deconv32/BatchNorm/cond_1/Switch_2:0\n$deconv32/BatchNorm/cond_1/Switch_2:1\n#deconv32/BatchNorm/cond_1/pred_id:0\n$deconv32/BatchNorm/cond_1/switch_f:0\n%deconv32/BatchNorm/moving_mean/read:0\n)deconv32/BatchNorm/moving_variance/read:0\022M\n%deconv32/BatchNorm/moving_mean/read:0\022$deconv32/BatchNorm/cond_1/Switch_1:0\022Q\n)deconv32/BatchNorm/moving_variance/read:0\022$deconv32/BatchNorm/cond_1/Switch_2:0"
      }
    }
  }
  collection_def {
    key: "model_variables"
    value {
      node_list {
        value: "conv32/weights:0"
        value: "conv32/BatchNorm/beta:0"
        value: "conv32/BatchNorm/gamma:0"
        value: "conv32/BatchNorm/moving_mean:0"
        value: "conv32/BatchNorm/moving_variance:0"
        value: "conv16/weights:0"
        value: "conv16/BatchNorm/beta:0"
        value: "conv16/BatchNorm/gamma:0"
        value: "conv16/BatchNorm/moving_mean:0"
        value: "conv16/BatchNorm/moving_variance:0"
        value: "conv8/weights:0"
        value: "conv8/BatchNorm/beta:0"
        value: "conv8/BatchNorm/gamma:0"
        value: "conv8/BatchNorm/moving_mean:0"
        value: "conv8/BatchNorm/moving_variance:0"
        value: "conv4/weights:0"
        value: "conv4/BatchNorm/beta:0"
        value: "conv4/BatchNorm/gamma:0"
        value: "conv4/BatchNorm/moving_mean:0"
        value: "conv4/BatchNorm/moving_variance:0"
        value: "fc256/weights:0"
        value: "fc256/BatchNorm/beta:0"
        value: "fc256/BatchNorm/gamma:0"
        value: "fc256/BatchNorm/moving_mean:0"
        value: "fc256/BatchNorm/moving_variance:0"
        value: "deconv8/weights:0"
        value: "deconv8/BatchNorm/beta:0"
        value: "deconv8/BatchNorm/gamma:0"
        value: "deconv8/BatchNorm/moving_mean:0"
        value: "deconv8/BatchNorm/moving_variance:0"
        value: "deconv16/weights:0"
        value: "deconv16/BatchNorm/beta:0"
        value: "deconv16/BatchNorm/gamma:0"
        value: "deconv16/BatchNorm/moving_mean:0"
        value: "deconv16/BatchNorm/moving_variance:0"
        value: "deconv32/weights:0"
        value: "deconv32/BatchNorm/beta:0"
        value: "deconv32/BatchNorm/gamma:0"
        value: "deconv32/BatchNorm/moving_mean:0"
        value: "deconv32/BatchNorm/moving_variance:0"
        value: "deconv64/weights:0"
      }
    }
  }
  collection_def {
    key: "train_op"
    value {
      node_list {
        value: "Adam"
      }
    }
  }
  collection_def {
    key: "trainable_variables"
    value {
      bytes_list {
        value: "\n\020conv32/weights:0\022\025conv32/weights/Assign\032\025conv32/weights/read:0"
        value: "\n\027conv32/BatchNorm/beta:0\022\034conv32/BatchNorm/beta/Assign\032\034conv32/BatchNorm/beta/read:0"
        value: "\n\030conv32/BatchNorm/gamma:0\022\035conv32/BatchNorm/gamma/Assign\032\035conv32/BatchNorm/gamma/read:0"
        value: "\n\020conv16/weights:0\022\025conv16/weights/Assign\032\025conv16/weights/read:0"
        value: "\n\027conv16/BatchNorm/beta:0\022\034conv16/BatchNorm/beta/Assign\032\034conv16/BatchNorm/beta/read:0"
        value: "\n\030conv16/BatchNorm/gamma:0\022\035conv16/BatchNorm/gamma/Assign\032\035conv16/BatchNorm/gamma/read:0"
        value: "\n\017conv8/weights:0\022\024conv8/weights/Assign\032\024conv8/weights/read:0"
        value: "\n\026conv8/BatchNorm/beta:0\022\033conv8/BatchNorm/beta/Assign\032\033conv8/BatchNorm/beta/read:0"
        value: "\n\027conv8/BatchNorm/gamma:0\022\034conv8/BatchNorm/gamma/Assign\032\034conv8/BatchNorm/gamma/read:0"
        value: "\n\017conv4/weights:0\022\024conv4/weights/Assign\032\024conv4/weights/read:0"
        value: "\n\026conv4/BatchNorm/beta:0\022\033conv4/BatchNorm/beta/Assign\032\033conv4/BatchNorm/beta/read:0"
        value: "\n\027conv4/BatchNorm/gamma:0\022\034conv4/BatchNorm/gamma/Assign\032\034conv4/BatchNorm/gamma/read:0"
        value: "\n\017fc256/weights:0\022\024fc256/weights/Assign\032\024fc256/weights/read:0"
        value: "\n\026fc256/BatchNorm/beta:0\022\033fc256/BatchNorm/beta/Assign\032\033fc256/BatchNorm/beta/read:0"
        value: "\n\027fc256/BatchNorm/gamma:0\022\034fc256/BatchNorm/gamma/Assign\032\034fc256/BatchNorm/gamma/read:0"
        value: "\n\021deconv8/weights:0\022\026deconv8/weights/Assign\032\026deconv8/weights/read:0"
        value: "\n\030deconv8/BatchNorm/beta:0\022\035deconv8/BatchNorm/beta/Assign\032\035deconv8/BatchNorm/beta/read:0"
        value: "\n\031deconv8/BatchNorm/gamma:0\022\036deconv8/BatchNorm/gamma/Assign\032\036deconv8/BatchNorm/gamma/read:0"
        value: "\n\022deconv16/weights:0\022\027deconv16/weights/Assign\032\027deconv16/weights/read:0"
        value: "\n\031deconv16/BatchNorm/beta:0\022\036deconv16/BatchNorm/beta/Assign\032\036deconv16/BatchNorm/beta/read:0"
        value: "\n\032deconv16/BatchNorm/gamma:0\022\037deconv16/BatchNorm/gamma/Assign\032\037deconv16/BatchNorm/gamma/read:0"
        value: "\n\022deconv32/weights:0\022\027deconv32/weights/Assign\032\027deconv32/weights/read:0"
        value: "\n\031deconv32/BatchNorm/beta:0\022\036deconv32/BatchNorm/beta/Assign\032\036deconv32/BatchNorm/beta/read:0"
        value: "\n\032deconv32/BatchNorm/gamma:0\022\037deconv32/BatchNorm/gamma/Assign\032\037deconv32/BatchNorm/gamma/read:0"
        value: "\n\022deconv64/weights:0\022\027deconv64/weights/Assign\032\027deconv64/weights/read:0"
      }
    }
  }
  collection_def {
    key: "update_ops"
    value {
      node_list {
        value: "conv32/BatchNorm/cond_1/Merge:0"
        value: "conv32/BatchNorm/cond_1/Merge_1:0"
        value: "conv16/BatchNorm/cond_1/Merge:0"
        value: "conv16/BatchNorm/cond_1/Merge_1:0"
        value: "conv8/BatchNorm/cond_1/Merge:0"
        value: "conv8/BatchNorm/cond_1/Merge_1:0"
        value: "conv4/BatchNorm/cond_1/Merge:0"
        value: "conv4/BatchNorm/cond_1/Merge_1:0"
        value: "fc256/BatchNorm/cond_1/Merge:0"
        value: "fc256/BatchNorm/cond_1/Merge_1:0"
        value: "deconv8/BatchNorm/cond_1/Merge:0"
        value: "deconv8/BatchNorm/cond_1/Merge_1:0"
        value: "deconv16/BatchNorm/cond_1/Merge:0"
        value: "deconv16/BatchNorm/cond_1/Merge_1:0"
        value: "deconv32/BatchNorm/cond_1/Merge:0"
        value: "deconv32/BatchNorm/cond_1/Merge_1:0"
      }
    }
  }
  collection_def {
    key: "variables"
    value {
      bytes_list {
        value: "\n\020conv32/weights:0\022\025conv32/weights/Assign\032\025conv32/weights/read:0"
        value: "\n\027conv32/BatchNorm/beta:0\022\034conv32/BatchNorm/beta/Assign\032\034conv32/BatchNorm/beta/read:0"
        value: "\n\030conv32/BatchNorm/gamma:0\022\035conv32/BatchNorm/gamma/Assign\032\035conv32/BatchNorm/gamma/read:0"
        value: "\n\036conv32/BatchNorm/moving_mean:0\022#conv32/BatchNorm/moving_mean/Assign\032#conv32/BatchNorm/moving_mean/read:0"
        value: "\n\"conv32/BatchNorm/moving_variance:0\022\'conv32/BatchNorm/moving_variance/Assign\032\'conv32/BatchNorm/moving_variance/read:0"
        value: "\n\020conv16/weights:0\022\025conv16/weights/Assign\032\025conv16/weights/read:0"
        value: "\n\027conv16/BatchNorm/beta:0\022\034conv16/BatchNorm/beta/Assign\032\034conv16/BatchNorm/beta/read:0"
        value: "\n\030conv16/BatchNorm/gamma:0\022\035conv16/BatchNorm/gamma/Assign\032\035conv16/BatchNorm/gamma/read:0"
        value: "\n\036conv16/BatchNorm/moving_mean:0\022#conv16/BatchNorm/moving_mean/Assign\032#conv16/BatchNorm/moving_mean/read:0"
        value: "\n\"conv16/BatchNorm/moving_variance:0\022\'conv16/BatchNorm/moving_variance/Assign\032\'conv16/BatchNorm/moving_variance/read:0"
        value: "\n\017conv8/weights:0\022\024conv8/weights/Assign\032\024conv8/weights/read:0"
        value: "\n\026conv8/BatchNorm/beta:0\022\033conv8/BatchNorm/beta/Assign\032\033conv8/BatchNorm/beta/read:0"
        value: "\n\027conv8/BatchNorm/gamma:0\022\034conv8/BatchNorm/gamma/Assign\032\034conv8/BatchNorm/gamma/read:0"
        value: "\n\035conv8/BatchNorm/moving_mean:0\022\"conv8/BatchNorm/moving_mean/Assign\032\"conv8/BatchNorm/moving_mean/read:0"
        value: "\n!conv8/BatchNorm/moving_variance:0\022&conv8/BatchNorm/moving_variance/Assign\032&conv8/BatchNorm/moving_variance/read:0"
        value: "\n\017conv4/weights:0\022\024conv4/weights/Assign\032\024conv4/weights/read:0"
        value: "\n\026conv4/BatchNorm/beta:0\022\033conv4/BatchNorm/beta/Assign\032\033conv4/BatchNorm/beta/read:0"
        value: "\n\027conv4/BatchNorm/gamma:0\022\034conv4/BatchNorm/gamma/Assign\032\034conv4/BatchNorm/gamma/read:0"
        value: "\n\035conv4/BatchNorm/moving_mean:0\022\"conv4/BatchNorm/moving_mean/Assign\032\"conv4/BatchNorm/moving_mean/read:0"
        value: "\n!conv4/BatchNorm/moving_variance:0\022&conv4/BatchNorm/moving_variance/Assign\032&conv4/BatchNorm/moving_variance/read:0"
        value: "\n\017fc256/weights:0\022\024fc256/weights/Assign\032\024fc256/weights/read:0"
        value: "\n\026fc256/BatchNorm/beta:0\022\033fc256/BatchNorm/beta/Assign\032\033fc256/BatchNorm/beta/read:0"
        value: "\n\027fc256/BatchNorm/gamma:0\022\034fc256/BatchNorm/gamma/Assign\032\034fc256/BatchNorm/gamma/read:0"
        value: "\n\035fc256/BatchNorm/moving_mean:0\022\"fc256/BatchNorm/moving_mean/Assign\032\"fc256/BatchNorm/moving_mean/read:0"
        value: "\n!fc256/BatchNorm/moving_variance:0\022&fc256/BatchNorm/moving_variance/Assign\032&fc256/BatchNorm/moving_variance/read:0"
        value: "\n\021deconv8/weights:0\022\026deconv8/weights/Assign\032\026deconv8/weights/read:0"
        value: "\n\030deconv8/BatchNorm/beta:0\022\035deconv8/BatchNorm/beta/Assign\032\035deconv8/BatchNorm/beta/read:0"
        value: "\n\031deconv8/BatchNorm/gamma:0\022\036deconv8/BatchNorm/gamma/Assign\032\036deconv8/BatchNorm/gamma/read:0"
        value: "\n\037deconv8/BatchNorm/moving_mean:0\022$deconv8/BatchNorm/moving_mean/Assign\032$deconv8/BatchNorm/moving_mean/read:0"
        value: "\n#deconv8/BatchNorm/moving_variance:0\022(deconv8/BatchNorm/moving_variance/Assign\032(deconv8/BatchNorm/moving_variance/read:0"
        value: "\n\022deconv16/weights:0\022\027deconv16/weights/Assign\032\027deconv16/weights/read:0"
        value: "\n\031deconv16/BatchNorm/beta:0\022\036deconv16/BatchNorm/beta/Assign\032\036deconv16/BatchNorm/beta/read:0"
        value: "\n\032deconv16/BatchNorm/gamma:0\022\037deconv16/BatchNorm/gamma/Assign\032\037deconv16/BatchNorm/gamma/read:0"
        value: "\n deconv16/BatchNorm/moving_mean:0\022%deconv16/BatchNorm/moving_mean/Assign\032%deconv16/BatchNorm/moving_mean/read:0"
        value: "\n$deconv16/BatchNorm/moving_variance:0\022)deconv16/BatchNorm/moving_variance/Assign\032)deconv16/BatchNorm/moving_variance/read:0"
        value: "\n\022deconv32/weights:0\022\027deconv32/weights/Assign\032\027deconv32/weights/read:0"
        value: "\n\031deconv32/BatchNorm/beta:0\022\036deconv32/BatchNorm/beta/Assign\032\036deconv32/BatchNorm/beta/read:0"
        value: "\n\032deconv32/BatchNorm/gamma:0\022\037deconv32/BatchNorm/gamma/Assign\032\037deconv32/BatchNorm/gamma/read:0"
        value: "\n deconv32/BatchNorm/moving_mean:0\022%deconv32/BatchNorm/moving_mean/Assign\032%deconv32/BatchNorm/moving_mean/read:0"
        value: "\n$deconv32/BatchNorm/moving_variance:0\022)deconv32/BatchNorm/moving_variance/Assign\032)deconv32/BatchNorm/moving_variance/read:0"
        value: "\n\022deconv64/weights:0\022\027deconv64/weights/Assign\032\027deconv64/weights/read:0"
        value: "\n\rglobal_step:0\022\022global_step/Assign\032\022global_step/read:0"
        value: "\n\007epoch:0\022\014epoch/Assign\032\014epoch/read:0"
        value: "\n\rbeta1_power:0\022\022beta1_power/Assign\032\022beta1_power/read:0"
        value: "\n\rbeta2_power:0\022\022beta2_power/Assign\032\022beta2_power/read:0"
        value: "\n\025conv32/weights/Adam:0\022\032conv32/weights/Adam/Assign\032\032conv32/weights/Adam/read:0"
        value: "\n\027conv32/weights/Adam_1:0\022\034conv32/weights/Adam_1/Assign\032\034conv32/weights/Adam_1/read:0"
        value: "\n\034conv32/BatchNorm/beta/Adam:0\022!conv32/BatchNorm/beta/Adam/Assign\032!conv32/BatchNorm/beta/Adam/read:0"
        value: "\n\036conv32/BatchNorm/beta/Adam_1:0\022#conv32/BatchNorm/beta/Adam_1/Assign\032#conv32/BatchNorm/beta/Adam_1/read:0"
        value: "\n\035conv32/BatchNorm/gamma/Adam:0\022\"conv32/BatchNorm/gamma/Adam/Assign\032\"conv32/BatchNorm/gamma/Adam/read:0"
        value: "\n\037conv32/BatchNorm/gamma/Adam_1:0\022$conv32/BatchNorm/gamma/Adam_1/Assign\032$conv32/BatchNorm/gamma/Adam_1/read:0"
        value: "\n\025conv16/weights/Adam:0\022\032conv16/weights/Adam/Assign\032\032conv16/weights/Adam/read:0"
        value: "\n\027conv16/weights/Adam_1:0\022\034conv16/weights/Adam_1/Assign\032\034conv16/weights/Adam_1/read:0"
        value: "\n\034conv16/BatchNorm/beta/Adam:0\022!conv16/BatchNorm/beta/Adam/Assign\032!conv16/BatchNorm/beta/Adam/read:0"
        value: "\n\036conv16/BatchNorm/beta/Adam_1:0\022#conv16/BatchNorm/beta/Adam_1/Assign\032#conv16/BatchNorm/beta/Adam_1/read:0"
        value: "\n\035conv16/BatchNorm/gamma/Adam:0\022\"conv16/BatchNorm/gamma/Adam/Assign\032\"conv16/BatchNorm/gamma/Adam/read:0"
        value: "\n\037conv16/BatchNorm/gamma/Adam_1:0\022$conv16/BatchNorm/gamma/Adam_1/Assign\032$conv16/BatchNorm/gamma/Adam_1/read:0"
        value: "\n\024conv8/weights/Adam:0\022\031conv8/weights/Adam/Assign\032\031conv8/weights/Adam/read:0"
        value: "\n\026conv8/weights/Adam_1:0\022\033conv8/weights/Adam_1/Assign\032\033conv8/weights/Adam_1/read:0"
        value: "\n\033conv8/BatchNorm/beta/Adam:0\022 conv8/BatchNorm/beta/Adam/Assign\032 conv8/BatchNorm/beta/Adam/read:0"
        value: "\n\035conv8/BatchNorm/beta/Adam_1:0\022\"conv8/BatchNorm/beta/Adam_1/Assign\032\"conv8/BatchNorm/beta/Adam_1/read:0"
        value: "\n\034conv8/BatchNorm/gamma/Adam:0\022!conv8/BatchNorm/gamma/Adam/Assign\032!conv8/BatchNorm/gamma/Adam/read:0"
        value: "\n\036conv8/BatchNorm/gamma/Adam_1:0\022#conv8/BatchNorm/gamma/Adam_1/Assign\032#conv8/BatchNorm/gamma/Adam_1/read:0"
        value: "\n\024conv4/weights/Adam:0\022\031conv4/weights/Adam/Assign\032\031conv4/weights/Adam/read:0"
        value: "\n\026conv4/weights/Adam_1:0\022\033conv4/weights/Adam_1/Assign\032\033conv4/weights/Adam_1/read:0"
        value: "\n\033conv4/BatchNorm/beta/Adam:0\022 conv4/BatchNorm/beta/Adam/Assign\032 conv4/BatchNorm/beta/Adam/read:0"
        value: "\n\035conv4/BatchNorm/beta/Adam_1:0\022\"conv4/BatchNorm/beta/Adam_1/Assign\032\"conv4/BatchNorm/beta/Adam_1/read:0"
        value: "\n\034conv4/BatchNorm/gamma/Adam:0\022!conv4/BatchNorm/gamma/Adam/Assign\032!conv4/BatchNorm/gamma/Adam/read:0"
        value: "\n\036conv4/BatchNorm/gamma/Adam_1:0\022#conv4/BatchNorm/gamma/Adam_1/Assign\032#conv4/BatchNorm/gamma/Adam_1/read:0"
        value: "\n\024fc256/weights/Adam:0\022\031fc256/weights/Adam/Assign\032\031fc256/weights/Adam/read:0"
        value: "\n\026fc256/weights/Adam_1:0\022\033fc256/weights/Adam_1/Assign\032\033fc256/weights/Adam_1/read:0"
        value: "\n\033fc256/BatchNorm/beta/Adam:0\022 fc256/BatchNorm/beta/Adam/Assign\032 fc256/BatchNorm/beta/Adam/read:0"
        value: "\n\035fc256/BatchNorm/beta/Adam_1:0\022\"fc256/BatchNorm/beta/Adam_1/Assign\032\"fc256/BatchNorm/beta/Adam_1/read:0"
        value: "\n\034fc256/BatchNorm/gamma/Adam:0\022!fc256/BatchNorm/gamma/Adam/Assign\032!fc256/BatchNorm/gamma/Adam/read:0"
        value: "\n\036fc256/BatchNorm/gamma/Adam_1:0\022#fc256/BatchNorm/gamma/Adam_1/Assign\032#fc256/BatchNorm/gamma/Adam_1/read:0"
        value: "\n\026deconv8/weights/Adam:0\022\033deconv8/weights/Adam/Assign\032\033deconv8/weights/Adam/read:0"
        value: "\n\030deconv8/weights/Adam_1:0\022\035deconv8/weights/Adam_1/Assign\032\035deconv8/weights/Adam_1/read:0"
        value: "\n\035deconv8/BatchNorm/beta/Adam:0\022\"deconv8/BatchNorm/beta/Adam/Assign\032\"deconv8/BatchNorm/beta/Adam/read:0"
        value: "\n\037deconv8/BatchNorm/beta/Adam_1:0\022$deconv8/BatchNorm/beta/Adam_1/Assign\032$deconv8/BatchNorm/beta/Adam_1/read:0"
        value: "\n\036deconv8/BatchNorm/gamma/Adam:0\022#deconv8/BatchNorm/gamma/Adam/Assign\032#deconv8/BatchNorm/gamma/Adam/read:0"
        value: "\n deconv8/BatchNorm/gamma/Adam_1:0\022%deconv8/BatchNorm/gamma/Adam_1/Assign\032%deconv8/BatchNorm/gamma/Adam_1/read:0"
        value: "\n\027deconv16/weights/Adam:0\022\034deconv16/weights/Adam/Assign\032\034deconv16/weights/Adam/read:0"
        value: "\n\031deconv16/weights/Adam_1:0\022\036deconv16/weights/Adam_1/Assign\032\036deconv16/weights/Adam_1/read:0"
        value: "\n\036deconv16/BatchNorm/beta/Adam:0\022#deconv16/BatchNorm/beta/Adam/Assign\032#deconv16/BatchNorm/beta/Adam/read:0"
        value: "\n deconv16/BatchNorm/beta/Adam_1:0\022%deconv16/BatchNorm/beta/Adam_1/Assign\032%deconv16/BatchNorm/beta/Adam_1/read:0"
        value: "\n\037deconv16/BatchNorm/gamma/Adam:0\022$deconv16/BatchNorm/gamma/Adam/Assign\032$deconv16/BatchNorm/gamma/Adam/read:0"
        value: "\n!deconv16/BatchNorm/gamma/Adam_1:0\022&deconv16/BatchNorm/gamma/Adam_1/Assign\032&deconv16/BatchNorm/gamma/Adam_1/read:0"
        value: "\n\027deconv32/weights/Adam:0\022\034deconv32/weights/Adam/Assign\032\034deconv32/weights/Adam/read:0"
        value: "\n\031deconv32/weights/Adam_1:0\022\036deconv32/weights/Adam_1/Assign\032\036deconv32/weights/Adam_1/read:0"
        value: "\n\036deconv32/BatchNorm/beta/Adam:0\022#deconv32/BatchNorm/beta/Adam/Assign\032#deconv32/BatchNorm/beta/Adam/read:0"
        value: "\n deconv32/BatchNorm/beta/Adam_1:0\022%deconv32/BatchNorm/beta/Adam_1/Assign\032%deconv32/BatchNorm/beta/Adam_1/read:0"
        value: "\n\037deconv32/BatchNorm/gamma/Adam:0\022$deconv32/BatchNorm/gamma/Adam/Assign\032$deconv32/BatchNorm/gamma/Adam/read:0"
        value: "\n!deconv32/BatchNorm/gamma/Adam_1:0\022&deconv32/BatchNorm/gamma/Adam_1/Assign\032&deconv32/BatchNorm/gamma/Adam_1/read:0"
        value: "\n\027deconv64/weights/Adam:0\022\034deconv64/weights/Adam/Assign\032\034deconv64/weights/Adam/read:0"
        value: "\n\031deconv64/weights/Adam_1:0\022\036deconv64/weights/Adam_1/Assign\032\036deconv64/weights/Adam_1/read:0"
      }
    }
  }
}
